 * Serving Flask app 'server' (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: on
Starting at: 0
using curve-fitted scaling function to estimate configuration for tenants 1
1
255
total_cost = 8
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
Returning adaptive scaler for  1 tenants and 0;0;0;1:
1
255
Getting next batch of experiments for 1 tenants
Moving filtered samples in sorted combinations after the window
['0001', '0010', '0100', '0002', '0011', '0020', '0101', '1000', '0110', '0003', '0200', '0012', '0021', '0102', '1001', '0030', '0111', '1010', '0120', '0201', '1100', '0013', '0210', '0022', '0103', '0300', '1002', '0031', '0112', '1011', '0121', '0202', '1020', '1101', '2000', '0130', '0211', '1110', '0023', '0220', '0301', '1003', '1200', '0032', '0113', '0310', '1012', '0122', '0203', '1021', '1102', '2001', '0131', '0212', '1030', '1111', '2010', '0221', '0302', '1120', '1201', '2100', '0033', '0230', '0311', '1013', '1210', '0123', '0320', '1022', '1103', '1300', '2002', '0132', '0213', '1031', '1112', '2011', '0222', '0303', '1121', '1202', '2020', '2101', '3000', '0231', '0312', '1130', '1211', '2110', '0321', '1023', '1220', '1301', '2003', '2200', '0133', '0330', '1032', '1113', '1310', '2012', '0223', '1122', '1203', '2021', '2102', '3001', '0232', '0313', '1131', '1212', '2030', '2111', '3010', '0322', '1221', '1302', '2120', '2201', '3100', '0331', '1033', '1230', '1311', '2013', '2210', '1123', '1320', '2022', '2103', '2300', '3002', '0233', '1132', '1213', '2031', '2112', '3011', '0323', '1222', '1303', '2121', '2202', '3020', '3101', '0332', '1231', '1312', '2130', '2211', '3110', '1321', '2023', '2220', '2301', '3003', '3200', '1133', '1330', '2032', '2113', '2310', '3012', '1223', '2122', '2203', '3021', '3102', '0333', '1232', '1313', '2131', '2212', '3030', '3111', '1322', '2221', '2302', '3120', '3201', '1331', '2033', '2230', '2311', '3013', '3210', '2123', '2320', '3022', '3103', '3300', '1233', '2132', '2213', '3031', '3112', '1323', '2222', '2303', '3121', '3202', '1332', '2231', '2312', '3130', '3211', '2321', '3023', '3220', '3301', '2133', '2330', '3032', '3113', '3310', '2223', '3122', '3203', '1333', '2232', '2313', '3131', '3212', '2322', '3221', '3302', '2331', '3033', '3230', '3311', '3123', '3320', '2233', '3132', '3213', '2323', '3222', '3303', '2332', '3231', '3312', '3321', '3133', '3330', '3223', '2333', '3232', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 10
Starting at index 0 with window 10
[0, 0, 0, 1]
not removed
[0, 0, 1, 0]
not removed
[0, 1, 0, 0]
not removed
[0, 0, 0, 2]
not removed
[0, 0, 1, 1]
not removed
[0, 0, 2, 0]
not removed
[0, 1, 0, 1]
not removed
[1, 0, 0, 0]
not removed
[0, 1, 1, 0]
not removed
[0, 0, 0, 3]
not removed
Starting at index 0 with window 10
['0001', '0010', '0100', '0002', '0011', '0020', '0101', '1000', '0110', '0003', '0200', '0012', '0021', '0102', '1001', '0030', '0111', '1010', '0120', '0201', '1100', '0013', '0210', '0022', '0103', '0300', '1002', '0031', '0112', '1011', '0121', '0202', '1020', '1101', '2000', '0130', '0211', '1110', '0023', '0220', '0301', '1003', '1200', '0032', '0113', '0310', '1012', '0122', '0203', '1021', '1102', '2001', '0131', '0212', '1030', '1111', '2010', '0221', '0302', '1120', '1201', '2100', '0033', '0230', '0311', '1013', '1210', '0123', '0320', '1022', '1103', '1300', '2002', '0132', '0213', '1031', '1112', '2011', '0222', '0303', '1121', '1202', '2020', '2101', '3000', '0231', '0312', '1130', '1211', '2110', '0321', '1023', '1220', '1301', '2003', '2200', '0133', '0330', '1032', '1113', '1310', '2012', '0223', '1122', '1203', '2021', '2102', '3001', '0232', '0313', '1131', '1212', '2030', '2111', '3010', '0322', '1221', '1302', '2120', '2201', '3100', '0331', '1033', '1230', '1311', '2013', '2210', '1123', '1320', '2022', '2103', '2300', '3002', '0233', '1132', '1213', '2031', '2112', '3011', '0323', '1222', '1303', '2121', '2202', '3020', '3101', '0332', '1231', '1312', '2130', '2211', '3110', '1321', '2023', '2220', '2301', '3003', '3200', '1133', '1330', '2032', '2113', '2310', '3012', '1223', '2122', '2203', '3021', '3102', '0333', '1232', '1313', '2131', '2212', '3030', '3111', '1322', '2221', '2302', '3120', '3201', '1331', '2033', '2230', '2311', '3013', '3210', '2123', '2320', '3022', '3103', '3300', '1233', '2132', '2213', '3031', '3112', '1323', '2222', '2303', '3121', '3202', '1332', '2231', '2312', '3130', '3211', '2321', '3023', '3220', '3301', '2133', '2330', '3032', '3113', '3310', '2223', '3122', '3203', '1333', '2232', '2313', '3131', '3212', '2322', '3221', '3302', '2331', '3033', '3230', '3311', '3123', '3320', '2233', '3132', '3213', '2323', '3222', '3303', '2332', '3231', '3312', '3321', '3133', '3330', '3223', '2333', '3232', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 0 0 1
min_conf_dec: 0
0
[0, 0, 0, 1]
1
[0, 0, 1, 0]
2
[0, 1, 0, 0]
3
[0, 0, 0, 2]
4
[0, 0, 1, 1]
5
[0, 0, 2, 0]
6
[0, 1, 0, 1]
7
[1, 0, 0, 0]
8
[0, 1, 1, 0]
9
[0, 0, 0, 3]
{'0': [[0, 0, 1], [0, 1, 0], [1, 0, 0], [0, 0, 2], [0, 1, 1], [0, 2, 0], [1, 0, 1], [1, 1, 0], [0, 0, 3]], '1': [[0, 0, 0]]}
{'0': [[0, 1, 0], [1, 0, 0], [0, 2, 0], [1, 1, 0], [2, 0, 0], [0, 0, 1], [0, 3, 0]], '1': [[0, 0, 0], [0, 1, 0], [1, 0, 0]]}
{'0': [[1, 0, 0], [0, 0, 1], [2, 0, 0], [1, 0, 1], [0, 1, 0], [3, 0, 0]], '1': [[0, 0, 0], [1, 0, 0], [0, 0, 1]], '2': [[0, 0, 0]]}
{'1': [[0, 0, 0], [0, 0, 1], [0, 1, 0]], '0': [[0, 0, 1], [0, 1, 0], [0, 0, 2], [1, 0, 0], [0, 1, 1]], '2': [[0, 0, 0]], '3': [[0, 0, 0]]}
Next possible experiments for next nb of tenants
{'0': [[0, 0, 1], [0, 1, 0], [1, 0, 0], [0, 0, 2], [0, 1, 1], [0, 2, 0], [1, 0, 1], [1, 1, 0], [0, 0, 3]], '1': [[0, 0, 0]]}
Elementstr: [[0,0,0,1];[0,0,1,0];[0,1,0,0];[0,0,0,2];[0,0,1,1];[0,0,2,0];[0,1,0,1];[0,1,1,0];[0,0,0,3]]
Min replicacount:0 0 0 1
Max replicacount:0 0 0 3
Elementstr: [[1,0,0,0]]
Min replicacount:1 0 0 0
Max replicacount:1 0 0 0
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 1e-09
[0, 0, 0, 2] -> 1e-09
[0, 0, 1, 0] -> 1e-09
[0, 1, 1, 0] -> 1e-09
[0, 1, 0, 0] -> 1e-09
[0, 0, 2, 0] -> 1e-09
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex1/op/
SAMPLE_LIST
[1, 0, 0, 0] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.16', 'config': '0', 'score': '-0.16', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;0;3:
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
['0001', '0010', '0100', '0002', '0011', '0020', '0101', '1000', '0110', '0003', '0200', '0012', '0021', '0102', '1001', '0030', '0111', '1010', '0120', '0201', '1100', '0013', '0210', '0022', '0103', '0300', '1002', '0031', '0112', '1011', '0121', '0202', '1020', '1101', '2000', '0130', '0211', '1110', '0023', '0220', '0301', '1003', '1200', '0032', '0113', '0310', '1012', '0122', '0203', '1021', '1102', '2001', '0131', '0212', '1030', '1111', '2010', '0221', '0302', '1120', '1201', '2100', '0033', '0230', '0311', '1013', '1210', '0123', '0320', '1022', '1103', '1300', '2002', '0132', '0213', '1031', '1112', '2011', '0222', '0303', '1121', '1202', '2020', '2101', '3000', '0231', '0312', '1130', '1211', '2110', '0321', '1023', '1220', '1301', '2003', '2200', '0133', '0330', '1032', '1113', '1310', '2012', '0223', '1122', '1203', '2021', '2102', '3001', '0232', '0313', '1131', '1212', '2030', '2111', '3010', '0322', '1221', '1302', '2120', '2201', '3100', '0331', '1033', '1230', '1311', '2013', '2210', '1123', '1320', '2022', '2103', '2300', '3002', '0233', '1132', '1213', '2031', '2112', '3011', '0323', '1222', '1303', '2121', '2202', '3020', '3101', '0332', '1231', '1312', '2130', '2211', '3110', '1321', '2023', '2220', '2301', '3003', '3200', '1133', '1330', '2032', '2113', '2310', '3012', '1223', '2122', '2203', '3021', '3102', '0333', '1232', '1313', '2131', '2212', '3030', '3111', '1322', '2221', '2302', '3120', '3201', '1331', '2033', '2230', '2311', '3013', '3210', '2123', '2320', '3022', '3103', '3300', '1233', '2132', '2213', '3031', '3112', '1323', '2222', '2303', '3121', '3202', '1332', '2231', '2312', '3130', '3211', '2321', '3023', '3220', '3301', '2133', '2330', '3032', '3113', '3310', '2223', '3122', '3203', '1333', '2232', '2313', '3131', '3212', '2322', '3221', '3302', '2331', '3033', '3230', '3311', '3123', '3320', '2233', '3132', '3213', '2323', '3222', '3303', '2332', '3231', '3312', '3321', '3133', '3330', '3223', '2333', '3232', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '166', 'Successfull': 'true'}
Starting at: 9
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '166', 'Successfull': 'true'}]
Filtered results
Current result is NO RESULT, therefore, we remove all configs with higher resource_cost than current result for higher number of tenants: 2..1
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '166', 'Successfull': 'true'}]
Filtered results
Left over configs in runtime manager: 
[[0, 0, 0, 2], [0, 0, 1, 0], [0, 1, 1, 0], [0, 1, 0, 0], [0, 0, 2, 0], [1, 0, 0, 0]]
Moving filtered samples in sorted combinations after the window
['0001', '0010', '0100', '0002', '0011', '0020', '0101', '1000', '0110', '0003', '0200', '0012', '0021', '0102', '1001', '0030', '0111', '1010', '0120', '0201', '1100', '0013', '0210', '0022', '0103', '0300', '1002', '0031', '0112', '1011', '0121', '0202', '1020', '1101', '2000', '0130', '0211', '1110', '0023', '0220', '0301', '1003', '1200', '0032', '0113', '0310', '1012', '0122', '0203', '1021', '1102', '2001', '0131', '0212', '1030', '1111', '2010', '0221', '0302', '1120', '1201', '2100', '0033', '0230', '0311', '1013', '1210', '0123', '0320', '1022', '1103', '1300', '2002', '0132', '0213', '1031', '1112', '2011', '0222', '0303', '1121', '1202', '2020', '2101', '3000', '0231', '0312', '1130', '1211', '2110', '0321', '1023', '1220', '1301', '2003', '2200', '0133', '0330', '1032', '1113', '1310', '2012', '0223', '1122', '1203', '2021', '2102', '3001', '0232', '0313', '1131', '1212', '2030', '2111', '3010', '0322', '1221', '1302', '2120', '2201', '3100', '0331', '1033', '1230', '1311', '2013', '2210', '1123', '1320', '2022', '2103', '2300', '3002', '0233', '1132', '1213', '2031', '2112', '3011', '0323', '1222', '1303', '2121', '2202', '3020', '3101', '0332', '1231', '1312', '2130', '2211', '3110', '1321', '2023', '2220', '2301', '3003', '3200', '1133', '1330', '2032', '2113', '2310', '3012', '1223', '2122', '2203', '3021', '3102', '0333', '1232', '1313', '2131', '2212', '3030', '3111', '1322', '2221', '2302', '3120', '3201', '1331', '2033', '2230', '2311', '3013', '3210', '2123', '2320', '3022', '3103', '3300', '1233', '2132', '2213', '3031', '3112', '1323', '2222', '2303', '3121', '3202', '1332', '2231', '2312', '3130', '3211', '2321', '3023', '3220', '3301', '2133', '2330', '3032', '3113', '3310', '2223', '3122', '3203', '1333', '2232', '2313', '3131', '3212', '2322', '3221', '3302', '2331', '3033', '3230', '3311', '3123', '3320', '2233', '3132', '3213', '2323', '3222', '3303', '2332', '3231', '3312', '3321', '3133', '3330', '3223', '2333', '3232', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 3 with window 10
Starting at index 3 with window 10
[0, 0, 0, 2]
not removed
[0, 0, 1, 1]
removed
[0, 0, 2, 0]
removed
[0, 1, 0, 1]
removed
[1, 0, 0, 0]
removed
[0, 1, 1, 0]
removed
[0, 0, 0, 3]
not removed
[0, 2, 0, 0]
removed
[0, 0, 1, 2]
not removed
[0, 0, 2, 1]
removed
Going to 2 tenants
Starting at index 3 with window 3
['0001', '0010', '0100', '0002', '0003', '0012', '0102', '0011', '0020', '0101', '1000', '0110', '1001', '0200', '0030', '0021', '0111', '1010', '0120', '0201', '1100', '0013', '0210', '0022', '0103', '0300', '1002', '0031', '0112', '1011', '0121', '0202', '1020', '1101', '2000', '0130', '0211', '1110', '0023', '0220', '0301', '1003', '1200', '0032', '0113', '0310', '1012', '0122', '0203', '1021', '1102', '2001', '0131', '0212', '1030', '1111', '2010', '0221', '0302', '1120', '1201', '2100', '0033', '0230', '0311', '1013', '1210', '0123', '0320', '1022', '1103', '1300', '2002', '0132', '0213', '1031', '1112', '2011', '0222', '0303', '1121', '1202', '2020', '2101', '3000', '0231', '0312', '1130', '1211', '2110', '0321', '1023', '1220', '1301', '2003', '2200', '0133', '0330', '1032', '1113', '1310', '2012', '0223', '1122', '1203', '2021', '2102', '3001', '0232', '0313', '1131', '1212', '2030', '2111', '3010', '0322', '1221', '1302', '2120', '2201', '3100', '0331', '1033', '1230', '1311', '2013', '2210', '1123', '1320', '2022', '2103', '2300', '3002', '0233', '1132', '1213', '2031', '2112', '3011', '0323', '1222', '1303', '2121', '2202', '3020', '3101', '0332', '1231', '1312', '2130', '2211', '3110', '1321', '2023', '2220', '2301', '3003', '3200', '1133', '1330', '2032', '2113', '2310', '3012', '1223', '2122', '2203', '3021', '3102', '0333', '1232', '1313', '2131', '2212', '3030', '3111', '1322', '2221', '2302', '3120', '3201', '1331', '2033', '2230', '2311', '3013', '3210', '2123', '2320', '3022', '3103', '3300', '1233', '2132', '2213', '3031', '3112', '1323', '2222', '2303', '3121', '3202', '1332', '2231', '2312', '3130', '3211', '2321', '3023', '3220', '3301', '2133', '2330', '3032', '3113', '3310', '2223', '3122', '3203', '1333', '2232', '2313', '3131', '3212', '2322', '3221', '3302', '2331', '3033', '3230', '3311', '3123', '3320', '2233', '3132', '3213', '2323', '3222', '3303', '2332', '3231', '3312', '3321', '3133', '3330', '3223', '2333', '3232', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Removing conf 0010 from left experiments in runtime manager because of this conf violates transition constraints
Runtime manager:: Removing sample for the following conf: [0,0,1,0]
Runtime manager:: Sample list before remove:
[[0, 0, 0, 3], [0, 0, 0, 2], [0, 0, 1, 0], [0, 1, 1, 0], [0, 1, 0, 0], [0, 0, 2, 0]]
[[1, 0, 0, 0]]
Runtime manager:: Sample list after remove:
[[0, 0, 0, 3], [0, 0, 0, 2], [0, 1, 1, 0], [0, 1, 0, 0], [0, 0, 2, 0]]
[[1, 0, 0, 0]]
Removing conf 0110 from left experiments in runtime manager because of this conf violates transition constraints
Runtime manager:: Removing sample for the following conf: [0,1,1,0]
Runtime manager:: Sample list before remove:
[[0, 0, 0, 3], [0, 0, 0, 2], [0, 1, 1, 0], [0, 1, 0, 0], [0, 0, 2, 0]]
[[1, 0, 0, 0]]
Runtime manager:: Sample list after remove:
[[0, 0, 0, 3], [0, 0, 0, 2], [0, 1, 0, 0], [0, 0, 2, 0]]
[[1, 0, 0, 0]]
Removing conf 0100 from left experiments in runtime manager because of this conf violates transition constraints
Runtime manager:: Removing sample for the following conf: [0,1,0,0]
Runtime manager:: Sample list before remove:
[[0, 0, 0, 3], [0, 0, 0, 2], [0, 1, 0, 0], [0, 0, 2, 0]]
[[1, 0, 0, 0]]
Runtime manager:: Sample list after remove:
[[0, 0, 0, 3], [0, 0, 0, 2], [0, 0, 2, 0]]
[[1, 0, 0, 0]]
Removing conf 0020 from left experiments in runtime manager because of this conf violates transition constraints
Runtime manager:: Removing sample for the following conf: [0,0,2,0]
Runtime manager:: Sample list before remove:
[[0, 0, 0, 3], [0, 0, 0, 2], [0, 0, 2, 0]]
[[1, 0, 0, 0]]
Runtime manager:: Sample list after remove:
[[0, 0, 0, 3], [0, 0, 0, 2]]
[[1, 0, 0, 0]]
Removing conf 1000 from left experiments in runtime manager because of this conf violates transition constraints
Runtime manager:: Removing sample for the following conf: [1,0,0,0]
Runtime manager:: Sample list before remove:
[[0, 0, 0, 3], [0, 0, 0, 2]]
[[1, 0, 0, 0]]
Runtime manager:: Sample list after remove:
[[0, 0, 0, 3], [0, 0, 0, 2]]
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 166
[0, 0, 0, 2] -> 1e-09
[0, 0, 1, 0] -> 1e-09
[0, 1, 1, 0] -> 1e-09
[0, 1, 0, 0] -> 1e-09
[0, 0, 2, 0] -> 1e-09
There still remains configs to be tested in the current k8-resource-optimizer experiment batch
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
Returning adaptive scaler for  1 tenants and 0;0;0;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.10666666666666667', 'config': '1', 'score': '-0.10666666666666667', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;0;2:
Returning adaptive scaler for  1 tenants and 0;0;0;2:
1
255
['0001', '0010', '0100', '0002', '0003', '0012', '0102', '0011', '0020', '0101', '1000', '0110', '1001', '0200', '0030', '0021', '0111', '1010', '0120', '0201', '1100', '0013', '0210', '0022', '0103', '0300', '1002', '0031', '0112', '1011', '0121', '0202', '1020', '1101', '2000', '0130', '0211', '1110', '0023', '0220', '0301', '1003', '1200', '0032', '0113', '0310', '1012', '0122', '0203', '1021', '1102', '2001', '0131', '0212', '1030', '1111', '2010', '0221', '0302', '1120', '1201', '2100', '0033', '0230', '0311', '1013', '1210', '0123', '0320', '1022', '1103', '1300', '2002', '0132', '0213', '1031', '1112', '2011', '0222', '0303', '1121', '1202', '2020', '2101', '3000', '0231', '0312', '1130', '1211', '2110', '0321', '1023', '1220', '1301', '2003', '2200', '0133', '0330', '1032', '1113', '1310', '2012', '0223', '1122', '1203', '2021', '2102', '3001', '0232', '0313', '1131', '1212', '2030', '2111', '3010', '0322', '1221', '1302', '2120', '2201', '3100', '0331', '1033', '1230', '1311', '2013', '2210', '1123', '1320', '2022', '2103', '2300', '3002', '0233', '1132', '1213', '2031', '2112', '3011', '0323', '1222', '1303', '2121', '2202', '3020', '3101', '0332', '1231', '1312', '2130', '2211', '3110', '1321', '2023', '2220', '2301', '3003', '3200', '1133', '1330', '2032', '2113', '2310', '3012', '1223', '2122', '2203', '3021', '3102', '0333', '1232', '1313', '2131', '2212', '3030', '3111', '1322', '2221', '2302', '3120', '3201', '1331', '2033', '2230', '2311', '3013', '3210', '2123', '2320', '3022', '3103', '3300', '1233', '2132', '2213', '3031', '3112', '1323', '2222', '2303', '3121', '3202', '1332', '2231', '2312', '3130', '3211', '2321', '3023', '3220', '3301', '2133', '2330', '3032', '3113', '3310', '2223', '3122', '3203', '1333', '2232', '2313', '3131', '3212', '2322', '3221', '3302', '2331', '3033', '3230', '3311', '3123', '3320', '2233', '3132', '3213', '2323', '3222', '3303', '2332', '3231', '3312', '3321', '3133', '3330', '3223', '2333', '3232', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '228', 'Successfull': 'true'}
Starting at: 3
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '228', 'Successfull': 'true'}]
Filtered results
Current result is NO RESULT, therefore, we remove all configs with higher resource_cost than current result for higher number of tenants: 2..1
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '228', 'Successfull': 'true'}]
Filtered results
[0, 0, 0, 1]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 0, 1, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 1, 0, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
Removing failed conf
[0, 0, 0, 2]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 166
[0, 0, 0, 2] -> 228
[0, 0, 1, 0] -> 1e-09
[0, 1, 1, 0] -> 1e-09
[0, 1, 0, 0] -> 1e-09
[0, 0, 2, 0] -> 1e-09
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 2 experiments
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex0/op/
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex1/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 166
[0, 0, 0, 2] -> 228
[0, 0, 1, 0] -> 1e-09
[0, 1, 1, 0] -> 1e-09
[0, 1, 0, 0] -> 1e-09
[0, 0, 2, 0] -> 1e-09
[1, 0, 0, 0] -> 1e-09
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': '-1.1066666666666667', 'best_score': '-1', 'SLAName': 'silver', 'CompletionTime': '166', 'Successfull': 'true'}, {'config': '1', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': '-1.52', 'best_score': '-1', 'SLAName': 'silver', 'CompletionTime': '228', 'Successfull': 'true'}, {'config': '2', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '0', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': '-0.06666666666666667', 'best_score': '-0.06666666666666667', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}, {'config': '3', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '0', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': '-0.14666666666666667', 'best_score': '-0.06666666666666667', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}, {'config': '4', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '0', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': '-0.08', 'best_score': '-0.06666666666666667', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}, {'config': '5', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '2', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '0', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': '-0.13333333333333333', 'best_score': '-0.06666666666666667', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}, {'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '0', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': '-0.13333333333333333', 'best_score': '-0.13333333333333333', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}]
Filtered results
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
[9880593853]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{}, [], [<src.sla.WorkerConf object at 0x7fabc4d6b550>, <src.sla.WorkerConf object at 0x7fabc4d6b750>, <src.sla.WorkerConf object at 0x7fabc4d6b1d0>, <src.sla.WorkerConf object at 0x7fabc5828390>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
NO RESULT
TIPPED_OVER_CONFS
[[0, 0, 0, 3]]
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
SCALE UP DIFF
difference between resource_cost optimal conf and predicted total cost -1
37
SCALE UP DIFF
Rescaling worker 4
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
6
4
3
3
Moving filtered samples in sorted combinations after the window
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '1001', '0030', '0021', '1010', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 6 with window 1
Starting at index 6 with window 1
Going to 2 tenants
Starting at index 6 with window 1
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '1001', '0030', '0021', '1010', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
False
True
[[0, 0, 0, 3]]
[0, 0, 0, 3]
[[{}, [], [<src.sla.WorkerConf object at 0x7fabc4d295d0>, <src.sla.WorkerConf object at 0x7fabc4d29410>, <src.sla.WorkerConf object at 0x7fabc4d29550>, <src.sla.WorkerConf object at 0x7fabc4d29450>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': 1000149.0, 'Successfull': 'true'}
RETRYING WITH ANOTHER WORKER CONFIGURATION
Starting at index 6 with window 1
Saving optimal results into matrix for previous results
using curve-fitted scaling function to estimate configuration for tenants 2
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
total_cost = 10
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Returning adaptive scaler for  2 tenants and 0;0;1;1:
1
255
Getting next batch of experiments for 2 tenants
Moving filtered samples in sorted combinations after the window
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '1001', '0030', '0021', '1010', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 10
Starting at index 0 with window 10
[0, 0, 1, 1]
removed
[0, 0, 2, 0]
removed
[1, 0, 0, 0]
removed
[0, 1, 0, 1]
removed
[0, 1, 1, 0]
removed
[0, 2, 0, 0]
removed
[0, 0, 0, 3]
not removed
[0, 0, 1, 2]
not removed
[1, 0, 0, 1]
removed
[0, 0, 3, 0]
removed
Going to 2 tenants
Starting at index 0 with window 2
['0003', '0012', '0011', '0020', '1000', '0101', '0110', '0200', '0021', '1010', '1001', '0030', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 0 0 3
min_conf_dec: 0
0
[0, 0, 0, 3]
1
[0, 0, 1, 2]
{'0': [[0, 0, 3], [0, 1, 2]]}
{'0': [[0, 3, 0], [1, 2, 0]]}
{'0': [[3, 0, 0]], '1': [[2, 0, 0]]}
{'3': [[0, 0, 0]], '2': [[0, 0, 1]]}
Next possible experiments for next nb of tenants
{'0': [[0, 0, 3], [0, 1, 2]]}
Elementstr: [[0,0,0,3];[0,0,1,2]]
Min replicacount:0 0 0 3
Max replicacount:0 0 1 2
Generating new experiment. Saving results on Results/exp3/silver/2_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  2 tenants and 0;0;0;3:
Returning adaptive scaler for  2 tenants and 0;0;0;3:
1
255
['0003', '0012', '0011', '0020', '1000', '0101', '0110', '0200', '0021', '1010', '1001', '0030', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '173', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 2, maxTenants: 2
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '173', 'Successfull': 'true'}]
Filtered results
Current result is NO RESULT, therefore, we remove all configs with higher resource_cost than current result for higher number of tenants: 3..2
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '173', 'Successfull': 'true'}]
Filtered results
[0, 0, 1, 1]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 0, 2, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[1, 0, 0, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 1, 0, 1]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 1, 1, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 2, 0, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
Removing failed conf
[0, 0, 0, 3]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/2_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 173
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/2_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 173
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-1.1533333333333333', 'best_score': '-1', 'SLAName': 'silver', 'CompletionTime': '173', 'Successfull': 'true'}]
Filtered results
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[9880593853]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{}, [], [<src.sla.WorkerConf object at 0x7fabc4d6b6d0>, <src.sla.WorkerConf object at 0x7fabc4d6b990>, <src.sla.WorkerConf object at 0x7fabc4d6b650>, <src.sla.WorkerConf object at 0x7fabc4d6b350>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO RESULT
Moving filtered samples in sorted combinations after the window
['0012', '0021', '1010', '1001', '0030', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 10
Starting at index 0 with window 10
[0, 0, 1, 2]
not removed
[0, 0, 2, 1]
removed
[1, 0, 1, 0]
removed
[1, 0, 0, 1]
removed
[0, 0, 3, 0]
removed
[0, 1, 0, 2]
not removed
[0, 1, 1, 1]
removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 2, 0, 1]
removed
Going to 2 tenants
Starting at index 0 with window 2
['0012', '0102', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '1100', '0201', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Getting next batch of experiments for 2 tenants
min_conf: 0 0 1 2
min_conf_dec: 0
0
[0, 0, 1, 2]
1
[0, 1, 0, 2]
{'0': [[0, 1, 2], [1, 0, 2]]}
{'0': [[1, 2, 0]], '1': [[0, 2, 0]]}
{'1': [[2, 0, 0]], '0': [[2, 0, 1]]}
{'2': [[0, 0, 1], [0, 1, 0]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 2], [1, 0, 2]]}
Elementstr: [[0,0,1,2];[0,1,0,2]]
Min replicacount:0 0 1 2
Max replicacount:0 1 0 2
Generating new experiment. Saving results on Results/exp3/silver/2_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 1e-09
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{}, [], [<src.sla.WorkerConf object at 0x7fabc4d57750>, <src.sla.WorkerConf object at 0x7fabc4d578d0>, <src.sla.WorkerConf object at 0x7fabc4d577d0>, <src.sla.WorkerConf object at 0x7fabc4d57f50>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Saving optimal results into matrix for previous results
using curve-fitted scaling function to estimate configuration for tenants 3
Returning adaptive scaler for  2 tenants and 0;0;1;2:
1
255
total_cost = 9
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
Getting next batch of experiments for 3 tenants
Moving filtered samples in sorted combinations after the window
['0012', '0102', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '1100', '0201', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 10
Starting at index 0 with window 10
[0, 0, 1, 2]
not removed
[0, 1, 0, 2]
not removed
[0, 2, 1, 0]
removed
[0, 0, 2, 1]
removed
[1, 0, 1, 0]
removed
[1, 0, 0, 1]
removed
[0, 0, 3, 0]
removed
[0, 3, 0, 0]
removed
[0, 1, 1, 1]
removed
[0, 1, 2, 0]
removed
Going to 2 tenants
[0, 0, 1, 2]
not removed
[0, 1, 0, 2]
not removed
Going to 3 tenants
Starting at index 0 with window 2
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 0 1 2
min_conf_dec: 0
0
[0, 0, 1, 2]
1
[0, 1, 0, 2]
{'0': [[0, 1, 2], [1, 0, 2]]}
{'0': [[1, 2, 0]], '1': [[0, 2, 0]]}
{'1': [[2, 0, 0]], '0': [[2, 0, 1]]}
{'2': [[0, 0, 1], [0, 1, 0]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 2], [1, 0, 2]]}
Elementstr: [[0,0,1,2];[0,1,0,2]]
Min replicacount:0 0 1 2
Max replicacount:0 1 0 2
Generating new experiment. Saving results on Results/exp3/silver/3_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  3 tenants and 0;0;1;2:
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '131', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 3, maxTenants: 3
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '131', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '131', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '131', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '131', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/3_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 131
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/3_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 131
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '131', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '131', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 131.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Transferring result from 3 to 4
Returning adaptive scaler for  3 tenants and 0;0;1;2:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': 1000149.0, 'Successfull': 'true'}
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
Getting next batch of experiments for 4 tenants
Moving filtered samples in sorted combinations after the window
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 1
Starting at index 0 with window 1
[0, 0, 1, 2]
not removed
Going to 2 tenants
[0, 0, 1, 2]
not removed
Going to 3 tenants
Starting at index 0 with window 1
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 0 1 2
min_conf_dec: 0
0
[0, 0, 1, 2]
{'0': [[0, 1, 2]]}
{'0': [[1, 2, 0]]}
{'1': [[2, 0, 0]]}
{'2': [[0, 0, 1]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 2]]}
Elementstr: [[0,0,1,2]]
Min replicacount:0 0 1 2
Max replicacount:0 0 1 2
Generating new experiment. Saving results on Results/exp3/silver/4_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 1e-09
Runtime manager:: Removing sample for the following conf: [0,0,1,2]
Runtime manager:: Sample list before remove:
[[0, 0, 1, 2]]
Runtime manager:: Going to next experiment
Runtime manager:: Sample list after remove:
Runtime manager:: No experiments left.
Runtime manager:: last_executed_experiment:
{'experiment_spec': [[<src.sla.WorkerConf object at 0x7fabc4d66550>, <src.sla.WorkerConf object at 0x7fabc4d66690>, <src.sla.WorkerConf object at 0x7fabc4d66250>, <src.sla.WorkerConf object at 0x7fabc4d66e90>], '[[0,0,1,2]]', '0 0 1 2', '0 0 1 2', 1], 'experiment_nb': 0, 'sample_nb': 0, 'sample': {'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}}
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '131', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  4 tenants and 0;0;1;2:
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 4, maxTenants: 4
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/4_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 141
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/4_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 141
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 141.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Transferring result from 4 to 5
Returning adaptive scaler for  4 tenants and 0;0;1;2:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': 1000149.0, 'Successfull': 'true'}
Returning adaptive scaler for  5 tenants and 0;0;1;2:
1
255
Getting next batch of experiments for 5 tenants
Moving filtered samples in sorted combinations after the window
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 1
Starting at index 0 with window 1
[0, 0, 1, 2]
not removed
Going to 2 tenants
[0, 0, 1, 2]
not removed
Going to 3 tenants
Starting at index 0 with window 1
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 0 1 2
min_conf_dec: 0
0
[0, 0, 1, 2]
{'0': [[0, 1, 2]]}
{'0': [[1, 2, 0]]}
{'1': [[2, 0, 0]]}
{'2': [[0, 0, 1]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 2]]}
Elementstr: [[0,0,1,2]]
Min replicacount:0 0 1 2
Max replicacount:0 0 1 2
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 1e-09
Runtime manager:: Removing sample for the following conf: [0,0,1,2]
Runtime manager:: Sample list before remove:
[[0, 0, 1, 2]]
Runtime manager:: Going to next experiment
Runtime manager:: Sample list after remove:
Runtime manager:: No experiments left.
Runtime manager:: last_executed_experiment:
{'experiment_spec': [[<src.sla.WorkerConf object at 0x7fabc4d434d0>, <src.sla.WorkerConf object at 0x7fabc4d43450>, <src.sla.WorkerConf object at 0x7fabc4d43150>, <src.sla.WorkerConf object at 0x7fabc4d43290>], '[[0,0,1,2]]', '0 0 1 2', '0 0 1 2', 1], 'experiment_nb': 0, 'sample_nb': 0, 'sample': {'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}}
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '131', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  5 tenants and 0;0;1;2:
Returning adaptive scaler for  5 tenants and 0;0;1;2:
1
255
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '150', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 5, maxTenants: 5
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '150', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '150', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '150', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '150', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 150
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 150
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '150', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '150', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 150.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  5 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '131', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '150', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  5 tenants and 0;0;1;2:
Returning adaptive scaler for  5 tenants and 0;0;1;2:
1
255
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '149', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 5, maxTenants: 5
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '149', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '149', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '149', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '149', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 149.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  5 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '131', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '149', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  5 tenants and 0;0;1;2:
Returning adaptive scaler for  5 tenants and 0;0;1;2:
1
255
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '151', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 5, maxTenants: 5
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '151', 'Successfull': 'true'}]
Filtered results
Current result is NO RESULT, therefore, we remove all configs with higher resource_cost than current result for higher number of tenants: 6..5
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '151', 'Successfull': 'true'}]
Filtered results
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[9880593853]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{}, [], [<src.sla.WorkerConf object at 0x7fabc4d43750>, <src.sla.WorkerConf object at 0x7fabc4d43a50>, <src.sla.WorkerConf object at 0x7fabc4d43a90>, <src.sla.WorkerConf object at 0x7fabc4d43f90>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO RESULT
TIPPED_OVER_CONFS
[[0, 0, 1, 2]]
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE UP DIFF
difference between resource_cost optimal conf and predicted total cost -1
37
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
Removing failed conf
[0, 0, 1, 2]
Tipped over conf already removed:
[0, 0, 1, 2]
Moving filtered samples in sorted combinations after the window
['0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 10
Starting at index 0 with window 10
[0, 1, 0, 2]
not removed
[1, 1, 0, 0]
removed
[0, 2, 0, 1]
removed
[0, 2, 1, 0]
removed
[0, 0, 2, 1]
removed
[1, 0, 1, 0]
removed
[1, 0, 0, 1]
removed
[0, 0, 3, 0]
removed
[0, 3, 0, 0]
removed
[0, 1, 1, 1]
removed
Going to 2 tenants
[0, 1, 0, 2]
not removed
Going to 3 tenants
Starting at index 0 with window 1
['0102', '0120', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Starting at index 0 with window 1
Getting next batch of experiments for 5 tenants
min_conf: 0 1 0 2
min_conf_dec: 0
0
[0, 1, 0, 2]
{'0': [[1, 0, 2]]}
{'1': [[0, 2, 0]]}
{'0': [[2, 0, 1]]}
{'2': [[0, 1, 0]]}
Next possible experiments for next nb of tenants
{'0': [[1, 0, 2]]}
Elementstr: [[0,1,0,2]]
Min replicacount:0 1 0 2
Max replicacount:0 1 0 2
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 1e-09
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Saving optimal results into matrix for previous results
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '131', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  4 tenants and 0;0;1;2:
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 4, maxTenants: 4
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 141.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '131', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  3 tenants and 0;0;1;2:
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '131', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 3, maxTenants: 3
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '131', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '131', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '131', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '131', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 131.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  2 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '131', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  2 tenants and 0;0;1;2:
Returning adaptive scaler for  2 tenants and 0;0;1;2:
1
255
['0012', '0102', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '1100', '0201', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 2, maxTenants: 2
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/2_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 120
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/2_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 120
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 120.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{}, [], [<src.sla.WorkerConf object at 0x7fabc4d57750>, <src.sla.WorkerConf object at 0x7fabc4d578d0>, <src.sla.WorkerConf object at 0x7fabc4d577d0>, <src.sla.WorkerConf object at 0x7fabc4d57f50>]], [{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc6082e10>, <src.sla.WorkerConf object at 0x7fabc74c39d0>, <src.sla.WorkerConf object at 0x7fabc74c3c50>, <src.sla.WorkerConf object at 0x7fabc4d6b850>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_2
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
4
SCALE DOWN DIFF
Rescaling worker 3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 2, 'memory': 2}
{'cpu': 3, 'memory': 2}
6
4
2
3
Moving filtered samples in sorted combinations after the window
['0030', '0021', '0012', '1010', '0120', '1001', '0111', '0102', '0210', '1100', '0201', '0031', '0300', '0022', '1020', '0130', '0013', '1011', '0121', '1002', '2000', '0112', '1110', '0220', '0103', '1101', '0211', '0202', '1200', '0310', '0032', '1030', '0301', '0023', '1021', '0131', '1012', '2010', '0122', '1120', '0230', '1003', '2001', '0113', '1111', '0221', '1102', '2100', '0212', '1210', '0320', '0203', '1201', '0311', '0033', '1031', '0302', '1300', '1022', '2020', '0132', '1130', '1013', '2011', '0123', '1121', '0231', '2002', '3000', '1112', '2110', '0222', '1220', '0330', '1103', '2101', '0213', '1211', '0321', '1202', '2200', '0312', '1310', '1032', '2030', '0303', '1301', '1023', '2021', '0133', '1131', '2012', '3010', '1122', '2120', '0232', '1230', '2003', '3001', '1113', '2111', '0223', '1221', '0331', '2102', '3100', '1212', '2210', '0322', '1320', '1203', '2201', '0313', '1311', '1033', '2031', '1302', '2300', '2022', '3020', '1132', '2130', '2013', '3011', '1123', '2121', '0233', '1231', '3002', '2112', '3110', '1222', '2220', '0332', '1330', '2103', '3101', '1213', '2211', '0323', '1321', '2202', '3200', '1312', '2310', '2032', '3030', '1303', '2301', '2023', '3021', '1133', '2131', '3012', '2122', '3120', '1232', '2230', '3003', '2113', '3111', '1223', '2221', '0333', '1331', '3102', '2212', '3210', '1322', '2320', '2203', '3201', '1313', '2311', '2033', '3031', '2302', '3300', '3022', '2132', '3130', '3013', '2123', '3121', '1233', '2231', '3112', '2222', '3220', '1332', '2330', '3103', '2213', '3211', '1323', '2321', '3202', '2312', '3310', '3032', '2303', '3301', '3023', '2133', '3131', '3122', '2232', '3230', '3113', '2223', '3221', '1333', '2331', '3212', '2322', '3320', '3203', '2313', '3311', '3033', '3302', '3132', '3123', '2233', '3231', '3222', '2332', '3330', '3213', '2323', '3321', '3312', '3303', '3133', '3232', '3223', '2333', '3331', '3322', '3313', '3233', '3332', '3323', '3333']
Filtering from index 2 with window 10
Starting at index 2 with window 10
[0, 0, 1, 2]
not removed
[1, 0, 1, 0]
SCALING INDEX = 2
removed
[0, 1, 2, 0]
SCALING INDEX = 2
removed
[1, 0, 0, 1]
SCALING INDEX = 2
removed
[0, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 1, 0, 2]
SCALING INDEX = 2
removed
[0, 2, 1, 0]
SCALING INDEX = 2
removed
[1, 1, 0, 0]
SCALING INDEX = 2
removed
[0, 2, 0, 1]
SCALING INDEX = 2
removed
[0, 0, 3, 1]
SCALING INDEX = 2
removed
Going to 2 tenants
Going to 3 tenants
[0, 0, 1, 2]
SCALING INDEX = 2
removed
Starting at index 12 with window 10
[0, 0, 3, 1]
SCALING INDEX = 2
removed
[0, 0, 2, 2]
SCALING INDEX = 2
removed
[1, 0, 2, 0]
SCALING INDEX = 2
removed
[0, 1, 3, 0]
SCALING INDEX = 2
removed
[0, 0, 1, 3]
SCALING INDEX = 2
removed
[1, 0, 1, 1]
SCALING INDEX = 2
removed
[0, 1, 2, 1]
SCALING INDEX = 2
removed
[1, 0, 0, 2]
SCALING INDEX = 2
removed
[2, 0, 0, 0]
SCALING INDEX = 2
removed
[0, 1, 1, 2]
SCALING INDEX = 2
removed
Starting at index 22 with window 10
[1, 1, 1, 0]
SCALING INDEX = 2
removed
[0, 2, 2, 0]
SCALING INDEX = 2
removed
[0, 1, 0, 3]
SCALING INDEX = 2
removed
[1, 1, 0, 1]
SCALING INDEX = 2
removed
[0, 2, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 0, 2]
SCALING INDEX = 2
removed
[1, 2, 0, 0]
SCALING INDEX = 2
removed
[0, 3, 1, 0]
SCALING INDEX = 2
removed
[0, 0, 3, 2]
SCALING INDEX = 2
removed
[1, 0, 3, 0]
SCALING INDEX = 2
removed
Starting at index 32 with window 10
[0, 3, 0, 1]
SCALING INDEX = 2
removed
[0, 0, 2, 3]
SCALING INDEX = 2
removed
[1, 0, 2, 1]
SCALING INDEX = 2
removed
[0, 1, 3, 1]
SCALING INDEX = 2
removed
[1, 0, 1, 2]
SCALING INDEX = 2
removed
[2, 0, 1, 0]
SCALING INDEX = 2
removed
[0, 1, 2, 2]
SCALING INDEX = 2
removed
[1, 1, 2, 0]
SCALING INDEX = 2
removed
[0, 2, 3, 0]
SCALING INDEX = 2
removed
[1, 0, 0, 3]
SCALING INDEX = 2
removed
Starting at index 42 with window 10
[2, 0, 0, 1]
SCALING INDEX = 2
removed
[0, 1, 1, 3]
SCALING INDEX = 2
removed
[1, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 2, 1]
SCALING INDEX = 2
removed
[1, 1, 0, 2]
SCALING INDEX = 2
removed
[2, 1, 0, 0]
SCALING INDEX = 2
removed
[0, 2, 1, 2]
SCALING INDEX = 2
removed
[1, 2, 1, 0]
SCALING INDEX = 2
removed
[0, 3, 2, 0]
SCALING INDEX = 2
removed
[0, 2, 0, 3]
SCALING INDEX = 2
removed
Starting at index 52 with window 10
[1, 2, 0, 1]
SCALING INDEX = 2
removed
[0, 3, 1, 1]
SCALING INDEX = 2
removed
[0, 0, 3, 3]
SCALING INDEX = 2
removed
[1, 0, 3, 1]
SCALING INDEX = 2
removed
[0, 3, 0, 2]
SCALING INDEX = 2
removed
[1, 3, 0, 0]
SCALING INDEX = 2
removed
[1, 0, 2, 2]
SCALING INDEX = 2
removed
[2, 0, 2, 0]
SCALING INDEX = 2
removed
[0, 1, 3, 2]
SCALING INDEX = 2
removed
[1, 1, 3, 0]
SCALING INDEX = 2
removed
Starting at index 62 with window 10
[1, 0, 1, 3]
SCALING INDEX = 2
removed
[2, 0, 1, 1]
SCALING INDEX = 2
removed
[0, 1, 2, 3]
SCALING INDEX = 2
removed
[1, 1, 2, 1]
SCALING INDEX = 2
removed
[0, 2, 3, 1]
SCALING INDEX = 2
removed
[2, 0, 0, 2]
SCALING INDEX = 2
removed
[3, 0, 0, 0]
SCALING INDEX = 2
removed
[1, 1, 1, 2]
SCALING INDEX = 2
removed
[2, 1, 1, 0]
SCALING INDEX = 2
removed
[0, 2, 2, 2]
SCALING INDEX = 2
removed
Starting at index 72 with window 10
[1, 2, 2, 0]
SCALING INDEX = 2
removed
[0, 3, 3, 0]
SCALING INDEX = 2
removed
[1, 1, 0, 3]
SCALING INDEX = 2
removed
[2, 1, 0, 1]
SCALING INDEX = 2
removed
[0, 2, 1, 3]
SCALING INDEX = 2
removed
[1, 2, 1, 1]
SCALING INDEX = 2
removed
[0, 3, 2, 1]
SCALING INDEX = 2
removed
[1, 2, 0, 2]
SCALING INDEX = 2
removed
[2, 2, 0, 0]
SCALING INDEX = 2
removed
[0, 3, 1, 2]
SCALING INDEX = 2
removed
Starting at index 82 with window 10
[1, 3, 1, 0]
SCALING INDEX = 2
removed
[1, 0, 3, 2]
SCALING INDEX = 2
removed
[2, 0, 3, 0]
SCALING INDEX = 2
removed
[0, 3, 0, 3]
SCALING INDEX = 2
removed
[1, 3, 0, 1]
SCALING INDEX = 2
removed
[1, 0, 2, 3]
SCALING INDEX = 2
removed
[2, 0, 2, 1]
SCALING INDEX = 2
removed
[0, 1, 3, 3]
SCALING INDEX = 2
removed
[1, 1, 3, 1]
SCALING INDEX = 2
removed
[2, 0, 1, 2]
SCALING INDEX = 2
removed
Starting at index 92 with window 10
[3, 0, 1, 0]
SCALING INDEX = 2
removed
[1, 1, 2, 2]
SCALING INDEX = 2
removed
[2, 1, 2, 0]
SCALING INDEX = 2
removed
[0, 2, 3, 2]
SCALING INDEX = 2
removed
[1, 2, 3, 0]
SCALING INDEX = 2
removed
[2, 0, 0, 3]
SCALING INDEX = 2
removed
[3, 0, 0, 1]
SCALING INDEX = 2
removed
[1, 1, 1, 3]
SCALING INDEX = 2
removed
[2, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 2, 3]
SCALING INDEX = 2
removed
Starting at index 102 with window 10
[1, 2, 2, 1]
SCALING INDEX = 2
removed
[0, 3, 3, 1]
SCALING INDEX = 2
removed
[2, 1, 0, 2]
SCALING INDEX = 2
removed
[3, 1, 0, 0]
SCALING INDEX = 2
removed
[1, 2, 1, 2]
SCALING INDEX = 2
removed
[2, 2, 1, 0]
SCALING INDEX = 2
removed
[0, 3, 2, 2]
SCALING INDEX = 2
removed
[1, 3, 2, 0]
SCALING INDEX = 2
removed
[1, 2, 0, 3]
SCALING INDEX = 2
removed
[2, 2, 0, 1]
SCALING INDEX = 2
removed
Starting at index 112 with window 10
[0, 3, 1, 3]
SCALING INDEX = 2
removed
[1, 3, 1, 1]
SCALING INDEX = 2
removed
[1, 0, 3, 3]
SCALING INDEX = 2
removed
[2, 0, 3, 1]
SCALING INDEX = 2
removed
[1, 3, 0, 2]
SCALING INDEX = 2
removed
[2, 3, 0, 0]
SCALING INDEX = 2
removed
[2, 0, 2, 2]
SCALING INDEX = 2
removed
[3, 0, 2, 0]
SCALING INDEX = 2
removed
[1, 1, 3, 2]
SCALING INDEX = 2
removed
[2, 1, 3, 0]
SCALING INDEX = 2
removed
Starting at index 122 with window 10
[2, 0, 1, 3]
SCALING INDEX = 2
removed
[3, 0, 1, 1]
SCALING INDEX = 2
removed
[1, 1, 2, 3]
SCALING INDEX = 2
removed
[2, 1, 2, 1]
SCALING INDEX = 2
removed
[0, 2, 3, 3]
SCALING INDEX = 2
removed
[1, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 0, 0, 2]
SCALING INDEX = 2
removed
[2, 1, 1, 2]
SCALING INDEX = 2
removed
[3, 1, 1, 0]
SCALING INDEX = 2
removed
[1, 2, 2, 2]
SCALING INDEX = 2
removed
Starting at index 132 with window 10
[2, 2, 2, 0]
SCALING INDEX = 2
removed
[0, 3, 3, 2]
SCALING INDEX = 2
removed
[1, 3, 3, 0]
SCALING INDEX = 2
removed
[2, 1, 0, 3]
SCALING INDEX = 2
removed
[3, 1, 0, 1]
SCALING INDEX = 2
removed
[1, 2, 1, 3]
SCALING INDEX = 2
removed
[2, 2, 1, 1]
SCALING INDEX = 2
removed
[0, 3, 2, 3]
SCALING INDEX = 2
removed
[1, 3, 2, 1]
SCALING INDEX = 2
removed
[2, 2, 0, 2]
SCALING INDEX = 2
removed
Starting at index 142 with window 10
[3, 2, 0, 0]
SCALING INDEX = 2
removed
[1, 3, 1, 2]
SCALING INDEX = 2
removed
[2, 3, 1, 0]
SCALING INDEX = 2
removed
[2, 0, 3, 2]
SCALING INDEX = 2
removed
[3, 0, 3, 0]
SCALING INDEX = 2
removed
[1, 3, 0, 3]
SCALING INDEX = 2
removed
[2, 3, 0, 1]
SCALING INDEX = 2
removed
[2, 0, 2, 3]
SCALING INDEX = 2
removed
[3, 0, 2, 1]
SCALING INDEX = 2
removed
[1, 1, 3, 3]
SCALING INDEX = 2
removed
Starting at index 152 with window 10
[2, 1, 3, 1]
SCALING INDEX = 2
removed
[3, 0, 1, 2]
SCALING INDEX = 2
removed
[2, 1, 2, 2]
SCALING INDEX = 2
removed
[3, 1, 2, 0]
SCALING INDEX = 2
removed
[1, 2, 3, 2]
SCALING INDEX = 2
removed
[2, 2, 3, 0]
SCALING INDEX = 2
removed
[3, 0, 0, 3]
SCALING INDEX = 2
removed
[2, 1, 1, 3]
SCALING INDEX = 2
removed
[3, 1, 1, 1]
SCALING INDEX = 2
removed
[1, 2, 2, 3]
SCALING INDEX = 2
removed
Starting at index 162 with window 10
[2, 2, 2, 1]
SCALING INDEX = 2
removed
[0, 3, 3, 3]
SCALING INDEX = 2
removed
[1, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 0, 2]
SCALING INDEX = 2
removed
[2, 2, 1, 2]
SCALING INDEX = 2
removed
[3, 2, 1, 0]
SCALING INDEX = 2
removed
[1, 3, 2, 2]
SCALING INDEX = 2
removed
[2, 3, 2, 0]
SCALING INDEX = 2
removed
[2, 2, 0, 3]
SCALING INDEX = 2
removed
[3, 2, 0, 1]
SCALING INDEX = 2
removed
Starting at index 172 with window 10
[1, 3, 1, 3]
SCALING INDEX = 2
removed
[2, 3, 1, 1]
SCALING INDEX = 2
removed
[2, 0, 3, 3]
SCALING INDEX = 2
removed
[3, 0, 3, 1]
SCALING INDEX = 2
removed
[2, 3, 0, 2]
SCALING INDEX = 2
removed
[3, 3, 0, 0]
SCALING INDEX = 2
removed
[3, 0, 2, 2]
SCALING INDEX = 2
removed
[2, 1, 3, 2]
SCALING INDEX = 2
removed
[3, 1, 3, 0]
SCALING INDEX = 2
removed
[3, 0, 1, 3]
SCALING INDEX = 2
removed
Starting at index 182 with window 10
[2, 1, 2, 3]
SCALING INDEX = 2
removed
[3, 1, 2, 1]
SCALING INDEX = 2
removed
[1, 2, 3, 3]
SCALING INDEX = 2
removed
[2, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 1, 2]
SCALING INDEX = 2
removed
[2, 2, 2, 2]
SCALING INDEX = 2
removed
[3, 2, 2, 0]
SCALING INDEX = 2
removed
[1, 3, 3, 2]
SCALING INDEX = 2
removed
[2, 3, 3, 0]
SCALING INDEX = 2
removed
[3, 1, 0, 3]
SCALING INDEX = 2
removed
Starting at index 192 with window 10
[2, 2, 1, 3]
SCALING INDEX = 2
removed
[3, 2, 1, 1]
SCALING INDEX = 2
removed
[1, 3, 2, 3]
SCALING INDEX = 2
removed
[2, 3, 2, 1]
SCALING INDEX = 2
removed
[3, 2, 0, 2]
SCALING INDEX = 2
removed
[2, 3, 1, 2]
SCALING INDEX = 2
removed
[3, 3, 1, 0]
SCALING INDEX = 2
removed
[3, 0, 3, 2]
SCALING INDEX = 2
removed
[2, 3, 0, 3]
SCALING INDEX = 2
removed
[3, 3, 0, 1]
SCALING INDEX = 2
removed
Starting at index 202 with window 10
[3, 0, 2, 3]
SCALING INDEX = 2
removed
[2, 1, 3, 3]
SCALING INDEX = 2
removed
[3, 1, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 2, 2]
SCALING INDEX = 2
removed
[2, 2, 3, 2]
SCALING INDEX = 2
removed
[3, 2, 3, 0]
SCALING INDEX = 2
removed
[3, 1, 1, 3]
SCALING INDEX = 2
removed
[2, 2, 2, 3]
SCALING INDEX = 2
removed
[3, 2, 2, 1]
SCALING INDEX = 2
removed
[1, 3, 3, 3]
SCALING INDEX = 2
removed
Starting at index 212 with window 10
[2, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 2, 1, 2]
SCALING INDEX = 2
removed
[2, 3, 2, 2]
SCALING INDEX = 2
removed
[3, 3, 2, 0]
SCALING INDEX = 2
removed
[3, 2, 0, 3]
SCALING INDEX = 2
removed
[2, 3, 1, 3]
SCALING INDEX = 2
removed
[3, 3, 1, 1]
SCALING INDEX = 2
removed
[3, 0, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 0, 2]
SCALING INDEX = 2
removed
[3, 1, 3, 2]
SCALING INDEX = 2
removed
Starting at index 222 with window 10
[3, 1, 2, 3]
SCALING INDEX = 2
removed
[2, 2, 3, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 2, 2, 2]
SCALING INDEX = 2
removed
[2, 3, 3, 2]
SCALING INDEX = 2
removed
[3, 3, 3, 0]
SCALING INDEX = 2
removed
[3, 2, 1, 3]
SCALING INDEX = 2
removed
[2, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 1]
SCALING INDEX = 2
removed
[3, 3, 1, 2]
SCALING INDEX = 2
removed
Starting at index 232 with window 10
[3, 3, 0, 3]
SCALING INDEX = 2
removed
[3, 1, 3, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 2]
SCALING INDEX = 2
removed
[3, 2, 2, 3]
SCALING INDEX = 2
removed
[2, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 3, 2, 2]
SCALING INDEX = 2
removed
[3, 3, 1, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 2]
SCALING INDEX = 2
removed
Starting at index 242 with window 10
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
Starting at index 252 with window 10
No config exists that meets all filtering constraints
Recursive down scaling disabled
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
4
Passing over worker in previously failed scaling
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{}, [], [<src.sla.WorkerConf object at 0x7fabc4d57750>, <src.sla.WorkerConf object at 0x7fabc4d578d0>, <src.sla.WorkerConf object at 0x7fabc4d577d0>, <src.sla.WorkerConf object at 0x7fabc4d57f50>]], [{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc6082e10>, <src.sla.WorkerConf object at 0x7fabc74c39d0>, <src.sla.WorkerConf object at 0x7fabc74c3c50>, <src.sla.WorkerConf object at 0x7fabc4d6b850>]], [{}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc745f610>, <src.sla.WorkerConf object at 0x7fabc745f6d0>, <src.sla.WorkerConf object at 0x7fabc745f350>, <src.sla.WorkerConf object at 0x7fabc745f2d0>]]]
Conf 0:
120
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;1;2 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 2 with window 1
[0, 0, 1, 2]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '131', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;0;3:
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '1001', '0030', '0021', '1010', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}
Starting at: 6
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 0, 3]
Measured completion time is 120.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943, 8544343532]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
False
True
[[0, 0, 0, 3]]
[0, 0, 0, 3]
[[{}, [], [<src.sla.WorkerConf object at 0x7fabc4d295d0>, <src.sla.WorkerConf object at 0x7fabc4d29410>, <src.sla.WorkerConf object at 0x7fabc4d29550>, <src.sla.WorkerConf object at 0x7fabc4d29450>]], [{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fabc4dc9710>, <src.sla.WorkerConf object at 0x7fabc4dc97d0>, <src.sla.WorkerConf object at 0x7fabc4dc9e90>, <src.sla.WorkerConf object at 0x7fabc4dc9b90>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
NO COST EFFECTIVE RESULT
Previous scale down undone
Starting with0_0_0_3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
SCALE UP DIFF
difference between resource_cost optimal conf and predicted total cost -1
37
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 2, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{}, [], [<src.sla.WorkerConf object at 0x7fabc4d295d0>, <src.sla.WorkerConf object at 0x7fabc4d29410>, <src.sla.WorkerConf object at 0x7fabc4d29550>, <src.sla.WorkerConf object at 0x7fabc4d29450>]], [{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fabc4dc9710>, <src.sla.WorkerConf object at 0x7fabc4dc97d0>, <src.sla.WorkerConf object at 0x7fabc4dc9e90>, <src.sla.WorkerConf object at 0x7fabc4dc9b90>]]]
Conf 0:
120
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;0;3 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[]
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 6 with window 1
[0, 0, 0, 3]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '131', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;0;3:
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '1001', '0021', '0030', '1010', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}
Starting at: 6
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 0, 3]
Measured completion time is 116.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fabc4d4b210>, <src.sla.WorkerConf object at 0x7fabc4d4b190>, <src.sla.WorkerConf object at 0x7fabc4d4b110>, <src.sla.WorkerConf object at 0x7fabc4d4b310>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_0_3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fabc4d4b210>, <src.sla.WorkerConf object at 0x7fabc4d4b190>, <src.sla.WorkerConf object at 0x7fabc4d4b110>, <src.sla.WorkerConf object at 0x7fabc4d4b310>]]]
Conf 0:
116
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;0;3 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 6 with window 1
[0, 0, 0, 3]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '116', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '131', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;0;3:
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '1001', '0021', '0030', '1010', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}
Starting at: 6
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 0, 3]
Measured completion time is 120.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fabc606ff10>, <src.sla.WorkerConf object at 0x7fabc606f690>, <src.sla.WorkerConf object at 0x7fabc606f990>, <src.sla.WorkerConf object at 0x7fabc606f650>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_0_3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
SCALE DOWN DIFF
Rescaling worker 4
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
6
4
3
2
Moving filtered samples in sorted combinations after the window
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '1001', '0021', '0102', '0030', '1010', '0111', '0120', '1100', '0201', '0210', '0013', '0300', '0022', '1002', '0103', '0031', '1011', '0112', '1020', '2000', '0121', '1101', '0202', '0130', '1110', '0211', '0220', '1200', '0301', '0023', '1003', '0310', '0032', '1012', '0113', '1021', '2001', '0122', '1102', '0203', '1030', '2010', '0131', '1111', '0212', '1120', '2100', '0221', '1201', '0302', '0230', '1210', '0311', '0033', '1013', '0320', '1300', '1022', '2002', '0123', '1103', '1031', '2011', '0132', '1112', '0213', '2020', '3000', '1121', '2101', '0222', '1202', '0303', '1130', '2110', '0231', '1211', '0312', '1220', '2200', '0321', '1301', '1023', '2003', '0330', '1310', '1032', '2012', '0133', '1113', '2021', '3001', '1122', '2102', '0223', '1203', '2030', '3010', '1131', '2111', '0232', '1212', '0313', '2120', '3100', '1221', '2201', '0322', '1302', '1230', '2210', '0331', '1311', '1033', '2013', '1320', '2300', '2022', '3002', '1123', '2103', '2031', '3011', '1132', '2112', '0233', '1213', '3020', '2121', '3101', '1222', '2202', '0323', '1303', '2130', '3110', '1231', '2211', '0332', '1312', '2220', '3200', '1321', '2301', '2023', '3003', '1330', '2310', '2032', '3012', '1133', '2113', '3021', '2122', '3102', '1223', '2203', '3030', '2131', '3111', '1232', '2212', '0333', '1313', '3120', '2221', '3201', '1322', '2302', '2230', '3210', '1331', '2311', '2033', '3013', '2320', '3300', '3022', '2123', '3103', '3031', '2132', '3112', '1233', '2213', '3121', '2222', '3202', '1323', '2303', '3130', '2231', '3211', '1332', '2312', '3220', '2321', '3301', '3023', '2330', '3310', '3032', '2133', '3113', '3122', '2223', '3203', '3131', '2232', '3212', '1333', '2313', '3221', '2322', '3302', '3230', '2331', '3311', '3033', '3320', '3123', '3132', '2233', '3213', '3222', '2323', '3303', '3231', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 6 with window 10
Starting at index 6 with window 10
Going to 2 tenants
[0, 0, 0, 3]
SCALING INDEX = 3
removed
[0, 0, 1, 2]
SCALING INDEX = 3
removed
[1, 0, 0, 1]
SCALING INDEX = 3
removed
[0, 0, 2, 1]
SCALING INDEX = 3
removed
[0, 1, 0, 2]
SCALING INDEX = 3
removed
[0, 0, 3, 0]
SCALING INDEX = 3
removed
[1, 0, 1, 0]
SCALING INDEX = 3
removed
[0, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 2, 0]
SCALING INDEX = 3
removed
[1, 1, 0, 0]
SCALING INDEX = 3
removed
Starting at index 16 with window 10
Going to 2 tenants
[0, 2, 0, 1]
SCALING INDEX = 3
removed
[0, 2, 1, 0]
SCALING INDEX = 3
removed
[0, 0, 1, 3]
SCALING INDEX = 3
removed
[0, 3, 0, 0]
SCALING INDEX = 3
removed
[0, 0, 2, 2]
SCALING INDEX = 3
removed
[1, 0, 0, 2]
SCALING INDEX = 3
removed
[0, 1, 0, 3]
SCALING INDEX = 3
removed
[0, 0, 3, 1]
SCALING INDEX = 3
removed
[1, 0, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 1, 2]
SCALING INDEX = 3
removed
Starting at index 26 with window 10
Going to 2 tenants
[1, 0, 2, 0]
SCALING INDEX = 3
removed
[2, 0, 0, 0]
SCALING INDEX = 3
removed
[0, 1, 2, 1]
SCALING INDEX = 3
removed
[1, 1, 0, 1]
SCALING INDEX = 3
removed
[0, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 1, 3, 0]
SCALING INDEX = 3
removed
[1, 1, 1, 0]
SCALING INDEX = 3
removed
[0, 2, 1, 1]
SCALING INDEX = 3
removed
[0, 2, 2, 0]
SCALING INDEX = 3
removed
[1, 2, 0, 0]
SCALING INDEX = 3
removed
Starting at index 36 with window 10
Going to 2 tenants
[0, 3, 0, 1]
SCALING INDEX = 3
removed
[0, 0, 2, 3]
SCALING INDEX = 3
removed
[1, 0, 0, 3]
SCALING INDEX = 3
removed
[0, 3, 1, 0]
SCALING INDEX = 3
removed
[0, 0, 3, 2]
SCALING INDEX = 3
removed
[1, 0, 1, 2]
SCALING INDEX = 3
removed
[0, 1, 1, 3]
SCALING INDEX = 3
removed
[1, 0, 2, 1]
SCALING INDEX = 3
removed
[2, 0, 0, 1]
SCALING INDEX = 3
removed
[0, 1, 2, 2]
SCALING INDEX = 3
removed
Starting at index 46 with window 10
Going to 2 tenants
[1, 1, 0, 2]
SCALING INDEX = 3
removed
[0, 2, 0, 3]
SCALING INDEX = 3
removed
[1, 0, 3, 0]
SCALING INDEX = 3
removed
[2, 0, 1, 0]
SCALING INDEX = 3
removed
[0, 1, 3, 1]
SCALING INDEX = 3
removed
[1, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 2, 1, 2]
SCALING INDEX = 3
removed
[1, 1, 2, 0]
SCALING INDEX = 3
removed
[2, 1, 0, 0]
SCALING INDEX = 3
removed
[0, 2, 2, 1]
SCALING INDEX = 3
removed
Starting at index 56 with window 10
Going to 2 tenants
[1, 2, 0, 1]
SCALING INDEX = 3
removed
[0, 3, 0, 2]
SCALING INDEX = 3
removed
[0, 2, 3, 0]
SCALING INDEX = 3
removed
[1, 2, 1, 0]
SCALING INDEX = 3
removed
[0, 3, 1, 1]
SCALING INDEX = 3
removed
[0, 0, 3, 3]
SCALING INDEX = 3
removed
[1, 0, 1, 3]
SCALING INDEX = 3
removed
[0, 3, 2, 0]
SCALING INDEX = 3
removed
[1, 3, 0, 0]
SCALING INDEX = 3
removed
[1, 0, 2, 2]
SCALING INDEX = 3
removed
Starting at index 66 with window 10
Going to 2 tenants
[2, 0, 0, 2]
SCALING INDEX = 3
removed
[0, 1, 2, 3]
SCALING INDEX = 3
removed
[1, 1, 0, 3]
SCALING INDEX = 3
removed
[1, 0, 3, 1]
SCALING INDEX = 3
removed
[2, 0, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 3, 2]
SCALING INDEX = 3
removed
[1, 1, 1, 2]
SCALING INDEX = 3
removed
[0, 2, 1, 3]
SCALING INDEX = 3
removed
[2, 0, 2, 0]
SCALING INDEX = 3
removed
[3, 0, 0, 0]
SCALING INDEX = 3
removed
Starting at index 76 with window 10
Going to 2 tenants
[1, 1, 2, 1]
SCALING INDEX = 3
removed
[2, 1, 0, 1]
SCALING INDEX = 3
removed
[0, 2, 2, 2]
SCALING INDEX = 3
removed
[1, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 3, 0, 3]
SCALING INDEX = 3
removed
[1, 1, 3, 0]
SCALING INDEX = 3
removed
[2, 1, 1, 0]
SCALING INDEX = 3
removed
[0, 2, 3, 1]
SCALING INDEX = 3
removed
[1, 2, 1, 1]
SCALING INDEX = 3
removed
[0, 3, 1, 2]
SCALING INDEX = 3
removed
Starting at index 86 with window 10
Going to 2 tenants
[1, 2, 2, 0]
SCALING INDEX = 3
removed
[2, 2, 0, 0]
SCALING INDEX = 3
removed
[0, 3, 2, 1]
SCALING INDEX = 3
removed
[1, 3, 0, 1]
SCALING INDEX = 3
removed
[1, 0, 2, 3]
SCALING INDEX = 3
removed
[2, 0, 0, 3]
SCALING INDEX = 3
removed
[0, 3, 3, 0]
SCALING INDEX = 3
removed
[1, 3, 1, 0]
SCALING INDEX = 3
removed
[1, 0, 3, 2]
SCALING INDEX = 3
removed
[2, 0, 1, 2]
SCALING INDEX = 3
removed
Starting at index 96 with window 10
Going to 2 tenants
[0, 1, 3, 3]
SCALING INDEX = 3
removed
[1, 1, 1, 3]
SCALING INDEX = 3
removed
[2, 0, 2, 1]
SCALING INDEX = 3
removed
[3, 0, 0, 1]
SCALING INDEX = 3
removed
[1, 1, 2, 2]
SCALING INDEX = 3
removed
[2, 1, 0, 2]
SCALING INDEX = 3
removed
[0, 2, 2, 3]
SCALING INDEX = 3
removed
[1, 2, 0, 3]
SCALING INDEX = 3
removed
[2, 0, 3, 0]
SCALING INDEX = 3
removed
[3, 0, 1, 0]
SCALING INDEX = 3
removed
Starting at index 106 with window 10
Going to 2 tenants
[1, 1, 3, 1]
SCALING INDEX = 3
removed
[2, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 2, 3, 2]
SCALING INDEX = 3
removed
[1, 2, 1, 2]
SCALING INDEX = 3
removed
[0, 3, 1, 3]
SCALING INDEX = 3
removed
[2, 1, 2, 0]
SCALING INDEX = 3
removed
[3, 1, 0, 0]
SCALING INDEX = 3
removed
[1, 2, 2, 1]
SCALING INDEX = 3
removed
[2, 2, 0, 1]
SCALING INDEX = 3
removed
[0, 3, 2, 2]
SCALING INDEX = 3
removed
Starting at index 116 with window 10
Going to 2 tenants
[1, 3, 0, 2]
SCALING INDEX = 3
removed
[1, 2, 3, 0]
SCALING INDEX = 3
removed
[2, 2, 1, 0]
SCALING INDEX = 3
removed
[0, 3, 3, 1]
SCALING INDEX = 3
removed
[1, 3, 1, 1]
SCALING INDEX = 3
removed
[1, 0, 3, 3]
SCALING INDEX = 3
removed
[2, 0, 1, 3]
SCALING INDEX = 3
removed
[1, 3, 2, 0]
SCALING INDEX = 3
removed
[2, 3, 0, 0]
SCALING INDEX = 3
removed
[2, 0, 2, 2]
SCALING INDEX = 3
removed
Starting at index 126 with window 10
Going to 2 tenants
[3, 0, 0, 2]
SCALING INDEX = 3
removed
[1, 1, 2, 3]
SCALING INDEX = 3
removed
[2, 1, 0, 3]
SCALING INDEX = 3
removed
[2, 0, 3, 1]
SCALING INDEX = 3
removed
[3, 0, 1, 1]
SCALING INDEX = 3
removed
[1, 1, 3, 2]
SCALING INDEX = 3
removed
[2, 1, 1, 2]
SCALING INDEX = 3
removed
[0, 2, 3, 3]
SCALING INDEX = 3
removed
[1, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 0, 2, 0]
SCALING INDEX = 3
removed
Starting at index 136 with window 10
Going to 2 tenants
[2, 1, 2, 1]
SCALING INDEX = 3
removed
[3, 1, 0, 1]
SCALING INDEX = 3
removed
[1, 2, 2, 2]
SCALING INDEX = 3
removed
[2, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 3, 2, 3]
SCALING INDEX = 3
removed
[1, 3, 0, 3]
SCALING INDEX = 3
removed
[2, 1, 3, 0]
SCALING INDEX = 3
removed
[3, 1, 1, 0]
SCALING INDEX = 3
removed
[1, 2, 3, 1]
SCALING INDEX = 3
removed
[2, 2, 1, 1]
SCALING INDEX = 3
removed
Starting at index 146 with window 10
Going to 2 tenants
[0, 3, 3, 2]
SCALING INDEX = 3
removed
[1, 3, 1, 2]
SCALING INDEX = 3
removed
[2, 2, 2, 0]
SCALING INDEX = 3
removed
[3, 2, 0, 0]
SCALING INDEX = 3
removed
[1, 3, 2, 1]
SCALING INDEX = 3
removed
[2, 3, 0, 1]
SCALING INDEX = 3
removed
[2, 0, 2, 3]
SCALING INDEX = 3
removed
[3, 0, 0, 3]
SCALING INDEX = 3
removed
[1, 3, 3, 0]
SCALING INDEX = 3
removed
[2, 3, 1, 0]
SCALING INDEX = 3
removed
Starting at index 156 with window 10
Going to 2 tenants
[2, 0, 3, 2]
SCALING INDEX = 3
removed
[3, 0, 1, 2]
SCALING INDEX = 3
removed
[1, 1, 3, 3]
SCALING INDEX = 3
removed
[2, 1, 1, 3]
SCALING INDEX = 3
removed
[3, 0, 2, 1]
SCALING INDEX = 3
removed
[2, 1, 2, 2]
SCALING INDEX = 3
removed
[3, 1, 0, 2]
SCALING INDEX = 3
removed
[1, 2, 2, 3]
SCALING INDEX = 3
removed
[2, 2, 0, 3]
SCALING INDEX = 3
removed
[3, 0, 3, 0]
SCALING INDEX = 3
removed
Starting at index 166 with window 10
Going to 2 tenants
[2, 1, 3, 1]
SCALING INDEX = 3
removed
[3, 1, 1, 1]
SCALING INDEX = 3
removed
[1, 2, 3, 2]
SCALING INDEX = 3
removed
[2, 2, 1, 2]
SCALING INDEX = 3
removed
[0, 3, 3, 3]
SCALING INDEX = 3
removed
[1, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 0]
SCALING INDEX = 3
removed
[2, 2, 2, 1]
SCALING INDEX = 3
removed
[3, 2, 0, 1]
SCALING INDEX = 3
removed
[1, 3, 2, 2]
SCALING INDEX = 3
removed
Starting at index 176 with window 10
Going to 2 tenants
[2, 3, 0, 2]
SCALING INDEX = 3
removed
[2, 2, 3, 0]
SCALING INDEX = 3
removed
[3, 2, 1, 0]
SCALING INDEX = 3
removed
[1, 3, 3, 1]
SCALING INDEX = 3
removed
[2, 3, 1, 1]
SCALING INDEX = 3
removed
[2, 0, 3, 3]
SCALING INDEX = 3
removed
[3, 0, 1, 3]
SCALING INDEX = 3
removed
[2, 3, 2, 0]
SCALING INDEX = 3
removed
[3, 3, 0, 0]
SCALING INDEX = 3
removed
[3, 0, 2, 2]
SCALING INDEX = 3
removed
Starting at index 186 with window 10
Going to 2 tenants
[2, 1, 2, 3]
SCALING INDEX = 3
removed
[3, 1, 0, 3]
SCALING INDEX = 3
removed
[3, 0, 3, 1]
SCALING INDEX = 3
removed
[2, 1, 3, 2]
SCALING INDEX = 3
removed
[3, 1, 1, 2]
SCALING INDEX = 3
removed
[1, 2, 3, 3]
SCALING INDEX = 3
removed
[2, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 1]
SCALING INDEX = 3
removed
[2, 2, 2, 2]
SCALING INDEX = 3
removed
[3, 2, 0, 2]
SCALING INDEX = 3
removed
Starting at index 196 with window 10
Going to 2 tenants
[1, 3, 2, 3]
SCALING INDEX = 3
removed
[2, 3, 0, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 0]
SCALING INDEX = 3
removed
[2, 2, 3, 1]
SCALING INDEX = 3
removed
[3, 2, 1, 1]
SCALING INDEX = 3
removed
[1, 3, 3, 2]
SCALING INDEX = 3
removed
[2, 3, 1, 2]
SCALING INDEX = 3
removed
[3, 2, 2, 0]
SCALING INDEX = 3
removed
[2, 3, 2, 1]
SCALING INDEX = 3
removed
[3, 3, 0, 1]
SCALING INDEX = 3
removed
Starting at index 206 with window 10
Going to 2 tenants
[3, 0, 2, 3]
SCALING INDEX = 3
removed
[2, 3, 3, 0]
SCALING INDEX = 3
removed
[3, 3, 1, 0]
SCALING INDEX = 3
removed
[3, 0, 3, 2]
SCALING INDEX = 3
removed
[2, 1, 3, 3]
SCALING INDEX = 3
removed
[3, 1, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 2]
SCALING INDEX = 3
removed
[2, 2, 2, 3]
SCALING INDEX = 3
removed
[3, 2, 0, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 1]
SCALING INDEX = 3
removed
Starting at index 216 with window 10
Going to 2 tenants
[2, 2, 3, 2]
SCALING INDEX = 3
removed
[3, 2, 1, 2]
SCALING INDEX = 3
removed
[1, 3, 3, 3]
SCALING INDEX = 3
removed
[2, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 1]
SCALING INDEX = 3
removed
[2, 3, 2, 2]
SCALING INDEX = 3
removed
[3, 3, 0, 2]
SCALING INDEX = 3
removed
[3, 2, 3, 0]
SCALING INDEX = 3
removed
[2, 3, 3, 1]
SCALING INDEX = 3
removed
[3, 3, 1, 1]
SCALING INDEX = 3
removed
Starting at index 226 with window 10
Going to 2 tenants
[3, 0, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 0]
SCALING INDEX = 3
removed
[3, 1, 2, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 2]
SCALING INDEX = 3
removed
[2, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 2]
SCALING INDEX = 3
removed
[2, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 0, 3]
SCALING INDEX = 3
removed
[3, 2, 3, 1]
SCALING INDEX = 3
removed
Starting at index 236 with window 10
Going to 2 tenants
[2, 3, 3, 2]
SCALING INDEX = 3
removed
[3, 3, 1, 2]
SCALING INDEX = 3
removed
[3, 3, 2, 1]
SCALING INDEX = 3
removed
[3, 3, 3, 0]
SCALING INDEX = 3
removed
[3, 1, 3, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 3]
SCALING INDEX = 3
removed
[3, 2, 3, 2]
SCALING INDEX = 3
removed
[2, 3, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 2]
SCALING INDEX = 3
removed
Starting at index 246 with window 10
Going to 2 tenants
[3, 3, 3, 1]
SCALING INDEX = 3
removed
[3, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 3, 2]
SCALING INDEX = 3
removed
[3, 3, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 3, 1]
SCALING INDEX = 3
removed
[3, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 3, 2]
SCALING INDEX = 3
removed
[3, 3, 3, 3]
SCALING INDEX = 3
removed
Starting at index 256 with window 10
Going to 2 tenants
No config exists that meets all filtering constraints
Recursive down scaling disabled
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
Passing over worker in previously failed scaling
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fabc606ff10>, <src.sla.WorkerConf object at 0x7fabc606f690>, <src.sla.WorkerConf object at 0x7fabc606f990>, <src.sla.WorkerConf object at 0x7fabc606f650>]], [{}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fabc4ceae50>, <src.sla.WorkerConf object at 0x7fabc4cea0d0>, <src.sla.WorkerConf object at 0x7fabc4cea750>, <src.sla.WorkerConf object at 0x7fabc4cea3d0>]]]
Conf 0:
120
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;0;3 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 6 with window 1
[0, 0, 0, 3]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  2 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '131', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  2 tenants and 0;0;1;2:
Returning adaptive scaler for  2 tenants and 0;0;1;2:
1
255
['0030', '0021', '0012', '1010', '1001', '0120', '0111', '0102', '1100', '0210', '0201', '0300', '0031', '0022', '1020', '0013', '1011', '1002', '2000', '0130', '0121', '0112', '1110', '0103', '1101', '0220', '0211', '0202', '1200', '0310', '0301', '0032', '1030', '0023', '1021', '1012', '2010', '1003', '2001', '0131', '0122', '1120', '0113', '1111', '1102', '2100', '0230', '0221', '0212', '1210', '0203', '1201', '0320', '0311', '0302', '1300', '0033', '1031', '1022', '2020', '1013', '2011', '2002', '3000', '0132', '1130', '0123', '1121', '1112', '2110', '1103', '2101', '0231', '0222', '1220', '0213', '1211', '1202', '2200', '0330', '0321', '0312', '1310', '0303', '1301', '1032', '2030', '1023', '2021', '2012', '3010', '2003', '3001', '0133', '1131', '1122', '2120', '1113', '2111', '2102', '3100', '0232', '1230', '0223', '1221', '1212', '2210', '1203', '2201', '0331', '0322', '1320', '0313', '1311', '1302', '2300', '1033', '2031', '2022', '3020', '2013', '3011', '3002', '1132', '2130', '1123', '2121', '2112', '3110', '2103', '3101', '0233', '1231', '1222', '2220', '1213', '2211', '2202', '3200', '0332', '1330', '0323', '1321', '1312', '2310', '1303', '2301', '2032', '3030', '2023', '3021', '3012', '3003', '1133', '2131', '2122', '3120', '2113', '3111', '3102', '1232', '2230', '1223', '2221', '2212', '3210', '2203', '3201', '0333', '1331', '1322', '2320', '1313', '2311', '2302', '3300', '2033', '3031', '3022', '3013', '2132', '3130', '2123', '3121', '3112', '3103', '1233', '2231', '2222', '3220', '2213', '3211', '3202', '1332', '2330', '1323', '2321', '2312', '3310', '2303', '3301', '3032', '3023', '2133', '3131', '3122', '3113', '2232', '3230', '2223', '3221', '3212', '3203', '1333', '2331', '2322', '3320', '2313', '3311', '3302', '3033', '3132', '3123', '2233', '3231', '3222', '3213', '2332', '3330', '2323', '3321', '3312', '3303', '3133', '3232', '3223', '2333', '3331', '3322', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}
Starting at: 2
Tenant_nb: 2, maxTenants: 2
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 127.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4d66b90>, <src.sla.WorkerConf object at 0x7fabc4d66350>, <src.sla.WorkerConf object at 0x7fabc4d665d0>, <src.sla.WorkerConf object at 0x7fabc4d66cd0>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_2
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
4
SCALE DOWN DIFF
Rescaling worker 3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 2, 'memory': 2}
{'cpu': 3, 'memory': 2}
6
4
2
3
Moving filtered samples in sorted combinations after the window
['0030', '0021', '0012', '1010', '0120', '1001', '0111', '0102', '1100', '0210', '0201', '0031', '0300', '0022', '1020', '0130', '0013', '1011', '0121', '1002', '2000', '0112', '1110', '0220', '0103', '1101', '0211', '0202', '1200', '0310', '0032', '1030', '0301', '0023', '1021', '0131', '1012', '2010', '0122', '1120', '0230', '1003', '2001', '0113', '1111', '0221', '1102', '2100', '0212', '1210', '0320', '0203', '1201', '0311', '0033', '1031', '0302', '1300', '1022', '2020', '0132', '1130', '1013', '2011', '0123', '1121', '0231', '2002', '3000', '1112', '2110', '0222', '1220', '0330', '1103', '2101', '0213', '1211', '0321', '1202', '2200', '0312', '1310', '1032', '2030', '0303', '1301', '1023', '2021', '0133', '1131', '2012', '3010', '1122', '2120', '0232', '1230', '2003', '3001', '1113', '2111', '0223', '1221', '0331', '2102', '3100', '1212', '2210', '0322', '1320', '1203', '2201', '0313', '1311', '1033', '2031', '1302', '2300', '2022', '3020', '1132', '2130', '2013', '3011', '1123', '2121', '0233', '1231', '3002', '2112', '3110', '1222', '2220', '0332', '1330', '2103', '3101', '1213', '2211', '0323', '1321', '2202', '3200', '1312', '2310', '2032', '3030', '1303', '2301', '2023', '3021', '1133', '2131', '3012', '2122', '3120', '1232', '2230', '3003', '2113', '3111', '1223', '2221', '0333', '1331', '3102', '2212', '3210', '1322', '2320', '2203', '3201', '1313', '2311', '2033', '3031', '2302', '3300', '3022', '2132', '3130', '3013', '2123', '3121', '1233', '2231', '3112', '2222', '3220', '1332', '2330', '3103', '2213', '3211', '1323', '2321', '3202', '2312', '3310', '3032', '2303', '3301', '3023', '2133', '3131', '3122', '2232', '3230', '3113', '2223', '3221', '1333', '2331', '3212', '2322', '3320', '3203', '2313', '3311', '3033', '3302', '3132', '3123', '2233', '3231', '3222', '2332', '3330', '3213', '2323', '3321', '3312', '3303', '3133', '3232', '3223', '2333', '3331', '3322', '3313', '3233', '3332', '3323', '3333']
Filtering from index 2 with window 10
Starting at index 2 with window 10
[0, 0, 1, 2]
not removed
[1, 0, 1, 0]
SCALING INDEX = 2
removed
[0, 1, 2, 0]
SCALING INDEX = 2
removed
[1, 0, 0, 1]
SCALING INDEX = 2
removed
[0, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 1, 0, 2]
SCALING INDEX = 2
removed
[1, 1, 0, 0]
SCALING INDEX = 2
removed
[0, 2, 1, 0]
SCALING INDEX = 2
removed
[0, 2, 0, 1]
SCALING INDEX = 2
removed
[0, 0, 3, 1]
SCALING INDEX = 2
removed
Going to 2 tenants
Going to 3 tenants
[0, 0, 1, 2]
SCALING INDEX = 2
removed
Starting at index 12 with window 10
[0, 0, 3, 1]
SCALING INDEX = 2
removed
[0, 0, 2, 2]
SCALING INDEX = 2
removed
[1, 0, 2, 0]
SCALING INDEX = 2
removed
[0, 1, 3, 0]
SCALING INDEX = 2
removed
[0, 0, 1, 3]
SCALING INDEX = 2
removed
[1, 0, 1, 1]
SCALING INDEX = 2
removed
[0, 1, 2, 1]
SCALING INDEX = 2
removed
[1, 0, 0, 2]
SCALING INDEX = 2
removed
[2, 0, 0, 0]
SCALING INDEX = 2
removed
[0, 1, 1, 2]
SCALING INDEX = 2
removed
Starting at index 22 with window 10
[1, 1, 1, 0]
SCALING INDEX = 2
removed
[0, 2, 2, 0]
SCALING INDEX = 2
removed
[0, 1, 0, 3]
SCALING INDEX = 2
removed
[1, 1, 0, 1]
SCALING INDEX = 2
removed
[0, 2, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 0, 2]
SCALING INDEX = 2
removed
[1, 2, 0, 0]
SCALING INDEX = 2
removed
[0, 3, 1, 0]
SCALING INDEX = 2
removed
[0, 0, 3, 2]
SCALING INDEX = 2
removed
[1, 0, 3, 0]
SCALING INDEX = 2
removed
Starting at index 32 with window 10
[0, 3, 0, 1]
SCALING INDEX = 2
removed
[0, 0, 2, 3]
SCALING INDEX = 2
removed
[1, 0, 2, 1]
SCALING INDEX = 2
removed
[0, 1, 3, 1]
SCALING INDEX = 2
removed
[1, 0, 1, 2]
SCALING INDEX = 2
removed
[2, 0, 1, 0]
SCALING INDEX = 2
removed
[0, 1, 2, 2]
SCALING INDEX = 2
removed
[1, 1, 2, 0]
SCALING INDEX = 2
removed
[0, 2, 3, 0]
SCALING INDEX = 2
removed
[1, 0, 0, 3]
SCALING INDEX = 2
removed
Starting at index 42 with window 10
[2, 0, 0, 1]
SCALING INDEX = 2
removed
[0, 1, 1, 3]
SCALING INDEX = 2
removed
[1, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 2, 1]
SCALING INDEX = 2
removed
[1, 1, 0, 2]
SCALING INDEX = 2
removed
[2, 1, 0, 0]
SCALING INDEX = 2
removed
[0, 2, 1, 2]
SCALING INDEX = 2
removed
[1, 2, 1, 0]
SCALING INDEX = 2
removed
[0, 3, 2, 0]
SCALING INDEX = 2
removed
[0, 2, 0, 3]
SCALING INDEX = 2
removed
Starting at index 52 with window 10
[1, 2, 0, 1]
SCALING INDEX = 2
removed
[0, 3, 1, 1]
SCALING INDEX = 2
removed
[0, 0, 3, 3]
SCALING INDEX = 2
removed
[1, 0, 3, 1]
SCALING INDEX = 2
removed
[0, 3, 0, 2]
SCALING INDEX = 2
removed
[1, 3, 0, 0]
SCALING INDEX = 2
removed
[1, 0, 2, 2]
SCALING INDEX = 2
removed
[2, 0, 2, 0]
SCALING INDEX = 2
removed
[0, 1, 3, 2]
SCALING INDEX = 2
removed
[1, 1, 3, 0]
SCALING INDEX = 2
removed
Starting at index 62 with window 10
[1, 0, 1, 3]
SCALING INDEX = 2
removed
[2, 0, 1, 1]
SCALING INDEX = 2
removed
[0, 1, 2, 3]
SCALING INDEX = 2
removed
[1, 1, 2, 1]
SCALING INDEX = 2
removed
[0, 2, 3, 1]
SCALING INDEX = 2
removed
[2, 0, 0, 2]
SCALING INDEX = 2
removed
[3, 0, 0, 0]
SCALING INDEX = 2
removed
[1, 1, 1, 2]
SCALING INDEX = 2
removed
[2, 1, 1, 0]
SCALING INDEX = 2
removed
[0, 2, 2, 2]
SCALING INDEX = 2
removed
Starting at index 72 with window 10
[1, 2, 2, 0]
SCALING INDEX = 2
removed
[0, 3, 3, 0]
SCALING INDEX = 2
removed
[1, 1, 0, 3]
SCALING INDEX = 2
removed
[2, 1, 0, 1]
SCALING INDEX = 2
removed
[0, 2, 1, 3]
SCALING INDEX = 2
removed
[1, 2, 1, 1]
SCALING INDEX = 2
removed
[0, 3, 2, 1]
SCALING INDEX = 2
removed
[1, 2, 0, 2]
SCALING INDEX = 2
removed
[2, 2, 0, 0]
SCALING INDEX = 2
removed
[0, 3, 1, 2]
SCALING INDEX = 2
removed
Starting at index 82 with window 10
[1, 3, 1, 0]
SCALING INDEX = 2
removed
[1, 0, 3, 2]
SCALING INDEX = 2
removed
[2, 0, 3, 0]
SCALING INDEX = 2
removed
[0, 3, 0, 3]
SCALING INDEX = 2
removed
[1, 3, 0, 1]
SCALING INDEX = 2
removed
[1, 0, 2, 3]
SCALING INDEX = 2
removed
[2, 0, 2, 1]
SCALING INDEX = 2
removed
[0, 1, 3, 3]
SCALING INDEX = 2
removed
[1, 1, 3, 1]
SCALING INDEX = 2
removed
[2, 0, 1, 2]
SCALING INDEX = 2
removed
Starting at index 92 with window 10
[3, 0, 1, 0]
SCALING INDEX = 2
removed
[1, 1, 2, 2]
SCALING INDEX = 2
removed
[2, 1, 2, 0]
SCALING INDEX = 2
removed
[0, 2, 3, 2]
SCALING INDEX = 2
removed
[1, 2, 3, 0]
SCALING INDEX = 2
removed
[2, 0, 0, 3]
SCALING INDEX = 2
removed
[3, 0, 0, 1]
SCALING INDEX = 2
removed
[1, 1, 1, 3]
SCALING INDEX = 2
removed
[2, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 2, 3]
SCALING INDEX = 2
removed
Starting at index 102 with window 10
[1, 2, 2, 1]
SCALING INDEX = 2
removed
[0, 3, 3, 1]
SCALING INDEX = 2
removed
[2, 1, 0, 2]
SCALING INDEX = 2
removed
[3, 1, 0, 0]
SCALING INDEX = 2
removed
[1, 2, 1, 2]
SCALING INDEX = 2
removed
[2, 2, 1, 0]
SCALING INDEX = 2
removed
[0, 3, 2, 2]
SCALING INDEX = 2
removed
[1, 3, 2, 0]
SCALING INDEX = 2
removed
[1, 2, 0, 3]
SCALING INDEX = 2
removed
[2, 2, 0, 1]
SCALING INDEX = 2
removed
Starting at index 112 with window 10
[0, 3, 1, 3]
SCALING INDEX = 2
removed
[1, 3, 1, 1]
SCALING INDEX = 2
removed
[1, 0, 3, 3]
SCALING INDEX = 2
removed
[2, 0, 3, 1]
SCALING INDEX = 2
removed
[1, 3, 0, 2]
SCALING INDEX = 2
removed
[2, 3, 0, 0]
SCALING INDEX = 2
removed
[2, 0, 2, 2]
SCALING INDEX = 2
removed
[3, 0, 2, 0]
SCALING INDEX = 2
removed
[1, 1, 3, 2]
SCALING INDEX = 2
removed
[2, 1, 3, 0]
SCALING INDEX = 2
removed
Starting at index 122 with window 10
[2, 0, 1, 3]
SCALING INDEX = 2
removed
[3, 0, 1, 1]
SCALING INDEX = 2
removed
[1, 1, 2, 3]
SCALING INDEX = 2
removed
[2, 1, 2, 1]
SCALING INDEX = 2
removed
[0, 2, 3, 3]
SCALING INDEX = 2
removed
[1, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 0, 0, 2]
SCALING INDEX = 2
removed
[2, 1, 1, 2]
SCALING INDEX = 2
removed
[3, 1, 1, 0]
SCALING INDEX = 2
removed
[1, 2, 2, 2]
SCALING INDEX = 2
removed
Starting at index 132 with window 10
[2, 2, 2, 0]
SCALING INDEX = 2
removed
[0, 3, 3, 2]
SCALING INDEX = 2
removed
[1, 3, 3, 0]
SCALING INDEX = 2
removed
[2, 1, 0, 3]
SCALING INDEX = 2
removed
[3, 1, 0, 1]
SCALING INDEX = 2
removed
[1, 2, 1, 3]
SCALING INDEX = 2
removed
[2, 2, 1, 1]
SCALING INDEX = 2
removed
[0, 3, 2, 3]
SCALING INDEX = 2
removed
[1, 3, 2, 1]
SCALING INDEX = 2
removed
[2, 2, 0, 2]
SCALING INDEX = 2
removed
Starting at index 142 with window 10
[3, 2, 0, 0]
SCALING INDEX = 2
removed
[1, 3, 1, 2]
SCALING INDEX = 2
removed
[2, 3, 1, 0]
SCALING INDEX = 2
removed
[2, 0, 3, 2]
SCALING INDEX = 2
removed
[3, 0, 3, 0]
SCALING INDEX = 2
removed
[1, 3, 0, 3]
SCALING INDEX = 2
removed
[2, 3, 0, 1]
SCALING INDEX = 2
removed
[2, 0, 2, 3]
SCALING INDEX = 2
removed
[3, 0, 2, 1]
SCALING INDEX = 2
removed
[1, 1, 3, 3]
SCALING INDEX = 2
removed
Starting at index 152 with window 10
[2, 1, 3, 1]
SCALING INDEX = 2
removed
[3, 0, 1, 2]
SCALING INDEX = 2
removed
[2, 1, 2, 2]
SCALING INDEX = 2
removed
[3, 1, 2, 0]
SCALING INDEX = 2
removed
[1, 2, 3, 2]
SCALING INDEX = 2
removed
[2, 2, 3, 0]
SCALING INDEX = 2
removed
[3, 0, 0, 3]
SCALING INDEX = 2
removed
[2, 1, 1, 3]
SCALING INDEX = 2
removed
[3, 1, 1, 1]
SCALING INDEX = 2
removed
[1, 2, 2, 3]
SCALING INDEX = 2
removed
Starting at index 162 with window 10
[2, 2, 2, 1]
SCALING INDEX = 2
removed
[0, 3, 3, 3]
SCALING INDEX = 2
removed
[1, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 0, 2]
SCALING INDEX = 2
removed
[2, 2, 1, 2]
SCALING INDEX = 2
removed
[3, 2, 1, 0]
SCALING INDEX = 2
removed
[1, 3, 2, 2]
SCALING INDEX = 2
removed
[2, 3, 2, 0]
SCALING INDEX = 2
removed
[2, 2, 0, 3]
SCALING INDEX = 2
removed
[3, 2, 0, 1]
SCALING INDEX = 2
removed
Starting at index 172 with window 10
[1, 3, 1, 3]
SCALING INDEX = 2
removed
[2, 3, 1, 1]
SCALING INDEX = 2
removed
[2, 0, 3, 3]
SCALING INDEX = 2
removed
[3, 0, 3, 1]
SCALING INDEX = 2
removed
[2, 3, 0, 2]
SCALING INDEX = 2
removed
[3, 3, 0, 0]
SCALING INDEX = 2
removed
[3, 0, 2, 2]
SCALING INDEX = 2
removed
[2, 1, 3, 2]
SCALING INDEX = 2
removed
[3, 1, 3, 0]
SCALING INDEX = 2
removed
[3, 0, 1, 3]
SCALING INDEX = 2
removed
Starting at index 182 with window 10
[2, 1, 2, 3]
SCALING INDEX = 2
removed
[3, 1, 2, 1]
SCALING INDEX = 2
removed
[1, 2, 3, 3]
SCALING INDEX = 2
removed
[2, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 1, 2]
SCALING INDEX = 2
removed
[2, 2, 2, 2]
SCALING INDEX = 2
removed
[3, 2, 2, 0]
SCALING INDEX = 2
removed
[1, 3, 3, 2]
SCALING INDEX = 2
removed
[2, 3, 3, 0]
SCALING INDEX = 2
removed
[3, 1, 0, 3]
SCALING INDEX = 2
removed
Starting at index 192 with window 10
[2, 2, 1, 3]
SCALING INDEX = 2
removed
[3, 2, 1, 1]
SCALING INDEX = 2
removed
[1, 3, 2, 3]
SCALING INDEX = 2
removed
[2, 3, 2, 1]
SCALING INDEX = 2
removed
[3, 2, 0, 2]
SCALING INDEX = 2
removed
[2, 3, 1, 2]
SCALING INDEX = 2
removed
[3, 3, 1, 0]
SCALING INDEX = 2
removed
[3, 0, 3, 2]
SCALING INDEX = 2
removed
[2, 3, 0, 3]
SCALING INDEX = 2
removed
[3, 3, 0, 1]
SCALING INDEX = 2
removed
Starting at index 202 with window 10
[3, 0, 2, 3]
SCALING INDEX = 2
removed
[2, 1, 3, 3]
SCALING INDEX = 2
removed
[3, 1, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 2, 2]
SCALING INDEX = 2
removed
[2, 2, 3, 2]
SCALING INDEX = 2
removed
[3, 2, 3, 0]
SCALING INDEX = 2
removed
[3, 1, 1, 3]
SCALING INDEX = 2
removed
[2, 2, 2, 3]
SCALING INDEX = 2
removed
[3, 2, 2, 1]
SCALING INDEX = 2
removed
[1, 3, 3, 3]
SCALING INDEX = 2
removed
Starting at index 212 with window 10
[2, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 2, 1, 2]
SCALING INDEX = 2
removed
[2, 3, 2, 2]
SCALING INDEX = 2
removed
[3, 3, 2, 0]
SCALING INDEX = 2
removed
[3, 2, 0, 3]
SCALING INDEX = 2
removed
[2, 3, 1, 3]
SCALING INDEX = 2
removed
[3, 3, 1, 1]
SCALING INDEX = 2
removed
[3, 0, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 0, 2]
SCALING INDEX = 2
removed
[3, 1, 3, 2]
SCALING INDEX = 2
removed
Starting at index 222 with window 10
[3, 1, 2, 3]
SCALING INDEX = 2
removed
[2, 2, 3, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 2, 2, 2]
SCALING INDEX = 2
removed
[2, 3, 3, 2]
SCALING INDEX = 2
removed
[3, 3, 3, 0]
SCALING INDEX = 2
removed
[3, 2, 1, 3]
SCALING INDEX = 2
removed
[2, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 1]
SCALING INDEX = 2
removed
[3, 3, 1, 2]
SCALING INDEX = 2
removed
Starting at index 232 with window 10
[3, 3, 0, 3]
SCALING INDEX = 2
removed
[3, 1, 3, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 2]
SCALING INDEX = 2
removed
[3, 2, 2, 3]
SCALING INDEX = 2
removed
[2, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 3, 2, 2]
SCALING INDEX = 2
removed
[3, 3, 1, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 2]
SCALING INDEX = 2
removed
Starting at index 242 with window 10
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
Starting at index 252 with window 10
No config exists that meets all filtering constraints
Recursive down scaling disabled
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
4
Passing over worker in previously failed scaling
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4d66b90>, <src.sla.WorkerConf object at 0x7fabc4d66350>, <src.sla.WorkerConf object at 0x7fabc4d665d0>, <src.sla.WorkerConf object at 0x7fabc4d66cd0>]], [{}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc745a950>, <src.sla.WorkerConf object at 0x7fabc745ae50>, <src.sla.WorkerConf object at 0x7fabc745ab10>, <src.sla.WorkerConf object at 0x7fabc745a6d0>]]]
Conf 0:
127
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;1;2 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [2, {'cpu': [1], 'memory': [0]}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 2 with window 1
[0, 0, 1, 2]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '131', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  3 tenants and 0;0;1;2:
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '134', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 3, maxTenants: 3
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '134', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '134', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '134', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '134', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 134.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  4 tenants and 0;0;1;2:
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 4, maxTenants: 4
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 141.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  5 tenants and 0;1;0;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  5 tenants and 0;1;0;2:
Returning adaptive scaler for  5 tenants and 0;1;0;2:
1
255
['0102', '0120', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '142', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 5, maxTenants: 5
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '142', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '142', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '142', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '142', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 142
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 142
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.20512820512820512', 'best_score': '-0.20512820512820512', 'SLAName': 'silver', 'CompletionTime': '142', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.20512820512820512', 'best_score': '-0.20512820512820512', 'SLAName': 'silver', 'CompletionTime': '142', 'Successfull': 'true'}]
RESULT FOUND
[0, 1, 0, 2]
Measured completion time is 142.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  5 tenants and 0;1;0;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '142', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  5 tenants and 0;1;0;2:
Returning adaptive scaler for  5 tenants and 0;1;0;2:
1
255
['0102', '0120', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 5, maxTenants: 5
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}]
RESULT FOUND
[0, 1, 0, 2]
Measured completion time is 137.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Transferring result from 5 to 6
Returning adaptive scaler for  5 tenants and 0;1;0;2:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': 1000149.0, 'Successfull': 'true'}
Returning adaptive scaler for  6 tenants and 0;1;0;2:
1
255
Getting next batch of experiments for 6 tenants
Moving filtered samples in sorted combinations after the window
['0021', '1010', '1001', '0030', '0102', '0120', '1100', '0111', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 1
Starting at index 0 with window 1
[0, 0, 2, 1]
removed
Starting at index 1 with window 1
[1, 0, 1, 0]
removed
Starting at index 2 with window 1
[1, 0, 0, 1]
removed
Starting at index 3 with window 1
[0, 0, 3, 0]
removed
Starting at index 4 with window 1
[0, 1, 0, 2]
not removed
Going to 2 tenants
[0, 1, 0, 2]
not removed
Going to 3 tenants
[0, 1, 0, 2]
not removed
Going to 6 tenants
Starting at index 4 with window 1
['0021', '1010', '1001', '0030', '0102', '0120', '1100', '0111', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 1 0 2
min_conf_dec: 4
4
[0, 1, 0, 2]
{'0': [[1, 0, 2]]}
{'1': [[0, 2, 0]]}
{'0': [[2, 0, 1]]}
{'2': [[0, 1, 0]]}
Next possible experiments for next nb of tenants
{'0': [[1, 0, 2]]}
Elementstr: [[0,1,0,2]]
Min replicacount:0 1 0 2
Max replicacount:0 1 0 2
Generating new experiment. Saving results on Results/exp3/silver/6_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  6 tenants and 0;1;0;2:
Returning adaptive scaler for  6 tenants and 0;1;0;2:
1
255
['0021', '1010', '1001', '0030', '0102', '0120', '1100', '0111', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '148', 'Successfull': 'true'}
Starting at: 4
Tenant_nb: 6, maxTenants: 6
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '148', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '148', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '148', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '148', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/6_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 148
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/6_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 148
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.20512820512820512', 'best_score': '-0.20512820512820512', 'SLAName': 'silver', 'CompletionTime': '148', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.20512820512820512', 'best_score': '-0.20512820512820512', 'SLAName': 'silver', 'CompletionTime': '148', 'Successfull': 'true'}]
RESULT FOUND
[0, 1, 0, 2]
Measured completion time is 148.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Transferring result from 6 to 7
Returning adaptive scaler for  6 tenants and 0;1;0;2:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': 1000149.0, 'Successfull': 'true'}
Returning adaptive scaler for  7 tenants and 0;1;0;2:
1
255
Getting next batch of experiments for 7 tenants
Moving filtered samples in sorted combinations after the window
['0021', '1010', '1001', '0030', '0102', '0120', '1100', '0111', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 1
Starting at index 0 with window 1
[0, 0, 2, 1]
removed
Starting at index 1 with window 1
[1, 0, 1, 0]
removed
Starting at index 2 with window 1
[1, 0, 0, 1]
removed
Starting at index 3 with window 1
[0, 0, 3, 0]
removed
Starting at index 4 with window 1
[0, 1, 0, 2]
not removed
Going to 2 tenants
[0, 1, 0, 2]
not removed
Going to 3 tenants
[0, 1, 0, 2]
not removed
Going to 6 tenants
Starting at index 4 with window 1
['0021', '1010', '1001', '0030', '0102', '0120', '1100', '0111', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 1 0 2
min_conf_dec: 4
4
[0, 1, 0, 2]
{'0': [[1, 0, 2]]}
{'1': [[0, 2, 0]]}
{'0': [[2, 0, 1]]}
{'2': [[0, 1, 0]]}
Next possible experiments for next nb of tenants
{'0': [[1, 0, 2]]}
Elementstr: [[0,1,0,2]]
Min replicacount:0 1 0 2
Max replicacount:0 1 0 2
Generating new experiment. Saving results on Results/exp3/silver/7_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '148', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  7 tenants and 0;1;0;2:
Returning adaptive scaler for  7 tenants and 0;1;0;2:
1
255
['0021', '1010', '1001', '0030', '0102', '0120', '1100', '0111', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '153', 'Successfull': 'true'}
Starting at: 4
Tenant_nb: 7, maxTenants: 7
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '153', 'Successfull': 'true'}]
Filtered results
Current result is NO RESULT, therefore, we remove all configs with higher resource_cost than current result for higher number of tenants: 8..7
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '153', 'Successfull': 'true'}]
Filtered results
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/7_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 153
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/7_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 153
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-1.02', 'best_score': '-1', 'SLAName': 'silver', 'CompletionTime': '153', 'Successfull': 'true'}]
Filtered results
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[9880593853]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{}, [], [<src.sla.WorkerConf object at 0x7fabc7451d10>, <src.sla.WorkerConf object at 0x7fabc7451950>, <src.sla.WorkerConf object at 0x7fabc7451b90>, <src.sla.WorkerConf object at 0x7fabc7451850>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO RESULT
TIPPED_OVER_CONFS
[[0, 1, 0, 2]]
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE UP DIFF
difference between resource_cost optimal conf and predicted total cost -1
40
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
[0, 0, 2, 1]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[1, 0, 1, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[1, 0, 0, 1]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 0, 3, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
Removing failed conf
[0, 1, 0, 2]
Tipped over conf already removed:
[0, 1, 0, 2]
Moving filtered samples in sorted combinations after the window
['0120', '1100', '0111', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 4 with window 10
Starting at index 4 with window 10
[0, 2, 1, 0]
removed
[0, 3, 0, 0]
removed
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 0, 3, 1]
removed
[1, 0, 1, 1]
removed
[1, 0, 2, 0]
removed
[2, 0, 0, 0]
removed
[0, 1, 0, 3]
not removed
Going to 2 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
Going to 3 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
Going to 6 tenants
Starting at index 4 with window 4
['0120', '1100', '0111', '0201', '0013', '0022', '1002', '0103', '0210', '0300', '0112', '0121', '1101', '0031', '1011', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Starting at index 4 with window 4
Getting next batch of experiments for 7 tenants
min_conf: 0 0 1 3
min_conf_dec: 4
4
[0, 0, 1, 3]
5
[0, 0, 2, 2]
6
[1, 0, 0, 2]
7
[0, 1, 0, 3]
{'0': [[0, 1, 3], [0, 2, 2], [1, 0, 3]], '1': [[0, 0, 2]]}
{'0': [[1, 3, 0], [2, 2, 0], [0, 2, 1]], '1': [[0, 3, 0]]}
{'1': [[3, 0, 0]], '2': [[2, 0, 0]], '0': [[2, 1, 0], [3, 0, 1]]}
{'3': [[0, 0, 1], [0, 1, 0]], '2': [[0, 0, 2], [1, 0, 0]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 3], [0, 2, 2], [1, 0, 3]], '1': [[0, 0, 2]]}
Elementstr: [[0,0,1,3];[0,0,2,2];[0,1,0,3]]
Min replicacount:0 0 1 3
Max replicacount:0 1 0 3
Elementstr: [[1,0,0,2]]
Min replicacount:1 0 0 2
Max replicacount:1 0 0 2
Generating new experiment. Saving results on Results/exp3/silver/7_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 1e-09
[0, 1, 0, 3] -> 1e-09
Generating new experiment. Saving results on Results/exp3/silver/7_tenants-ex1/op/
SAMPLE_LIST
[1, 0, 0, 2] -> 1e-09
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Saving optimal results into matrix for previous results
using curve-fitted scaling function to estimate configuration for tenants 8
Returning adaptive scaler for  7 tenants and 0;0;1;3:
1
255
total_cost = 17
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Returning adaptive scaler for  8 tenants and 0;1;2;0:
1
255
Getting next batch of experiments for 8 tenants
Moving filtered samples in sorted combinations after the window
['0120', '1100', '0111', '0201', '0013', '0022', '1002', '0103', '0210', '0300', '0112', '0121', '1101', '0031', '1011', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 10
Starting at index 0 with window 10
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 1, 1, 1]
removed
[0, 2, 0, 1]
removed
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 2, 1, 0]
removed
[0, 3, 0, 0]
removed
Going to 2 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
Going to 3 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
Going to 6 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
Going to 8 tenants
Starting at index 0 with window 4
['0013', '0022', '1002', '0103', '0120', '1100', '0111', '0201', '0112', '0121', '1101', '0031', '0210', '0300', '1011', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 0 1 3
min_conf_dec: 0
0
[0, 0, 1, 3]
1
[0, 0, 2, 2]
2
[1, 0, 0, 2]
3
[0, 1, 0, 3]
{'0': [[0, 1, 3], [0, 2, 2], [1, 0, 3]], '1': [[0, 0, 2]]}
{'0': [[1, 3, 0], [2, 2, 0], [0, 2, 1]], '1': [[0, 3, 0]]}
{'1': [[3, 0, 0]], '2': [[2, 0, 0]], '0': [[2, 1, 0], [3, 0, 1]]}
{'3': [[0, 0, 1], [0, 1, 0]], '2': [[0, 0, 2], [1, 0, 0]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 3], [0, 2, 2], [1, 0, 3]], '1': [[0, 0, 2]]}
Elementstr: [[0,0,1,3];[0,0,2,2];[0,1,0,3]]
Min replicacount:0 0 1 3
Max replicacount:0 1 0 3
Elementstr: [[1,0,0,2]]
Min replicacount:1 0 0 2
Max replicacount:1 0 0 2
Generating new experiment. Saving results on Results/exp3/silver/8_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 1e-09
[0, 1, 0, 3] -> 1e-09
Generating new experiment. Saving results on Results/exp3/silver/8_tenants-ex1/op/
SAMPLE_LIST
[1, 0, 0, 2] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '148', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  8 tenants and 0;0;1;3:
Returning adaptive scaler for  8 tenants and 0;0;1;3:
1
255
['0013', '0022', '1002', '0103', '0120', '1100', '0111', '0201', '0112', '0121', '1101', '0031', '0210', '0300', '1011', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '144', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 8, maxTenants: 8
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '144', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '144', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '144', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '144', 'Successfull': 'true'}]
Removing config from the left over configs generated by k8-resource optimizer because it has a higher resource cost than the currently found cost-effective result and we assume it will therefore not be cost-effective for the current tenant
[0, 1, 0, 3]
Runtime manager:: Removing sample for the following conf: [0,1,0,3]
Runtime manager:: Sample list before remove:
[[0, 0, 1, 3], [0, 1, 0, 3]]
[[1, 0, 0, 2]]
Runtime manager:: Going to next experiment
Runtime manager:: Sample list after remove:
[[0, 0, 1, 3]]
[[1, 0, 0, 2]]
Left over configs in runtime manager: 
[[1, 0, 0, 2]]
Moving filtered samples in sorted combinations after the window
['0013', '0022', '1002', '0103', '0120', '1100', '0111', '0201', '0112', '0121', '1101', '0031', '0210', '0300', '1011', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 2 with window 10
Starting at index 2 with window 10
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 1, 1, 1]
removed
[0, 2, 0, 1]
removed
[0, 1, 1, 2]
not removed
[0, 1, 2, 1]
removed
[1, 1, 0, 1]
removed
[0, 0, 3, 1]
removed
Going to 2 tenants
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 3 tenants
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 6 tenants
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 8 tenants
Starting at index 2 with window 3
['0013', '0022', '1002', '0103', '0112', '0210', '0300', '0120', '1100', '0111', '0201', '1011', '0121', '1101', '0031', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/8_tenants-ex1/op/
SAMPLE_LIST
[1, 0, 0, 2] -> 1e-09
There still remains configs to be tested in the current k8-resource-optimizer experiment batch
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
using curve-fitted scaling function to estimate configuration for tenants 9
Returning adaptive scaler for  8 tenants and 1;0;0;2:
1
255
total_cost = 19
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Returning adaptive scaler for  9 tenants and 0;0;1;3:
1
255
Getting next batch of experiments for 9 tenants
Moving filtered samples in sorted combinations after the window
['0013', '0022', '1002', '0103', '0112', '0210', '0300', '0120', '1100', '0111', '0201', '1011', '0121', '1101', '0031', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 10
Starting at index 0 with window 10
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
[0, 2, 1, 0]
removed
[0, 3, 0, 0]
removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 1, 1, 1]
removed
Going to 2 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 3 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 6 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 8 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 9 tenants
Starting at index 0 with window 5
['0013', '0022', '1002', '0103', '0112', '0201', '1011', '0121', '1101', '0031', '0210', '0300', '0120', '1100', '0111', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 0 1 3
min_conf_dec: 0
0
[0, 0, 1, 3]
1
[0, 0, 2, 2]
2
[1, 0, 0, 2]
3
[0, 1, 0, 3]
4
[0, 1, 1, 2]
{'0': [[0, 1, 3], [0, 2, 2], [1, 0, 3], [1, 1, 2]], '1': [[0, 0, 2]]}
{'0': [[1, 3, 0], [2, 2, 0], [0, 2, 1]], '1': [[0, 3, 0], [1, 2, 0]]}
{'1': [[3, 0, 0], [2, 0, 1]], '2': [[2, 0, 0]], '0': [[2, 1, 0], [3, 0, 1]]}
{'3': [[0, 0, 1], [0, 1, 0]], '2': [[0, 0, 2], [1, 0, 0], [0, 1, 1]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 3], [0, 2, 2], [1, 0, 3], [1, 1, 2]], '1': [[0, 0, 2]]}
Elementstr: [[0,0,1,3];[0,0,2,2];[0,1,0,3];[0,1,1,2]]
Min replicacount:0 0 1 3
Max replicacount:0 1 1 2
Elementstr: [[1,0,0,2]]
Min replicacount:1 0 0 2
Max replicacount:1 0 0 2
Generating new experiment. Saving results on Results/exp3/silver/9_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 1e-09
[0, 1, 0, 3] -> 1e-09
[0, 1, 1, 2] -> 1e-09
Generating new experiment. Saving results on Results/exp3/silver/9_tenants-ex1/op/
SAMPLE_LIST
[1, 0, 0, 2] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '148', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  9 tenants and 0;0;1;3:
Returning adaptive scaler for  9 tenants and 0;0;1;3:
1
255
['0013', '0022', '1002', '0103', '0112', '0201', '1011', '0121', '1101', '0031', '0210', '0300', '0120', '1100', '0111', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '151', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 9, maxTenants: 9
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '151', 'Successfull': 'true'}]
Filtered results
Current result is NO RESULT, therefore, we remove all configs with higher resource_cost than current result for higher number of tenants: 10..9
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '151', 'Successfull': 'true'}]
Filtered results
Left over configs in runtime manager: 
[[0, 1, 0, 3], [0, 1, 1, 2], [1, 0, 0, 2]]
Moving filtered samples in sorted combinations after the window
['0013', '0022', '1002', '0103', '0112', '0201', '1011', '0121', '1101', '0031', '0210', '0300', '0120', '1100', '0111', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 3 with window 10
Starting at index 3 with window 10
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
[0, 2, 0, 1]
removed
[1, 0, 1, 1]
removed
[0, 1, 2, 1]
removed
[1, 1, 0, 1]
removed
[0, 0, 3, 1]
removed
[0, 2, 1, 0]
removed
[0, 3, 0, 0]
removed
[0, 1, 2, 0]
removed
Going to 2 tenants
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 3 tenants
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 6 tenants
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 8 tenants
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 9 tenants
Going to 10 tenants
Starting at index 3 with window 2
['0013', '0022', '1002', '0103', '0112', '1100', '0111', '0201', '1011', '0121', '1101', '0031', '0210', '0300', '0120', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Removing conf 1002 from left experiments in runtime manager because of this conf violates transition constraints
Runtime manager:: Removing sample for the following conf: [1,0,0,2]
Runtime manager:: Sample list before remove:
[[0, 0, 1, 3], [0, 1, 0, 3], [0, 1, 1, 2]]
[[1, 0, 0, 2]]
Runtime manager:: Sample list after remove:
[[0, 0, 1, 3], [0, 1, 0, 3], [0, 1, 1, 2]]
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/9_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 151
[0, 1, 0, 3] -> 1e-09
[0, 1, 1, 2] -> 1e-09
There still remains configs to be tested in the current k8-resource-optimizer experiment batch
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
using curve-fitted scaling function to estimate configuration for tenants 10
Returning adaptive scaler for  9 tenants and 0;1;0;3:
1
255
total_cost = 21
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Returning adaptive scaler for  10 tenants and 0;0;1;3:
1
255
Getting next batch of experiments for 10 tenants
Moving filtered samples in sorted combinations after the window
['0013', '0022', '1002', '0103', '0112', '1100', '0111', '0201', '1011', '0121', '1101', '0031', '0210', '0300', '0120', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 10
Starting at index 0 with window 10
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
[1, 1, 0, 0]
removed
[0, 1, 1, 1]
removed
[0, 2, 0, 1]
removed
[1, 0, 1, 1]
removed
[0, 1, 2, 1]
removed
Going to 2 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 3 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 6 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 8 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 9 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 10 tenants
Starting at index 0 with window 5
['0013', '0022', '1002', '0103', '0112', '1101', '0031', '0210', '0300', '0120', '1100', '0111', '0201', '1011', '0121', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 0 1 3
min_conf_dec: 0
0
[0, 0, 1, 3]
1
[0, 0, 2, 2]
2
[1, 0, 0, 2]
3
[0, 1, 0, 3]
4
[0, 1, 1, 2]
{'0': [[0, 1, 3], [0, 2, 2], [1, 0, 3], [1, 1, 2]], '1': [[0, 0, 2]]}
{'0': [[1, 3, 0], [2, 2, 0], [0, 2, 1]], '1': [[0, 3, 0], [1, 2, 0]]}
{'1': [[3, 0, 0], [2, 0, 1]], '2': [[2, 0, 0]], '0': [[2, 1, 0], [3, 0, 1]]}
{'3': [[0, 0, 1], [0, 1, 0]], '2': [[0, 0, 2], [1, 0, 0], [0, 1, 1]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 3], [0, 2, 2], [1, 0, 3], [1, 1, 2]], '1': [[0, 0, 2]]}
Elementstr: [[0,0,1,3];[0,0,2,2];[0,1,0,3];[0,1,1,2]]
Min replicacount:0 0 1 3
Max replicacount:0 1 1 2
Elementstr: [[1,0,0,2]]
Min replicacount:1 0 0 2
Max replicacount:1 0 0 2
Generating new experiment. Saving results on Results/exp3/silver/10_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 1e-09
[0, 1, 0, 3] -> 1e-09
[0, 1, 1, 2] -> 1e-09
Generating new experiment. Saving results on Results/exp3/silver/10_tenants-ex1/op/
SAMPLE_LIST
[1, 0, 0, 2] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '148', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '1', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  10 tenants and 0;0;1;3:
Returning adaptive scaler for  10 tenants and 0;0;1;3:
1
255
['0013', '0022', '1002', '0103', '0112', '1101', '0031', '0210', '0300', '0120', '1100', '0111', '0201', '1011', '0121', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '165', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 10, maxTenants: 10
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '165', 'Successfull': 'true'}]
Filtered results
Current result is NO RESULT, therefore, we remove all configs with higher resource_cost than current result for higher number of tenants: 11..10
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '165', 'Successfull': 'true'}]
Filtered results
Left over configs in runtime manager: 
[[0, 1, 0, 3], [0, 1, 1, 2], [1, 0, 0, 2]]
Moving filtered samples in sorted combinations after the window
['0013', '0022', '1002', '0103', '0112', '1101', '0031', '0210', '0300', '0120', '1100', '0111', '0201', '1011', '0121', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 3 with window 10
Starting at index 3 with window 10
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
[1, 1, 0, 1]
removed
[0, 0, 3, 1]
removed
[0, 2, 1, 0]
removed
[0, 3, 0, 0]
removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 1, 1, 1]
removed
[0, 2, 0, 1]
removed
Going to 2 tenants
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 3 tenants
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 6 tenants
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 8 tenants
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 9 tenants
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 10 tenants
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 11 tenants
Starting at index 3 with window 2
['0013', '0022', '1002', '0103', '0112', '1011', '0121', '1101', '0031', '0210', '0300', '0120', '1100', '0111', '0201', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Removing conf 1002 from left experiments in runtime manager because of this conf violates transition constraints
Runtime manager:: Removing sample for the following conf: [1,0,0,2]
Runtime manager:: Sample list before remove:
[[0, 0, 1, 3], [0, 1, 0, 3], [0, 1, 1, 2]]
[[1, 0, 0, 2]]
Runtime manager:: Sample list after remove:
[[0, 0, 1, 3], [0, 1, 0, 3], [0, 1, 1, 2]]
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/10_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 165
[0, 1, 0, 3] -> 1e-09
[0, 1, 1, 2] -> 1e-09
There still remains configs to be tested in the current k8-resource-optimizer experiment batch
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Returning adaptive scaler for  10 tenants and 0;1;0;3:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '1', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '148', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '1', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  10 tenants and 0;1;0;3:
Returning adaptive scaler for  10 tenants and 0;1;0;3:
1
255
['0013', '0022', '1002', '0103', '0112', '1011', '0121', '1101', '0031', '0210', '0300', '0120', '1100', '0111', '0201', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '160', 'Successfull': 'true'}
Starting at: 3
Tenant_nb: 10, maxTenants: 10
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '160', 'Successfull': 'true'}]
Filtered results
Current result is NO RESULT, therefore, we remove all configs with higher resource_cost than current result for higher number of tenants: 11..10
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '160', 'Successfull': 'true'}]
Filtered results
Left over configs in runtime manager: 
[[0, 1, 1, 2]]
Moving filtered samples in sorted combinations after the window
['0013', '0022', '1002', '0103', '0112', '1011', '0121', '1101', '0031', '0210', '0300', '0120', '1100', '0111', '0201', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 4 with window 10
Starting at index 4 with window 10
[0, 1, 1, 2]
not removed
[1, 0, 1, 1]
removed
[0, 1, 2, 1]
removed
[1, 1, 0, 1]
removed
[0, 0, 3, 1]
removed
[0, 2, 1, 0]
removed
[0, 3, 0, 0]
removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 1, 1, 1]
removed
Going to 2 tenants
[0, 1, 1, 2]
not removed
Going to 3 tenants
[0, 1, 1, 2]
not removed
Going to 6 tenants
[0, 1, 1, 2]
not removed
Going to 8 tenants
[0, 1, 1, 2]
not removed
Going to 9 tenants
[0, 1, 1, 2]
not removed
Going to 10 tenants
Starting at index 4 with window 1
['0013', '0022', '1002', '0103', '0112', '0201', '1011', '0121', '1101', '0031', '0210', '0300', '0120', '1100', '0111', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/10_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 165
[0, 1, 0, 3] -> 160
[0, 1, 1, 2] -> 1e-09
There still remains configs to be tested in the current k8-resource-optimizer experiment batch
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Returning adaptive scaler for  10 tenants and 0;1;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '148', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '1', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  10 tenants and 0;1;1;2:
Returning adaptive scaler for  10 tenants and 0;1;1;2:
1
255
['0013', '0022', '1002', '0103', '0112', '0201', '1011', '0121', '1101', '0031', '0210', '0300', '0120', '1100', '0111', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '154', 'Successfull': 'true'}
Starting at: 4
Tenant_nb: 10, maxTenants: 10
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '154', 'Successfull': 'true'}]
Filtered results
Current result is NO RESULT, therefore, we remove all configs with higher resource_cost than current result for higher number of tenants: 11..10
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '154', 'Successfull': 'true'}]
Filtered results
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/10_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 165
[0, 1, 0, 3] -> 160
[0, 1, 1, 2] -> 154
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 2 experiments
Generating new experiment. Saving results on Results/exp3/silver/10_tenants-ex0/op/
Generating new experiment. Saving results on Results/exp3/silver/10_tenants-ex1/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 165
[0, 1, 0, 3] -> 160
[0, 1, 1, 2] -> 154
[1, 0, 0, 2] -> 1e-09
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-1.1', 'best_score': '-1', 'SLAName': 'silver', 'CompletionTime': '165', 'Successfull': 'true'}, {'config': '1', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-1.0666666666666667', 'best_score': '-1', 'SLAName': 'silver', 'CompletionTime': '160', 'Successfull': 'true'}, {'config': '2', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-1.0266666666666666', 'best_score': '-1', 'SLAName': 'silver', 'CompletionTime': '154', 'Successfull': 'true'}, {'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2564102564102564', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}]
Filtered results
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[9880593853]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{}, [], [<src.sla.WorkerConf object at 0x7fabc4d6b310>, <src.sla.WorkerConf object at 0x7fabc4d6bd50>, <src.sla.WorkerConf object at 0x7fabc4d6b590>, <src.sla.WorkerConf object at 0x7fabc4d6b290>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO RESULT
TIPPED_OVER_CONFS
[[0, 0, 1, 3], [0, 1, 0, 3], [0, 1, 1, 2]]
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE UP DIFF
difference between resource_cost optimal conf and predicted total cost -1
42
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE UP DIFF
difference between resource_cost optimal conf and predicted total cost -1
41
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE UP DIFF
difference between resource_cost optimal conf and predicted total cost -1
41
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
[0, 1, 2, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[1, 1, 0, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 1, 1, 1]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 2, 0, 1]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 2, 1, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 3, 0, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
Removing failed conf
[0, 0, 1, 3]
[0, 0, 2, 2]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[1, 0, 0, 2]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[1, 0, 1, 1]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 0, 3, 1]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[1, 0, 2, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[2, 0, 0, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
Removing failed conf
[0, 1, 0, 3]
Removing failed conf
[0, 1, 1, 2]
Tipped over conf already removed:
[0, 0, 1, 3]
Tipped over conf already removed:
[0, 1, 0, 3]
Tipped over conf already removed:
[0, 1, 1, 2]
Moving filtered samples in sorted combinations after the window
['0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 4 with window 10
Starting at index 4 with window 10
[0, 2, 0, 2]
not removed
[0, 2, 1, 1]
removed
[0, 2, 2, 0]
removed
[1, 2, 0, 0]
removed
[0, 3, 0, 1]
removed
[0, 3, 1, 0]
removed
[0, 0, 2, 3]
not removed
[1, 0, 0, 3]
not removed
[0, 0, 3, 2]
removed
[1, 0, 1, 2]
not removed
Going to 2 tenants
[0, 2, 0, 2]
not removed
[0, 0, 2, 3]
not removed
[1, 0, 0, 3]
not removed
[1, 0, 1, 2]
not removed
Going to 3 tenants
[0, 2, 0, 2]
not removed
[0, 0, 2, 3]
removed
[1, 0, 0, 3]
not removed
[1, 0, 1, 2]
not removed
Going to 6 tenants
[0, 2, 0, 2]
not removed
[1, 0, 0, 3]
not removed
[1, 0, 1, 2]
not removed
Going to 8 tenants
[0, 2, 0, 2]
not removed
[1, 0, 0, 3]
not removed
[1, 0, 1, 2]
not removed
Going to 9 tenants
[0, 2, 0, 2]
not removed
[1, 0, 0, 3]
not removed
[1, 0, 1, 2]
not removed
Going to 10 tenants
Going to 11 tenants
Starting at index 4 with window 3
['0121', '1101', '0130', '1110', '0202', '1003', '1012', '1021', '0023', '0211', '0220', '1200', '0301', '0310', '2001', '1030', '0032', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Starting at index 4 with window 3
Getting next batch of experiments for 10 tenants
min_conf: 0 2 0 2
min_conf_dec: 4
4
[0, 2, 0, 2]
5
[1, 0, 0, 3]
6
[1, 0, 1, 2]
{'0': [[2, 0, 2]], '1': [[0, 0, 3], [0, 1, 2]]}
{'2': [[0, 2, 0]], '0': [[0, 3, 1], [1, 2, 1]]}
{'0': [[2, 0, 2], [3, 1, 0]], '1': [[2, 1, 0]]}
{'2': [[0, 2, 0], [1, 0, 1]], '3': [[1, 0, 0]]}
Next possible experiments for next nb of tenants
{'0': [[2, 0, 2]], '1': [[0, 0, 3], [0, 1, 2]]}
Elementstr: [[0,2,0,2]]
Min replicacount:0 2 0 2
Max replicacount:0 2 0 2
Elementstr: [[1,0,0,3];[1,0,1,2]]
Min replicacount:1 0 0 3
Max replicacount:1 0 1 2
Generating new experiment. Saving results on Results/exp3/silver/10_tenants-ex0/op/
SAMPLE_LIST
[0, 2, 0, 2] -> 1e-09
Generating new experiment. Saving results on Results/exp3/silver/10_tenants-ex1/op/
SAMPLE_LIST
[1, 0, 0, 3] -> 1e-09
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Saving optimal results into matrix for previous results
Returning adaptive scaler for  9 tenants and 0;1;0;3:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '148', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '1', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  9 tenants and 0;1;0;3:
Returning adaptive scaler for  9 tenants and 0;1;0;3:
1
255
['0013', '0022', '1002', '0103', '0112', '1100', '0111', '0201', '1011', '0121', '1101', '0031', '0210', '0300', '0120', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}
Starting at: 3
Tenant_nb: 9, maxTenants: 9
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[[0, 1, 1, 2]]
Moving filtered samples in sorted combinations after the window
['0013', '0022', '1002', '0103', '0112', '1100', '0111', '0201', '1011', '0121', '1101', '0031', '0210', '0300', '0120', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 4 with window 10
Starting at index 4 with window 10
[0, 1, 1, 2]
not removed
[1, 1, 0, 0]
removed
[0, 1, 1, 1]
removed
[0, 2, 0, 1]
removed
[1, 0, 1, 1]
removed
[0, 1, 2, 1]
removed
[1, 1, 0, 1]
removed
[0, 0, 3, 1]
removed
[0, 2, 1, 0]
removed
[0, 3, 0, 0]
removed
Going to 2 tenants
[0, 1, 1, 2]
not removed
Going to 3 tenants
[0, 1, 1, 2]
not removed
Going to 6 tenants
[0, 1, 1, 2]
not removed
Going to 8 tenants
[0, 1, 1, 2]
not removed
Going to 9 tenants
Going to 10 tenants
[0, 1, 1, 2]
not removed
Going to 11 tenants
Starting at index 4 with window 1
['0013', '0022', '1002', '0103', '0112', '0120', '1100', '0111', '0201', '1011', '0121', '1101', '0031', '0210', '0300', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/9_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 151
[0, 1, 0, 3] -> 147
[0, 1, 1, 2] -> 1e-09
There still remains configs to be tested in the current k8-resource-optimizer experiment batch
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Returning adaptive scaler for  8 tenants and 1;0;0;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '148', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  8 tenants and 1;0;0;2:
Returning adaptive scaler for  8 tenants and 1;0;0;2:
1
255
['0013', '0022', '1002', '0103', '0112', '0210', '0300', '0120', '1100', '0111', '0201', '1011', '0121', '1101', '0031', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}
Starting at: 2
Tenant_nb: 8, maxTenants: 8
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/8_tenants-ex1/op/
SAMPLE_LIST
[1, 0, 0, 2] -> 141
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 2 experiments
Generating new experiment. Saving results on Results/exp3/silver/8_tenants-ex0/op/
Generating new experiment. Saving results on Results/exp3/silver/8_tenants-ex1/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 1e-09
[0, 1, 0, 3] -> 1e-09
[1, 0, 0, 2] -> 141
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2564102564102564', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}, {'config': '1', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2692307692307692', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}, {'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2564102564102564', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2564102564102564', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
RESULT FOUND
[1, 0, 0, 2]
Measured completion time is 141.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  7 tenants and 0;0;1;3:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '148', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  7 tenants and 0;0;1;3:
Returning adaptive scaler for  7 tenants and 0;0;1;3:
1
255
['0120', '1100', '0111', '0201', '0013', '0022', '1002', '0103', '0210', '0300', '0112', '0121', '1101', '0031', '1011', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}
Starting at: 4
Tenant_nb: 7, maxTenants: 7
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
Removing config from the left over configs generated by k8-resource optimizer because it has a higher resource cost than the currently found cost-effective result and we assume it will therefore not be cost-effective for the current tenant
[0, 1, 0, 3]
Runtime manager:: Removing sample for the following conf: [0,1,0,3]
Runtime manager:: Sample list before remove:
[[0, 0, 1, 3], [0, 1, 0, 3]]
[[1, 0, 0, 2]]
Runtime manager:: Going to next experiment
Runtime manager:: Sample list after remove:
[[0, 0, 1, 3]]
[[1, 0, 0, 2]]
Left over configs in runtime manager: 
[[1, 0, 0, 2]]
Moving filtered samples in sorted combinations after the window
['0120', '1100', '0111', '0201', '0013', '0022', '1002', '0103', '0210', '0300', '0112', '0121', '1101', '0031', '1011', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 6 with window 10
Starting at index 6 with window 10
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 2, 1, 0]
removed
[0, 3, 0, 0]
removed
[0, 1, 1, 2]
not removed
[0, 1, 2, 1]
removed
[1, 1, 0, 1]
removed
[0, 0, 3, 1]
removed
[1, 0, 1, 1]
removed
[1, 0, 2, 0]
removed
Going to 2 tenants
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 3 tenants
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 6 tenants
Going to 8 tenants
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 9 tenants
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 11 tenants
Starting at index 6 with window 3
['0120', '1100', '0111', '0201', '0013', '0022', '1002', '0103', '0112', '2000', '0130', '0210', '0300', '1110', '0121', '1101', '0031', '1011', '1020', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/7_tenants-ex1/op/
SAMPLE_LIST
[1, 0, 0, 2] -> 1e-09
There still remains configs to be tested in the current k8-resource-optimizer experiment batch
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Returning adaptive scaler for  6 tenants and 0;1;0;2:
1
255
Getting next batch of experiments for 6 tenants
Moving filtered samples in sorted combinations after the window
['0021', '1010', '1001', '0030', '0102', '0120', '1100', '0111', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 4
Starting at index 0 with window 4
[0, 0, 2, 1]
removed
[1, 0, 1, 0]
removed
[1, 0, 0, 1]
removed
[0, 0, 3, 0]
removed
Starting at index 4 with window 4
[0, 1, 0, 2]
not removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 1, 1, 1]
removed
Going to 2 tenants
[0, 1, 0, 2]
not removed
Going to 3 tenants
[0, 1, 0, 2]
not removed
Going to 6 tenants
[0, 1, 0, 2]
not removed
Going to 8 tenants
[0, 1, 0, 2]
not removed
Going to 9 tenants
[0, 1, 0, 2]
not removed
Going to 10 tenants
[0, 1, 0, 2]
not removed
Going to 11 tenants
Starting at index 4 with window 1
['0021', '1010', '1001', '0030', '0102', '0201', '0120', '1100', '0111', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 1 0 2
min_conf_dec: 4
4
[0, 1, 0, 2]
{'0': [[1, 0, 2]]}
{'1': [[0, 2, 0]]}
{'0': [[2, 0, 1]]}
{'2': [[0, 1, 0]]}
Next possible experiments for next nb of tenants
{'0': [[1, 0, 2]]}
Elementstr: [[0,1,0,2]]
Min replicacount:0 1 0 2
Max replicacount:0 1 0 2
Generating new experiment. Saving results on Results/exp3/silver/6_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 148
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '148', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  6 tenants and 0;1;0;2:
Returning adaptive scaler for  6 tenants and 0;1;0;2:
1
255
['0021', '1010', '1001', '0030', '0102', '0201', '0120', '1100', '0111', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '140', 'Successfull': 'true'}
Starting at: 4
Tenant_nb: 6, maxTenants: 6
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '140', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '140', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '140', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '140', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/6_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 140
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/6_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 140
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.20512820512820512', 'best_score': '-0.20512820512820512', 'SLAName': 'silver', 'CompletionTime': '140', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.20512820512820512', 'best_score': '-0.20512820512820512', 'SLAName': 'silver', 'CompletionTime': '140', 'Successfull': 'true'}]
RESULT FOUND
[0, 1, 0, 2]
Measured completion time is 140.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  5 tenants and 0;1;0;2:
1
255
Getting next batch of experiments for 5 tenants
Moving filtered samples in sorted combinations after the window
['0021', '1010', '1001', '0030', '0102', '0120', '1100', '0111', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 4
Starting at index 0 with window 4
[0, 0, 2, 1]
removed
[1, 0, 1, 0]
removed
[1, 0, 0, 1]
removed
[0, 0, 3, 0]
removed
Starting at index 4 with window 4
[0, 1, 0, 2]
not removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 1, 1, 1]
removed
Going to 2 tenants
[0, 1, 0, 2]
not removed
Going to 3 tenants
Going to 6 tenants
[0, 1, 0, 2]
not removed
Going to 7 tenants
[0, 1, 0, 2]
not removed
Going to 8 tenants
[0, 1, 0, 2]
not removed
Going to 9 tenants
[0, 1, 0, 2]
not removed
Going to 10 tenants
[0, 1, 0, 2]
not removed
Going to 11 tenants
Starting at index 4 with window 1
['0021', '1010', '1001', '0030', '0102', '0201', '0120', '1100', '0111', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 1 0 2
min_conf_dec: 4
4
[0, 1, 0, 2]
{'0': [[1, 0, 2]]}
{'1': [[0, 2, 0]]}
{'0': [[2, 0, 1]]}
{'2': [[0, 1, 0]]}
Next possible experiments for next nb of tenants
{'0': [[1, 0, 2]]}
Elementstr: [[0,1,0,2]]
Min replicacount:0 1 0 2
Max replicacount:0 1 0 2
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 142
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '142', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  5 tenants and 0;1;0;2:
Returning adaptive scaler for  5 tenants and 0;1;0;2:
1
255
['0021', '1010', '1001', '0030', '0102', '0201', '0120', '1100', '0111', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '135', 'Successfull': 'true'}
Starting at: 4
Tenant_nb: 5, maxTenants: 5
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '135', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '135', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '135', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '135', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 135
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 135
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.20512820512820512', 'best_score': '-0.20512820512820512', 'SLAName': 'silver', 'CompletionTime': '135', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.20512820512820512', 'best_score': '-0.20512820512820512', 'SLAName': 'silver', 'CompletionTime': '135', 'Successfull': 'true'}]
RESULT FOUND
[0, 1, 0, 2]
Measured completion time is 135.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  4 tenants and 0;0;1;2:
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 4, maxTenants: 4
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 138.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  3 tenants and 0;0;1;2:
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '130', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 3, maxTenants: 3
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '130', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '130', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '130', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '130', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 130.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '130', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4d80050>, <src.sla.WorkerConf object at 0x7fabc4d805d0>, <src.sla.WorkerConf object at 0x7fabc4d80cd0>, <src.sla.WorkerConf object at 0x7fabc4d80a90>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_2
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
5
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '130', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4d80050>, <src.sla.WorkerConf object at 0x7fabc4d805d0>, <src.sla.WorkerConf object at 0x7fabc4d80cd0>, <src.sla.WorkerConf object at 0x7fabc4d80a90>]]]
Conf 0:
130
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;1;2 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '130', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [2, {'cpu': [1], 'memory': [0]}], [2, {'cpu': [1], 'memory': [0]}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 0 with window 1
[0, 0, 1, 2]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  2 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '120', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '130', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  2 tenants and 0;0;1;2:
Returning adaptive scaler for  2 tenants and 0;0;1;2:
1
255
['0030', '0021', '0012', '1010', '1001', '0120', '0111', '0102', '1100', '0210', '0201', '0300', '0031', '0022', '1020', '0013', '1011', '1002', '2000', '0130', '0121', '0112', '1110', '0103', '1101', '0220', '0211', '0202', '1200', '0310', '0301', '0032', '1030', '0023', '1021', '1012', '2010', '1003', '2001', '0131', '0122', '1120', '0113', '1111', '1102', '2100', '0230', '0221', '0212', '1210', '0203', '1201', '0320', '0311', '0302', '1300', '0033', '1031', '1022', '2020', '1013', '2011', '2002', '3000', '0132', '1130', '0123', '1121', '1112', '2110', '1103', '2101', '0231', '0222', '1220', '0213', '1211', '1202', '2200', '0330', '0321', '0312', '1310', '0303', '1301', '1032', '2030', '1023', '2021', '2012', '3010', '2003', '3001', '0133', '1131', '1122', '2120', '1113', '2111', '2102', '3100', '0232', '1230', '0223', '1221', '1212', '2210', '1203', '2201', '0331', '0322', '1320', '0313', '1311', '1302', '2300', '1033', '2031', '2022', '3020', '2013', '3011', '3002', '1132', '2130', '1123', '2121', '2112', '3110', '2103', '3101', '0233', '1231', '1222', '2220', '1213', '2211', '2202', '3200', '0332', '1330', '0323', '1321', '1312', '2310', '1303', '2301', '2032', '3030', '2023', '3021', '3012', '3003', '1133', '2131', '2122', '3120', '2113', '3111', '3102', '1232', '2230', '1223', '2221', '2212', '3210', '2203', '3201', '0333', '1331', '1322', '2320', '1313', '2311', '2302', '3300', '2033', '3031', '3022', '3013', '2132', '3130', '2123', '3121', '3112', '3103', '1233', '2231', '2222', '3220', '2213', '3211', '3202', '1332', '2330', '1323', '2321', '2312', '3310', '2303', '3301', '3032', '3023', '2133', '3131', '3122', '3113', '2232', '3230', '2223', '3221', '3212', '3203', '1333', '2331', '2322', '3320', '2313', '3311', '3302', '3033', '3132', '3123', '2233', '3231', '3222', '3213', '2332', '3330', '2323', '3321', '3312', '3303', '3133', '3232', '3223', '2333', '3331', '3322', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}
Starting at: 2
Tenant_nb: 2, maxTenants: 2
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 121.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc5828910>, <src.sla.WorkerConf object at 0x7fabc58286d0>, <src.sla.WorkerConf object at 0x7fabc5828410>, <src.sla.WorkerConf object at 0x7fabc5828610>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_2
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
4
SCALE DOWN DIFF
Rescaling worker 3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 2, 'memory': 2}
{'cpu': 3, 'memory': 2}
6
4
2
3
Moving filtered samples in sorted combinations after the window
['0030', '0021', '0012', '1010', '0120', '1001', '0111', '0102', '1100', '0210', '0201', '0031', '0300', '0022', '1020', '0130', '0013', '1011', '0121', '1002', '2000', '0112', '1110', '0220', '0103', '1101', '0211', '0202', '1200', '0310', '0032', '1030', '0301', '0023', '1021', '0131', '1012', '2010', '0122', '1120', '0230', '1003', '2001', '0113', '1111', '0221', '1102', '2100', '0212', '1210', '0320', '0203', '1201', '0311', '0033', '1031', '0302', '1300', '1022', '2020', '0132', '1130', '1013', '2011', '0123', '1121', '0231', '2002', '3000', '1112', '2110', '0222', '1220', '0330', '1103', '2101', '0213', '1211', '0321', '1202', '2200', '0312', '1310', '1032', '2030', '0303', '1301', '1023', '2021', '0133', '1131', '2012', '3010', '1122', '2120', '0232', '1230', '2003', '3001', '1113', '2111', '0223', '1221', '0331', '2102', '3100', '1212', '2210', '0322', '1320', '1203', '2201', '0313', '1311', '1033', '2031', '1302', '2300', '2022', '3020', '1132', '2130', '2013', '3011', '1123', '2121', '0233', '1231', '3002', '2112', '3110', '1222', '2220', '0332', '1330', '2103', '3101', '1213', '2211', '0323', '1321', '2202', '3200', '1312', '2310', '2032', '3030', '1303', '2301', '2023', '3021', '1133', '2131', '3012', '2122', '3120', '1232', '2230', '3003', '2113', '3111', '1223', '2221', '0333', '1331', '3102', '2212', '3210', '1322', '2320', '2203', '3201', '1313', '2311', '2033', '3031', '2302', '3300', '3022', '2132', '3130', '3013', '2123', '3121', '1233', '2231', '3112', '2222', '3220', '1332', '2330', '3103', '2213', '3211', '1323', '2321', '3202', '2312', '3310', '3032', '2303', '3301', '3023', '2133', '3131', '3122', '2232', '3230', '3113', '2223', '3221', '1333', '2331', '3212', '2322', '3320', '3203', '2313', '3311', '3033', '3302', '3132', '3123', '2233', '3231', '3222', '2332', '3330', '3213', '2323', '3321', '3312', '3303', '3133', '3232', '3223', '2333', '3331', '3322', '3313', '3233', '3332', '3323', '3333']
Filtering from index 2 with window 10
Starting at index 2 with window 10
[0, 0, 1, 2]
not removed
[1, 0, 1, 0]
SCALING INDEX = 2
removed
[0, 1, 2, 0]
SCALING INDEX = 2
removed
[1, 0, 0, 1]
SCALING INDEX = 2
removed
[0, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 1, 0, 2]
SCALING INDEX = 2
removed
[1, 1, 0, 0]
SCALING INDEX = 2
removed
[0, 2, 1, 0]
SCALING INDEX = 2
removed
[0, 2, 0, 1]
SCALING INDEX = 2
removed
[0, 0, 3, 1]
SCALING INDEX = 2
removed
Going to 2 tenants
Going to 3 tenants
[0, 0, 1, 2]
SCALING INDEX = 2
removed
Starting at index 12 with window 10
[0, 0, 3, 1]
SCALING INDEX = 2
removed
[0, 0, 2, 2]
SCALING INDEX = 2
removed
[1, 0, 2, 0]
SCALING INDEX = 2
removed
[0, 1, 3, 0]
SCALING INDEX = 2
removed
[0, 0, 1, 3]
SCALING INDEX = 2
removed
[1, 0, 1, 1]
SCALING INDEX = 2
removed
[0, 1, 2, 1]
SCALING INDEX = 2
removed
[1, 0, 0, 2]
SCALING INDEX = 2
removed
[2, 0, 0, 0]
SCALING INDEX = 2
removed
[0, 1, 1, 2]
SCALING INDEX = 2
removed
Starting at index 22 with window 10
[1, 1, 1, 0]
SCALING INDEX = 2
removed
[0, 2, 2, 0]
SCALING INDEX = 2
removed
[0, 1, 0, 3]
SCALING INDEX = 2
removed
[1, 1, 0, 1]
SCALING INDEX = 2
removed
[0, 2, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 0, 2]
SCALING INDEX = 2
removed
[1, 2, 0, 0]
SCALING INDEX = 2
removed
[0, 3, 1, 0]
SCALING INDEX = 2
removed
[0, 0, 3, 2]
SCALING INDEX = 2
removed
[1, 0, 3, 0]
SCALING INDEX = 2
removed
Starting at index 32 with window 10
[0, 3, 0, 1]
SCALING INDEX = 2
removed
[0, 0, 2, 3]
SCALING INDEX = 2
removed
[1, 0, 2, 1]
SCALING INDEX = 2
removed
[0, 1, 3, 1]
SCALING INDEX = 2
removed
[1, 0, 1, 2]
SCALING INDEX = 2
removed
[2, 0, 1, 0]
SCALING INDEX = 2
removed
[0, 1, 2, 2]
SCALING INDEX = 2
removed
[1, 1, 2, 0]
SCALING INDEX = 2
removed
[0, 2, 3, 0]
SCALING INDEX = 2
removed
[1, 0, 0, 3]
SCALING INDEX = 2
removed
Starting at index 42 with window 10
[2, 0, 0, 1]
SCALING INDEX = 2
removed
[0, 1, 1, 3]
SCALING INDEX = 2
removed
[1, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 2, 1]
SCALING INDEX = 2
removed
[1, 1, 0, 2]
SCALING INDEX = 2
removed
[2, 1, 0, 0]
SCALING INDEX = 2
removed
[0, 2, 1, 2]
SCALING INDEX = 2
removed
[1, 2, 1, 0]
SCALING INDEX = 2
removed
[0, 3, 2, 0]
SCALING INDEX = 2
removed
[0, 2, 0, 3]
SCALING INDEX = 2
removed
Starting at index 52 with window 10
[1, 2, 0, 1]
SCALING INDEX = 2
removed
[0, 3, 1, 1]
SCALING INDEX = 2
removed
[0, 0, 3, 3]
SCALING INDEX = 2
removed
[1, 0, 3, 1]
SCALING INDEX = 2
removed
[0, 3, 0, 2]
SCALING INDEX = 2
removed
[1, 3, 0, 0]
SCALING INDEX = 2
removed
[1, 0, 2, 2]
SCALING INDEX = 2
removed
[2, 0, 2, 0]
SCALING INDEX = 2
removed
[0, 1, 3, 2]
SCALING INDEX = 2
removed
[1, 1, 3, 0]
SCALING INDEX = 2
removed
Starting at index 62 with window 10
[1, 0, 1, 3]
SCALING INDEX = 2
removed
[2, 0, 1, 1]
SCALING INDEX = 2
removed
[0, 1, 2, 3]
SCALING INDEX = 2
removed
[1, 1, 2, 1]
SCALING INDEX = 2
removed
[0, 2, 3, 1]
SCALING INDEX = 2
removed
[2, 0, 0, 2]
SCALING INDEX = 2
removed
[3, 0, 0, 0]
SCALING INDEX = 2
removed
[1, 1, 1, 2]
SCALING INDEX = 2
removed
[2, 1, 1, 0]
SCALING INDEX = 2
removed
[0, 2, 2, 2]
SCALING INDEX = 2
removed
Starting at index 72 with window 10
[1, 2, 2, 0]
SCALING INDEX = 2
removed
[0, 3, 3, 0]
SCALING INDEX = 2
removed
[1, 1, 0, 3]
SCALING INDEX = 2
removed
[2, 1, 0, 1]
SCALING INDEX = 2
removed
[0, 2, 1, 3]
SCALING INDEX = 2
removed
[1, 2, 1, 1]
SCALING INDEX = 2
removed
[0, 3, 2, 1]
SCALING INDEX = 2
removed
[1, 2, 0, 2]
SCALING INDEX = 2
removed
[2, 2, 0, 0]
SCALING INDEX = 2
removed
[0, 3, 1, 2]
SCALING INDEX = 2
removed
Starting at index 82 with window 10
[1, 3, 1, 0]
SCALING INDEX = 2
removed
[1, 0, 3, 2]
SCALING INDEX = 2
removed
[2, 0, 3, 0]
SCALING INDEX = 2
removed
[0, 3, 0, 3]
SCALING INDEX = 2
removed
[1, 3, 0, 1]
SCALING INDEX = 2
removed
[1, 0, 2, 3]
SCALING INDEX = 2
removed
[2, 0, 2, 1]
SCALING INDEX = 2
removed
[0, 1, 3, 3]
SCALING INDEX = 2
removed
[1, 1, 3, 1]
SCALING INDEX = 2
removed
[2, 0, 1, 2]
SCALING INDEX = 2
removed
Starting at index 92 with window 10
[3, 0, 1, 0]
SCALING INDEX = 2
removed
[1, 1, 2, 2]
SCALING INDEX = 2
removed
[2, 1, 2, 0]
SCALING INDEX = 2
removed
[0, 2, 3, 2]
SCALING INDEX = 2
removed
[1, 2, 3, 0]
SCALING INDEX = 2
removed
[2, 0, 0, 3]
SCALING INDEX = 2
removed
[3, 0, 0, 1]
SCALING INDEX = 2
removed
[1, 1, 1, 3]
SCALING INDEX = 2
removed
[2, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 2, 3]
SCALING INDEX = 2
removed
Starting at index 102 with window 10
[1, 2, 2, 1]
SCALING INDEX = 2
removed
[0, 3, 3, 1]
SCALING INDEX = 2
removed
[2, 1, 0, 2]
SCALING INDEX = 2
removed
[3, 1, 0, 0]
SCALING INDEX = 2
removed
[1, 2, 1, 2]
SCALING INDEX = 2
removed
[2, 2, 1, 0]
SCALING INDEX = 2
removed
[0, 3, 2, 2]
SCALING INDEX = 2
removed
[1, 3, 2, 0]
SCALING INDEX = 2
removed
[1, 2, 0, 3]
SCALING INDEX = 2
removed
[2, 2, 0, 1]
SCALING INDEX = 2
removed
Starting at index 112 with window 10
[0, 3, 1, 3]
SCALING INDEX = 2
removed
[1, 3, 1, 1]
SCALING INDEX = 2
removed
[1, 0, 3, 3]
SCALING INDEX = 2
removed
[2, 0, 3, 1]
SCALING INDEX = 2
removed
[1, 3, 0, 2]
SCALING INDEX = 2
removed
[2, 3, 0, 0]
SCALING INDEX = 2
removed
[2, 0, 2, 2]
SCALING INDEX = 2
removed
[3, 0, 2, 0]
SCALING INDEX = 2
removed
[1, 1, 3, 2]
SCALING INDEX = 2
removed
[2, 1, 3, 0]
SCALING INDEX = 2
removed
Starting at index 122 with window 10
[2, 0, 1, 3]
SCALING INDEX = 2
removed
[3, 0, 1, 1]
SCALING INDEX = 2
removed
[1, 1, 2, 3]
SCALING INDEX = 2
removed
[2, 1, 2, 1]
SCALING INDEX = 2
removed
[0, 2, 3, 3]
SCALING INDEX = 2
removed
[1, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 0, 0, 2]
SCALING INDEX = 2
removed
[2, 1, 1, 2]
SCALING INDEX = 2
removed
[3, 1, 1, 0]
SCALING INDEX = 2
removed
[1, 2, 2, 2]
SCALING INDEX = 2
removed
Starting at index 132 with window 10
[2, 2, 2, 0]
SCALING INDEX = 2
removed
[0, 3, 3, 2]
SCALING INDEX = 2
removed
[1, 3, 3, 0]
SCALING INDEX = 2
removed
[2, 1, 0, 3]
SCALING INDEX = 2
removed
[3, 1, 0, 1]
SCALING INDEX = 2
removed
[1, 2, 1, 3]
SCALING INDEX = 2
removed
[2, 2, 1, 1]
SCALING INDEX = 2
removed
[0, 3, 2, 3]
SCALING INDEX = 2
removed
[1, 3, 2, 1]
SCALING INDEX = 2
removed
[2, 2, 0, 2]
SCALING INDEX = 2
removed
Starting at index 142 with window 10
[3, 2, 0, 0]
SCALING INDEX = 2
removed
[1, 3, 1, 2]
SCALING INDEX = 2
removed
[2, 3, 1, 0]
SCALING INDEX = 2
removed
[2, 0, 3, 2]
SCALING INDEX = 2
removed
[3, 0, 3, 0]
SCALING INDEX = 2
removed
[1, 3, 0, 3]
SCALING INDEX = 2
removed
[2, 3, 0, 1]
SCALING INDEX = 2
removed
[2, 0, 2, 3]
SCALING INDEX = 2
removed
[3, 0, 2, 1]
SCALING INDEX = 2
removed
[1, 1, 3, 3]
SCALING INDEX = 2
removed
Starting at index 152 with window 10
[2, 1, 3, 1]
SCALING INDEX = 2
removed
[3, 0, 1, 2]
SCALING INDEX = 2
removed
[2, 1, 2, 2]
SCALING INDEX = 2
removed
[3, 1, 2, 0]
SCALING INDEX = 2
removed
[1, 2, 3, 2]
SCALING INDEX = 2
removed
[2, 2, 3, 0]
SCALING INDEX = 2
removed
[3, 0, 0, 3]
SCALING INDEX = 2
removed
[2, 1, 1, 3]
SCALING INDEX = 2
removed
[3, 1, 1, 1]
SCALING INDEX = 2
removed
[1, 2, 2, 3]
SCALING INDEX = 2
removed
Starting at index 162 with window 10
[2, 2, 2, 1]
SCALING INDEX = 2
removed
[0, 3, 3, 3]
SCALING INDEX = 2
removed
[1, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 0, 2]
SCALING INDEX = 2
removed
[2, 2, 1, 2]
SCALING INDEX = 2
removed
[3, 2, 1, 0]
SCALING INDEX = 2
removed
[1, 3, 2, 2]
SCALING INDEX = 2
removed
[2, 3, 2, 0]
SCALING INDEX = 2
removed
[2, 2, 0, 3]
SCALING INDEX = 2
removed
[3, 2, 0, 1]
SCALING INDEX = 2
removed
Starting at index 172 with window 10
[1, 3, 1, 3]
SCALING INDEX = 2
removed
[2, 3, 1, 1]
SCALING INDEX = 2
removed
[2, 0, 3, 3]
SCALING INDEX = 2
removed
[3, 0, 3, 1]
SCALING INDEX = 2
removed
[2, 3, 0, 2]
SCALING INDEX = 2
removed
[3, 3, 0, 0]
SCALING INDEX = 2
removed
[3, 0, 2, 2]
SCALING INDEX = 2
removed
[2, 1, 3, 2]
SCALING INDEX = 2
removed
[3, 1, 3, 0]
SCALING INDEX = 2
removed
[3, 0, 1, 3]
SCALING INDEX = 2
removed
Starting at index 182 with window 10
[2, 1, 2, 3]
SCALING INDEX = 2
removed
[3, 1, 2, 1]
SCALING INDEX = 2
removed
[1, 2, 3, 3]
SCALING INDEX = 2
removed
[2, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 1, 2]
SCALING INDEX = 2
removed
[2, 2, 2, 2]
SCALING INDEX = 2
removed
[3, 2, 2, 0]
SCALING INDEX = 2
removed
[1, 3, 3, 2]
SCALING INDEX = 2
removed
[2, 3, 3, 0]
SCALING INDEX = 2
removed
[3, 1, 0, 3]
SCALING INDEX = 2
removed
Starting at index 192 with window 10
[2, 2, 1, 3]
SCALING INDEX = 2
removed
[3, 2, 1, 1]
SCALING INDEX = 2
removed
[1, 3, 2, 3]
SCALING INDEX = 2
removed
[2, 3, 2, 1]
SCALING INDEX = 2
removed
[3, 2, 0, 2]
SCALING INDEX = 2
removed
[2, 3, 1, 2]
SCALING INDEX = 2
removed
[3, 3, 1, 0]
SCALING INDEX = 2
removed
[3, 0, 3, 2]
SCALING INDEX = 2
removed
[2, 3, 0, 3]
SCALING INDEX = 2
removed
[3, 3, 0, 1]
SCALING INDEX = 2
removed
Starting at index 202 with window 10
[3, 0, 2, 3]
SCALING INDEX = 2
removed
[2, 1, 3, 3]
SCALING INDEX = 2
removed
[3, 1, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 2, 2]
SCALING INDEX = 2
removed
[2, 2, 3, 2]
SCALING INDEX = 2
removed
[3, 2, 3, 0]
SCALING INDEX = 2
removed
[3, 1, 1, 3]
SCALING INDEX = 2
removed
[2, 2, 2, 3]
SCALING INDEX = 2
removed
[3, 2, 2, 1]
SCALING INDEX = 2
removed
[1, 3, 3, 3]
SCALING INDEX = 2
removed
Starting at index 212 with window 10
[2, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 2, 1, 2]
SCALING INDEX = 2
removed
[2, 3, 2, 2]
SCALING INDEX = 2
removed
[3, 3, 2, 0]
SCALING INDEX = 2
removed
[3, 2, 0, 3]
SCALING INDEX = 2
removed
[2, 3, 1, 3]
SCALING INDEX = 2
removed
[3, 3, 1, 1]
SCALING INDEX = 2
removed
[3, 0, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 0, 2]
SCALING INDEX = 2
removed
[3, 1, 3, 2]
SCALING INDEX = 2
removed
Starting at index 222 with window 10
[3, 1, 2, 3]
SCALING INDEX = 2
removed
[2, 2, 3, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 2, 2, 2]
SCALING INDEX = 2
removed
[2, 3, 3, 2]
SCALING INDEX = 2
removed
[3, 3, 3, 0]
SCALING INDEX = 2
removed
[3, 2, 1, 3]
SCALING INDEX = 2
removed
[2, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 1]
SCALING INDEX = 2
removed
[3, 3, 1, 2]
SCALING INDEX = 2
removed
Starting at index 232 with window 10
[3, 3, 0, 3]
SCALING INDEX = 2
removed
[3, 1, 3, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 2]
SCALING INDEX = 2
removed
[3, 2, 2, 3]
SCALING INDEX = 2
removed
[2, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 3, 2, 2]
SCALING INDEX = 2
removed
[3, 3, 1, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 2]
SCALING INDEX = 2
removed
Starting at index 242 with window 10
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
Starting at index 252 with window 10
No config exists that meets all filtering constraints
Recursive down scaling disabled
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
4
Passing over worker in previously failed scaling
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc5828910>, <src.sla.WorkerConf object at 0x7fabc58286d0>, <src.sla.WorkerConf object at 0x7fabc5828410>, <src.sla.WorkerConf object at 0x7fabc5828610>]], [{}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4d29750>, <src.sla.WorkerConf object at 0x7fabc4d29b50>, <src.sla.WorkerConf object at 0x7fabc7451f50>, <src.sla.WorkerConf object at 0x7fabc7451a90>]]]
Conf 0:
121
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;1;2 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [2, {'cpu': [1], 'memory': [0]}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 2 with window 1
[0, 0, 1, 2]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
Getting next batch of experiments for 1 tenants
Moving filtered samples in sorted combinations after the window
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '1001', '0021', '0030', '1010', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 6
Starting at index 0 with window 6
Going to 2 tenants
[0, 0, 1, 1]
not removed
[0, 0, 2, 0]
removed
[1, 0, 0, 0]
removed
[0, 1, 0, 1]
removed
[0, 1, 1, 0]
removed
[0, 2, 0, 0]
removed
Going to 3 tenants
[0, 0, 1, 1]
not removed
Going to 4 tenants
[0, 0, 1, 1]
not removed
Going to 5 tenants
[0, 0, 1, 1]
removed
Starting at index 6 with window 6
Going to 2 tenants
[0, 2, 0, 0]
removed
[0, 0, 1, 2]
not removed
[1, 0, 0, 1]
removed
[0, 0, 2, 1]
not removed
[0, 0, 3, 0]
removed
[1, 0, 1, 0]
removed
Going to 3 tenants
[0, 0, 1, 2]
not removed
[0, 0, 2, 1]
not removed
Going to 4 tenants
[0, 0, 1, 2]
not removed
[0, 0, 2, 1]
not removed
Going to 5 tenants
[0, 0, 1, 2]
not removed
[0, 0, 2, 1]
removed
Going to 6 tenants
[0, 0, 1, 2]
not removed
Going to 7 tenants
[0, 0, 1, 2]
not removed
Going to 8 tenants
[0, 0, 1, 2]
not removed
Going to 9 tenants
[0, 0, 1, 2]
not removed
Going to 10 tenants
[0, 0, 1, 2]
not removed
Going to 11 tenants
Starting at index 6 with window 1
['0011', '0003', '0020', '1000', '0101', '0110', '0012', '0200', '0021', '0102', '1001', '0111', '0030', '1010', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 0 1 2
min_conf_dec: 6
6
[0, 0, 1, 2]
{'0': [[0, 1, 2]]}
{'0': [[1, 2, 0]]}
{'1': [[2, 0, 0]]}
{'2': [[0, 0, 1]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 2]]}
Elementstr: [[0,0,1,2]]
Min replicacount:0 0 1 2
Max replicacount:0 0 1 2
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '121', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '130', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;1;2:
Returning adaptive scaler for  1 tenants and 0;0;1;2:
1
255
['0011', '0003', '0020', '1000', '0101', '0110', '0012', '0200', '0021', '0102', '1001', '0111', '0030', '1010', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}
Starting at: 6
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 121
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 121
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 121.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4d29b10>, <src.sla.WorkerConf object at 0x7fabc4d291d0>, <src.sla.WorkerConf object at 0x7fabc4d29e10>, <src.sla.WorkerConf object at 0x7fabc4d295d0>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_2
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4d29b10>, <src.sla.WorkerConf object at 0x7fabc4d291d0>, <src.sla.WorkerConf object at 0x7fabc4d29e10>, <src.sla.WorkerConf object at 0x7fabc4d295d0>]]]
Conf 0:
121
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;1;2 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '121', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 7 with window 1
[0, 0, 1, 2]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  1 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '121', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '121', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '130', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;1;2:
Returning adaptive scaler for  1 tenants and 0;0;1;2:
1
255
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '0021', '1001', '0030', '1010', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}
Starting at: 7
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 116.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4d64e50>, <src.sla.WorkerConf object at 0x7fabc4d64d90>, <src.sla.WorkerConf object at 0x7fabc7451c50>, <src.sla.WorkerConf object at 0x7fabc7451bd0>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_2
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4d64e50>, <src.sla.WorkerConf object at 0x7fabc4d64d90>, <src.sla.WorkerConf object at 0x7fabc7451c50>, <src.sla.WorkerConf object at 0x7fabc7451bd0>]]]
Conf 0:
116
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;1;2 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 7 with window 1
[0, 0, 1, 2]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  1 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '116', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '121', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '130', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;1;2:
Returning adaptive scaler for  1 tenants and 0;0;1;2:
1
255
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '0021', '1001', '0030', '1010', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '123', 'Successfull': 'true'}
Starting at: 7
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '123', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '123', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '123', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '123', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 123.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '123', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc745f250>, <src.sla.WorkerConf object at 0x7fabc745f050>, <src.sla.WorkerConf object at 0x7fabc745f390>, <src.sla.WorkerConf object at 0x7fabc745f350>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_2
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '123', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc745f250>, <src.sla.WorkerConf object at 0x7fabc745f050>, <src.sla.WorkerConf object at 0x7fabc745f390>, <src.sla.WorkerConf object at 0x7fabc745f350>]]]
Conf 0:
123
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;1;2 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '123', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 7 with window 1
[0, 0, 1, 2]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  1 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '123', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '121', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '130', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;1;2:
Returning adaptive scaler for  1 tenants and 0;0;1;2:
1
255
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '0021', '1001', '0030', '1010', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}
Starting at: 7
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 118.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4d573d0>, <src.sla.WorkerConf object at 0x7fabc4d57f50>, <src.sla.WorkerConf object at 0x7fabc4d57590>, <src.sla.WorkerConf object at 0x7fabc4d576d0>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_2
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
SCALE DOWN DIFF
Rescaling worker 4
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
6
4
3
2
Moving filtered samples in sorted combinations after the window
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '0021', '1001', '0102', '0030', '1010', '0111', '0120', '1100', '0201', '0210', '0013', '0300', '0022', '1002', '0103', '0031', '1011', '0112', '1020', '2000', '0121', '1101', '0202', '0130', '1110', '0211', '0220', '1200', '0301', '0023', '1003', '0310', '0032', '1012', '0113', '1021', '2001', '0122', '1102', '0203', '1030', '2010', '0131', '1111', '0212', '1120', '2100', '0221', '1201', '0302', '0230', '1210', '0311', '0033', '1013', '0320', '1300', '1022', '2002', '0123', '1103', '1031', '2011', '0132', '1112', '0213', '2020', '3000', '1121', '2101', '0222', '1202', '0303', '1130', '2110', '0231', '1211', '0312', '1220', '2200', '0321', '1301', '1023', '2003', '0330', '1310', '1032', '2012', '0133', '1113', '2021', '3001', '1122', '2102', '0223', '1203', '2030', '3010', '1131', '2111', '0232', '1212', '0313', '2120', '3100', '1221', '2201', '0322', '1302', '1230', '2210', '0331', '1311', '1033', '2013', '1320', '2300', '2022', '3002', '1123', '2103', '2031', '3011', '1132', '2112', '0233', '1213', '3020', '2121', '3101', '1222', '2202', '0323', '1303', '2130', '3110', '1231', '2211', '0332', '1312', '2220', '3200', '1321', '2301', '2023', '3003', '1330', '2310', '2032', '3012', '1133', '2113', '3021', '2122', '3102', '1223', '2203', '3030', '2131', '3111', '1232', '2212', '0333', '1313', '3120', '2221', '3201', '1322', '2302', '2230', '3210', '1331', '2311', '2033', '3013', '2320', '3300', '3022', '2123', '3103', '3031', '2132', '3112', '1233', '2213', '3121', '2222', '3202', '1323', '2303', '3130', '2231', '3211', '1332', '2312', '3220', '2321', '3301', '3023', '2330', '3310', '3032', '2133', '3113', '3122', '2223', '3203', '3131', '2232', '3212', '1333', '2313', '3221', '2322', '3302', '3230', '2331', '3311', '3033', '3320', '3123', '3132', '2233', '3213', '3222', '2323', '3303', '3231', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 7 with window 10
Starting at index 7 with window 10
Going to 2 tenants
[0, 0, 1, 2]
SCALING INDEX = 3
removed
[0, 0, 2, 1]
SCALING INDEX = 3
removed
[1, 0, 0, 1]
SCALING INDEX = 3
removed
[0, 1, 0, 2]
SCALING INDEX = 3
removed
[0, 0, 3, 0]
SCALING INDEX = 3
removed
[1, 0, 1, 0]
SCALING INDEX = 3
removed
[0, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 2, 0]
SCALING INDEX = 3
removed
[1, 1, 0, 0]
SCALING INDEX = 3
removed
[0, 2, 0, 1]
SCALING INDEX = 3
removed
Starting at index 17 with window 10
Going to 2 tenants
[0, 2, 1, 0]
SCALING INDEX = 3
removed
[0, 0, 1, 3]
SCALING INDEX = 3
removed
[0, 3, 0, 0]
SCALING INDEX = 3
removed
[0, 0, 2, 2]
SCALING INDEX = 3
removed
[1, 0, 0, 2]
SCALING INDEX = 3
removed
[0, 1, 0, 3]
SCALING INDEX = 3
removed
[0, 0, 3, 1]
SCALING INDEX = 3
removed
[1, 0, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 1, 2]
SCALING INDEX = 3
removed
[1, 0, 2, 0]
SCALING INDEX = 3
removed
Starting at index 27 with window 10
Going to 2 tenants
[2, 0, 0, 0]
SCALING INDEX = 3
removed
[0, 1, 2, 1]
SCALING INDEX = 3
removed
[1, 1, 0, 1]
SCALING INDEX = 3
removed
[0, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 1, 3, 0]
SCALING INDEX = 3
removed
[1, 1, 1, 0]
SCALING INDEX = 3
removed
[0, 2, 1, 1]
SCALING INDEX = 3
removed
[0, 2, 2, 0]
SCALING INDEX = 3
removed
[1, 2, 0, 0]
SCALING INDEX = 3
removed
[0, 3, 0, 1]
SCALING INDEX = 3
removed
Starting at index 37 with window 10
Going to 2 tenants
[0, 0, 2, 3]
SCALING INDEX = 3
removed
[1, 0, 0, 3]
SCALING INDEX = 3
removed
[0, 3, 1, 0]
SCALING INDEX = 3
removed
[0, 0, 3, 2]
SCALING INDEX = 3
removed
[1, 0, 1, 2]
SCALING INDEX = 3
removed
[0, 1, 1, 3]
SCALING INDEX = 3
removed
[1, 0, 2, 1]
SCALING INDEX = 3
removed
[2, 0, 0, 1]
SCALING INDEX = 3
removed
[0, 1, 2, 2]
SCALING INDEX = 3
removed
[1, 1, 0, 2]
SCALING INDEX = 3
removed
Starting at index 47 with window 10
Going to 2 tenants
[0, 2, 0, 3]
SCALING INDEX = 3
removed
[1, 0, 3, 0]
SCALING INDEX = 3
removed
[2, 0, 1, 0]
SCALING INDEX = 3
removed
[0, 1, 3, 1]
SCALING INDEX = 3
removed
[1, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 2, 1, 2]
SCALING INDEX = 3
removed
[1, 1, 2, 0]
SCALING INDEX = 3
removed
[2, 1, 0, 0]
SCALING INDEX = 3
removed
[0, 2, 2, 1]
SCALING INDEX = 3
removed
[1, 2, 0, 1]
SCALING INDEX = 3
removed
Starting at index 57 with window 10
Going to 2 tenants
[0, 3, 0, 2]
SCALING INDEX = 3
removed
[0, 2, 3, 0]
SCALING INDEX = 3
removed
[1, 2, 1, 0]
SCALING INDEX = 3
removed
[0, 3, 1, 1]
SCALING INDEX = 3
removed
[0, 0, 3, 3]
SCALING INDEX = 3
removed
[1, 0, 1, 3]
SCALING INDEX = 3
removed
[0, 3, 2, 0]
SCALING INDEX = 3
removed
[1, 3, 0, 0]
SCALING INDEX = 3
removed
[1, 0, 2, 2]
SCALING INDEX = 3
removed
[2, 0, 0, 2]
SCALING INDEX = 3
removed
Starting at index 67 with window 10
Going to 2 tenants
[0, 1, 2, 3]
SCALING INDEX = 3
removed
[1, 1, 0, 3]
SCALING INDEX = 3
removed
[1, 0, 3, 1]
SCALING INDEX = 3
removed
[2, 0, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 3, 2]
SCALING INDEX = 3
removed
[1, 1, 1, 2]
SCALING INDEX = 3
removed
[0, 2, 1, 3]
SCALING INDEX = 3
removed
[2, 0, 2, 0]
SCALING INDEX = 3
removed
[3, 0, 0, 0]
SCALING INDEX = 3
removed
[1, 1, 2, 1]
SCALING INDEX = 3
removed
Starting at index 77 with window 10
Going to 2 tenants
[2, 1, 0, 1]
SCALING INDEX = 3
removed
[0, 2, 2, 2]
SCALING INDEX = 3
removed
[1, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 3, 0, 3]
SCALING INDEX = 3
removed
[1, 1, 3, 0]
SCALING INDEX = 3
removed
[2, 1, 1, 0]
SCALING INDEX = 3
removed
[0, 2, 3, 1]
SCALING INDEX = 3
removed
[1, 2, 1, 1]
SCALING INDEX = 3
removed
[0, 3, 1, 2]
SCALING INDEX = 3
removed
[1, 2, 2, 0]
SCALING INDEX = 3
removed
Starting at index 87 with window 10
Going to 2 tenants
[2, 2, 0, 0]
SCALING INDEX = 3
removed
[0, 3, 2, 1]
SCALING INDEX = 3
removed
[1, 3, 0, 1]
SCALING INDEX = 3
removed
[1, 0, 2, 3]
SCALING INDEX = 3
removed
[2, 0, 0, 3]
SCALING INDEX = 3
removed
[0, 3, 3, 0]
SCALING INDEX = 3
removed
[1, 3, 1, 0]
SCALING INDEX = 3
removed
[1, 0, 3, 2]
SCALING INDEX = 3
removed
[2, 0, 1, 2]
SCALING INDEX = 3
removed
[0, 1, 3, 3]
SCALING INDEX = 3
removed
Starting at index 97 with window 10
Going to 2 tenants
[1, 1, 1, 3]
SCALING INDEX = 3
removed
[2, 0, 2, 1]
SCALING INDEX = 3
removed
[3, 0, 0, 1]
SCALING INDEX = 3
removed
[1, 1, 2, 2]
SCALING INDEX = 3
removed
[2, 1, 0, 2]
SCALING INDEX = 3
removed
[0, 2, 2, 3]
SCALING INDEX = 3
removed
[1, 2, 0, 3]
SCALING INDEX = 3
removed
[2, 0, 3, 0]
SCALING INDEX = 3
removed
[3, 0, 1, 0]
SCALING INDEX = 3
removed
[1, 1, 3, 1]
SCALING INDEX = 3
removed
Starting at index 107 with window 10
Going to 2 tenants
[2, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 2, 3, 2]
SCALING INDEX = 3
removed
[1, 2, 1, 2]
SCALING INDEX = 3
removed
[0, 3, 1, 3]
SCALING INDEX = 3
removed
[2, 1, 2, 0]
SCALING INDEX = 3
removed
[3, 1, 0, 0]
SCALING INDEX = 3
removed
[1, 2, 2, 1]
SCALING INDEX = 3
removed
[2, 2, 0, 1]
SCALING INDEX = 3
removed
[0, 3, 2, 2]
SCALING INDEX = 3
removed
[1, 3, 0, 2]
SCALING INDEX = 3
removed
Starting at index 117 with window 10
Going to 2 tenants
[1, 2, 3, 0]
SCALING INDEX = 3
removed
[2, 2, 1, 0]
SCALING INDEX = 3
removed
[0, 3, 3, 1]
SCALING INDEX = 3
removed
[1, 3, 1, 1]
SCALING INDEX = 3
removed
[1, 0, 3, 3]
SCALING INDEX = 3
removed
[2, 0, 1, 3]
SCALING INDEX = 3
removed
[1, 3, 2, 0]
SCALING INDEX = 3
removed
[2, 3, 0, 0]
SCALING INDEX = 3
removed
[2, 0, 2, 2]
SCALING INDEX = 3
removed
[3, 0, 0, 2]
SCALING INDEX = 3
removed
Starting at index 127 with window 10
Going to 2 tenants
[1, 1, 2, 3]
SCALING INDEX = 3
removed
[2, 1, 0, 3]
SCALING INDEX = 3
removed
[2, 0, 3, 1]
SCALING INDEX = 3
removed
[3, 0, 1, 1]
SCALING INDEX = 3
removed
[1, 1, 3, 2]
SCALING INDEX = 3
removed
[2, 1, 1, 2]
SCALING INDEX = 3
removed
[0, 2, 3, 3]
SCALING INDEX = 3
removed
[1, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 0, 2, 0]
SCALING INDEX = 3
removed
[2, 1, 2, 1]
SCALING INDEX = 3
removed
Starting at index 137 with window 10
Going to 2 tenants
[3, 1, 0, 1]
SCALING INDEX = 3
removed
[1, 2, 2, 2]
SCALING INDEX = 3
removed
[2, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 3, 2, 3]
SCALING INDEX = 3
removed
[1, 3, 0, 3]
SCALING INDEX = 3
removed
[2, 1, 3, 0]
SCALING INDEX = 3
removed
[3, 1, 1, 0]
SCALING INDEX = 3
removed
[1, 2, 3, 1]
SCALING INDEX = 3
removed
[2, 2, 1, 1]
SCALING INDEX = 3
removed
[0, 3, 3, 2]
SCALING INDEX = 3
removed
Starting at index 147 with window 10
Going to 2 tenants
[1, 3, 1, 2]
SCALING INDEX = 3
removed
[2, 2, 2, 0]
SCALING INDEX = 3
removed
[3, 2, 0, 0]
SCALING INDEX = 3
removed
[1, 3, 2, 1]
SCALING INDEX = 3
removed
[2, 3, 0, 1]
SCALING INDEX = 3
removed
[2, 0, 2, 3]
SCALING INDEX = 3
removed
[3, 0, 0, 3]
SCALING INDEX = 3
removed
[1, 3, 3, 0]
SCALING INDEX = 3
removed
[2, 3, 1, 0]
SCALING INDEX = 3
removed
[2, 0, 3, 2]
SCALING INDEX = 3
removed
Starting at index 157 with window 10
Going to 2 tenants
[3, 0, 1, 2]
SCALING INDEX = 3
removed
[1, 1, 3, 3]
SCALING INDEX = 3
removed
[2, 1, 1, 3]
SCALING INDEX = 3
removed
[3, 0, 2, 1]
SCALING INDEX = 3
removed
[2, 1, 2, 2]
SCALING INDEX = 3
removed
[3, 1, 0, 2]
SCALING INDEX = 3
removed
[1, 2, 2, 3]
SCALING INDEX = 3
removed
[2, 2, 0, 3]
SCALING INDEX = 3
removed
[3, 0, 3, 0]
SCALING INDEX = 3
removed
[2, 1, 3, 1]
SCALING INDEX = 3
removed
Starting at index 167 with window 10
Going to 2 tenants
[3, 1, 1, 1]
SCALING INDEX = 3
removed
[1, 2, 3, 2]
SCALING INDEX = 3
removed
[2, 2, 1, 2]
SCALING INDEX = 3
removed
[0, 3, 3, 3]
SCALING INDEX = 3
removed
[1, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 0]
SCALING INDEX = 3
removed
[2, 2, 2, 1]
SCALING INDEX = 3
removed
[3, 2, 0, 1]
SCALING INDEX = 3
removed
[1, 3, 2, 2]
SCALING INDEX = 3
removed
[2, 3, 0, 2]
SCALING INDEX = 3
removed
Starting at index 177 with window 10
Going to 2 tenants
[2, 2, 3, 0]
SCALING INDEX = 3
removed
[3, 2, 1, 0]
SCALING INDEX = 3
removed
[1, 3, 3, 1]
SCALING INDEX = 3
removed
[2, 3, 1, 1]
SCALING INDEX = 3
removed
[2, 0, 3, 3]
SCALING INDEX = 3
removed
[3, 0, 1, 3]
SCALING INDEX = 3
removed
[2, 3, 2, 0]
SCALING INDEX = 3
removed
[3, 3, 0, 0]
SCALING INDEX = 3
removed
[3, 0, 2, 2]
SCALING INDEX = 3
removed
[2, 1, 2, 3]
SCALING INDEX = 3
removed
Starting at index 187 with window 10
Going to 2 tenants
[3, 1, 0, 3]
SCALING INDEX = 3
removed
[3, 0, 3, 1]
SCALING INDEX = 3
removed
[2, 1, 3, 2]
SCALING INDEX = 3
removed
[3, 1, 1, 2]
SCALING INDEX = 3
removed
[1, 2, 3, 3]
SCALING INDEX = 3
removed
[2, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 1]
SCALING INDEX = 3
removed
[2, 2, 2, 2]
SCALING INDEX = 3
removed
[3, 2, 0, 2]
SCALING INDEX = 3
removed
[1, 3, 2, 3]
SCALING INDEX = 3
removed
Starting at index 197 with window 10
Going to 2 tenants
[2, 3, 0, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 0]
SCALING INDEX = 3
removed
[2, 2, 3, 1]
SCALING INDEX = 3
removed
[3, 2, 1, 1]
SCALING INDEX = 3
removed
[1, 3, 3, 2]
SCALING INDEX = 3
removed
[2, 3, 1, 2]
SCALING INDEX = 3
removed
[3, 2, 2, 0]
SCALING INDEX = 3
removed
[2, 3, 2, 1]
SCALING INDEX = 3
removed
[3, 3, 0, 1]
SCALING INDEX = 3
removed
[3, 0, 2, 3]
SCALING INDEX = 3
removed
Starting at index 207 with window 10
Going to 2 tenants
[2, 3, 3, 0]
SCALING INDEX = 3
removed
[3, 3, 1, 0]
SCALING INDEX = 3
removed
[3, 0, 3, 2]
SCALING INDEX = 3
removed
[2, 1, 3, 3]
SCALING INDEX = 3
removed
[3, 1, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 2]
SCALING INDEX = 3
removed
[2, 2, 2, 3]
SCALING INDEX = 3
removed
[3, 2, 0, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 1]
SCALING INDEX = 3
removed
[2, 2, 3, 2]
SCALING INDEX = 3
removed
Starting at index 217 with window 10
Going to 2 tenants
[3, 2, 1, 2]
SCALING INDEX = 3
removed
[1, 3, 3, 3]
SCALING INDEX = 3
removed
[2, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 1]
SCALING INDEX = 3
removed
[2, 3, 2, 2]
SCALING INDEX = 3
removed
[3, 3, 0, 2]
SCALING INDEX = 3
removed
[3, 2, 3, 0]
SCALING INDEX = 3
removed
[2, 3, 3, 1]
SCALING INDEX = 3
removed
[3, 3, 1, 1]
SCALING INDEX = 3
removed
[3, 0, 3, 3]
SCALING INDEX = 3
removed
Starting at index 227 with window 10
Going to 2 tenants
[3, 3, 2, 0]
SCALING INDEX = 3
removed
[3, 1, 2, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 2]
SCALING INDEX = 3
removed
[2, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 2]
SCALING INDEX = 3
removed
[2, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 0, 3]
SCALING INDEX = 3
removed
[3, 2, 3, 1]
SCALING INDEX = 3
removed
[2, 3, 3, 2]
SCALING INDEX = 3
removed
Starting at index 237 with window 10
Going to 2 tenants
[3, 3, 1, 2]
SCALING INDEX = 3
removed
[3, 3, 2, 1]
SCALING INDEX = 3
removed
[3, 3, 3, 0]
SCALING INDEX = 3
removed
[3, 1, 3, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 3]
SCALING INDEX = 3
removed
[3, 2, 3, 2]
SCALING INDEX = 3
removed
[2, 3, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 2]
SCALING INDEX = 3
removed
[3, 3, 3, 1]
SCALING INDEX = 3
removed
Starting at index 247 with window 10
Going to 2 tenants
[3, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 3, 2]
SCALING INDEX = 3
removed
[3, 3, 3, 3]
SCALING INDEX = 3
removed
[3, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 3, 2]
SCALING INDEX = 3
removed
[3, 3, 3, 3]
SCALING INDEX = 3
removed
[3, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 3]
SCALING INDEX = 3
removed
Starting at index 257 with window 10
Going to 2 tenants
No config exists that meets all filtering constraints
Recursive down scaling disabled
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
Passing over worker in previously failed scaling
SCALE DOWN DIFF
Rescaling worker 3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 2, 'memory': 2}
{'cpu': 3, 'memory': 2}
Moving filtered samples in sorted combinations after the window
['0020', '0011', '1000', '0110', '0101', '0200', '0030', '0021', '0012', '1010', '0120', '0003', '1001', '0111', '0102', '1100', '0210', '0201', '0031', '0300', '0022', '1020', '0130', '0013', '1011', '0121', '1002', '0112', '2000', '1110', '0220', '0103', '1101', '0211', '0202', '1200', '0310', '0032', '1030', '0301', '0023', '1021', '0131', '1012', '0122', '2010', '1120', '0230', '1003', '0113', '2001', '1111', '0221', '1102', '0212', '2100', '1210', '0320', '0203', '1201', '0311', '0033', '1031', '0302', '1300', '1022', '0132', '2020', '1130', '1013', '0123', '2011', '1121', '0231', '2002', '1112', '3000', '0222', '2110', '1220', '0330', '1103', '0213', '2101', '1211', '0321', '1202', '0312', '2200', '1310', '1032', '2030', '0303', '1301', '1023', '0133', '2021', '1131', '2012', '1122', '3010', '0232', '2120', '1230', '2003', '1113', '3001', '0223', '2111', '1221', '0331', '2102', '1212', '3100', '0322', '2210', '1320', '1203', '0313', '2201', '1311', '1033', '2031', '1302', '2300', '2022', '1132', '3020', '2130', '2013', '1123', '3011', '0233', '2121', '1231', '3002', '2112', '1222', '3110', '0332', '2220', '1330', '2103', '1213', '3101', '0323', '2211', '1321', '2202', '1312', '3200', '2310', '2032', '3030', '1303', '2301', '2023', '1133', '3021', '2131', '3012', '2122', '1232', '3120', '2230', '3003', '2113', '1223', '3111', '0333', '2221', '1331', '3102', '2212', '1322', '3210', '2320', '2203', '1313', '3201', '2311', '2033', '3031', '2302', '3300', '3022', '2132', '3130', '3013', '2123', '1233', '3121', '2231', '3112', '2222', '1332', '3220', '2330', '3103', '2213', '1323', '3211', '2321', '3202', '2312', '3310', '3032', '2303', '3301', '3023', '2133', '3131', '3122', '2232', '3230', '3113', '2223', '1333', '3221', '2331', '3212', '2322', '3320', '3203', '2313', '3311', '3033', '3302', '3132', '3123', '2233', '3231', '3222', '2332', '3330', '3213', '2323', '3321', '3312', '3303', '3133', '3232', '3223', '2333', '3331', '3322', '3313', '3233', '3332', '3323', '3333']
Filtering from index 8 with window 10
Starting at index 8 with window 10
Going to 2 tenants
[0, 0, 1, 2]
SCALING INDEX = 2
removed
[1, 0, 1, 0]
SCALING INDEX = 2
removed
[0, 1, 2, 0]
SCALING INDEX = 2
removed
[0, 0, 0, 3]
SCALING INDEX = 2
removed
[1, 0, 0, 1]
SCALING INDEX = 2
removed
[0, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 1, 0, 2]
SCALING INDEX = 2
removed
[1, 1, 0, 0]
SCALING INDEX = 2
removed
[0, 2, 1, 0]
SCALING INDEX = 2
removed
[0, 2, 0, 1]
SCALING INDEX = 2
removed
Starting at index 18 with window 10
Going to 2 tenants
[0, 0, 3, 1]
SCALING INDEX = 2
removed
[0, 3, 0, 0]
SCALING INDEX = 2
removed
[0, 0, 2, 2]
SCALING INDEX = 2
removed
[1, 0, 2, 0]
SCALING INDEX = 2
removed
[0, 1, 3, 0]
SCALING INDEX = 2
removed
[0, 0, 1, 3]
SCALING INDEX = 2
removed
[1, 0, 1, 1]
SCALING INDEX = 2
removed
[0, 1, 2, 1]
SCALING INDEX = 2
removed
[1, 0, 0, 2]
SCALING INDEX = 2
removed
[0, 1, 1, 2]
SCALING INDEX = 2
removed
Starting at index 28 with window 10
Going to 2 tenants
[2, 0, 0, 0]
SCALING INDEX = 2
removed
[1, 1, 1, 0]
SCALING INDEX = 2
removed
[0, 2, 2, 0]
SCALING INDEX = 2
removed
[0, 1, 0, 3]
SCALING INDEX = 2
removed
[1, 1, 0, 1]
SCALING INDEX = 2
removed
[0, 2, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 0, 2]
SCALING INDEX = 2
removed
[1, 2, 0, 0]
SCALING INDEX = 2
removed
[0, 3, 1, 0]
SCALING INDEX = 2
removed
[0, 0, 3, 2]
SCALING INDEX = 2
removed
Starting at index 38 with window 10
Going to 2 tenants
[1, 0, 3, 0]
SCALING INDEX = 2
removed
[0, 3, 0, 1]
SCALING INDEX = 2
removed
[0, 0, 2, 3]
SCALING INDEX = 2
removed
[1, 0, 2, 1]
SCALING INDEX = 2
removed
[0, 1, 3, 1]
SCALING INDEX = 2
removed
[1, 0, 1, 2]
SCALING INDEX = 2
removed
[0, 1, 2, 2]
SCALING INDEX = 2
removed
[2, 0, 1, 0]
SCALING INDEX = 2
removed
[1, 1, 2, 0]
SCALING INDEX = 2
removed
[0, 2, 3, 0]
SCALING INDEX = 2
removed
Starting at index 48 with window 10
Going to 2 tenants
[1, 0, 0, 3]
SCALING INDEX = 2
removed
[0, 1, 1, 3]
SCALING INDEX = 2
removed
[2, 0, 0, 1]
SCALING INDEX = 2
removed
[1, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 2, 1]
SCALING INDEX = 2
removed
[1, 1, 0, 2]
SCALING INDEX = 2
removed
[0, 2, 1, 2]
SCALING INDEX = 2
removed
[2, 1, 0, 0]
SCALING INDEX = 2
removed
[1, 2, 1, 0]
SCALING INDEX = 2
removed
[0, 3, 2, 0]
SCALING INDEX = 2
removed
Starting at index 58 with window 10
Going to 2 tenants
[0, 2, 0, 3]
SCALING INDEX = 2
removed
[1, 2, 0, 1]
SCALING INDEX = 2
removed
[0, 3, 1, 1]
SCALING INDEX = 2
removed
[0, 0, 3, 3]
SCALING INDEX = 2
removed
[1, 0, 3, 1]
SCALING INDEX = 2
removed
[0, 3, 0, 2]
SCALING INDEX = 2
removed
[1, 3, 0, 0]
SCALING INDEX = 2
removed
[1, 0, 2, 2]
SCALING INDEX = 2
removed
[0, 1, 3, 2]
SCALING INDEX = 2
removed
[2, 0, 2, 0]
SCALING INDEX = 2
removed
Starting at index 68 with window 10
Going to 2 tenants
[1, 1, 3, 0]
SCALING INDEX = 2
removed
[1, 0, 1, 3]
SCALING INDEX = 2
removed
[0, 1, 2, 3]
SCALING INDEX = 2
removed
[2, 0, 1, 1]
SCALING INDEX = 2
removed
[1, 1, 2, 1]
SCALING INDEX = 2
removed
[0, 2, 3, 1]
SCALING INDEX = 2
removed
[2, 0, 0, 2]
SCALING INDEX = 2
removed
[1, 1, 1, 2]
SCALING INDEX = 2
removed
[3, 0, 0, 0]
SCALING INDEX = 2
removed
[0, 2, 2, 2]
SCALING INDEX = 2
removed
Starting at index 78 with window 10
Going to 2 tenants
[2, 1, 1, 0]
SCALING INDEX = 2
removed
[1, 2, 2, 0]
SCALING INDEX = 2
removed
[0, 3, 3, 0]
SCALING INDEX = 2
removed
[1, 1, 0, 3]
SCALING INDEX = 2
removed
[0, 2, 1, 3]
SCALING INDEX = 2
removed
[2, 1, 0, 1]
SCALING INDEX = 2
removed
[1, 2, 1, 1]
SCALING INDEX = 2
removed
[0, 3, 2, 1]
SCALING INDEX = 2
removed
[1, 2, 0, 2]
SCALING INDEX = 2
removed
[0, 3, 1, 2]
SCALING INDEX = 2
removed
Starting at index 88 with window 10
Going to 2 tenants
[2, 2, 0, 0]
SCALING INDEX = 2
removed
[1, 3, 1, 0]
SCALING INDEX = 2
removed
[1, 0, 3, 2]
SCALING INDEX = 2
removed
[2, 0, 3, 0]
SCALING INDEX = 2
removed
[0, 3, 0, 3]
SCALING INDEX = 2
removed
[1, 3, 0, 1]
SCALING INDEX = 2
removed
[1, 0, 2, 3]
SCALING INDEX = 2
removed
[0, 1, 3, 3]
SCALING INDEX = 2
removed
[2, 0, 2, 1]
SCALING INDEX = 2
removed
[1, 1, 3, 1]
SCALING INDEX = 2
removed
Starting at index 98 with window 10
Going to 2 tenants
[2, 0, 1, 2]
SCALING INDEX = 2
removed
[1, 1, 2, 2]
SCALING INDEX = 2
removed
[3, 0, 1, 0]
SCALING INDEX = 2
removed
[0, 2, 3, 2]
SCALING INDEX = 2
removed
[2, 1, 2, 0]
SCALING INDEX = 2
removed
[1, 2, 3, 0]
SCALING INDEX = 2
removed
[2, 0, 0, 3]
SCALING INDEX = 2
removed
[1, 1, 1, 3]
SCALING INDEX = 2
removed
[3, 0, 0, 1]
SCALING INDEX = 2
removed
[0, 2, 2, 3]
SCALING INDEX = 2
removed
Starting at index 108 with window 10
Going to 2 tenants
[2, 1, 1, 1]
SCALING INDEX = 2
removed
[1, 2, 2, 1]
SCALING INDEX = 2
removed
[0, 3, 3, 1]
SCALING INDEX = 2
removed
[2, 1, 0, 2]
SCALING INDEX = 2
removed
[1, 2, 1, 2]
SCALING INDEX = 2
removed
[3, 1, 0, 0]
SCALING INDEX = 2
removed
[0, 3, 2, 2]
SCALING INDEX = 2
removed
[2, 2, 1, 0]
SCALING INDEX = 2
removed
[1, 3, 2, 0]
SCALING INDEX = 2
removed
[1, 2, 0, 3]
SCALING INDEX = 2
removed
Starting at index 118 with window 10
Going to 2 tenants
[0, 3, 1, 3]
SCALING INDEX = 2
removed
[2, 2, 0, 1]
SCALING INDEX = 2
removed
[1, 3, 1, 1]
SCALING INDEX = 2
removed
[1, 0, 3, 3]
SCALING INDEX = 2
removed
[2, 0, 3, 1]
SCALING INDEX = 2
removed
[1, 3, 0, 2]
SCALING INDEX = 2
removed
[2, 3, 0, 0]
SCALING INDEX = 2
removed
[2, 0, 2, 2]
SCALING INDEX = 2
removed
[1, 1, 3, 2]
SCALING INDEX = 2
removed
[3, 0, 2, 0]
SCALING INDEX = 2
removed
Starting at index 128 with window 10
Going to 2 tenants
[2, 1, 3, 0]
SCALING INDEX = 2
removed
[2, 0, 1, 3]
SCALING INDEX = 2
removed
[1, 1, 2, 3]
SCALING INDEX = 2
removed
[3, 0, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 3, 3]
SCALING INDEX = 2
removed
[2, 1, 2, 1]
SCALING INDEX = 2
removed
[1, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 0, 0, 2]
SCALING INDEX = 2
removed
[2, 1, 1, 2]
SCALING INDEX = 2
removed
[1, 2, 2, 2]
SCALING INDEX = 2
removed
Starting at index 138 with window 10
Going to 2 tenants
[3, 1, 1, 0]
SCALING INDEX = 2
removed
[0, 3, 3, 2]
SCALING INDEX = 2
removed
[2, 2, 2, 0]
SCALING INDEX = 2
removed
[1, 3, 3, 0]
SCALING INDEX = 2
removed
[2, 1, 0, 3]
SCALING INDEX = 2
removed
[1, 2, 1, 3]
SCALING INDEX = 2
removed
[3, 1, 0, 1]
SCALING INDEX = 2
removed
[0, 3, 2, 3]
SCALING INDEX = 2
removed
[2, 2, 1, 1]
SCALING INDEX = 2
removed
[1, 3, 2, 1]
SCALING INDEX = 2
removed
Starting at index 148 with window 10
Going to 2 tenants
[2, 2, 0, 2]
SCALING INDEX = 2
removed
[1, 3, 1, 2]
SCALING INDEX = 2
removed
[3, 2, 0, 0]
SCALING INDEX = 2
removed
[2, 3, 1, 0]
SCALING INDEX = 2
removed
[2, 0, 3, 2]
SCALING INDEX = 2
removed
[3, 0, 3, 0]
SCALING INDEX = 2
removed
[1, 3, 0, 3]
SCALING INDEX = 2
removed
[2, 3, 0, 1]
SCALING INDEX = 2
removed
[2, 0, 2, 3]
SCALING INDEX = 2
removed
[1, 1, 3, 3]
SCALING INDEX = 2
removed
Starting at index 158 with window 10
Going to 2 tenants
[3, 0, 2, 1]
SCALING INDEX = 2
removed
[2, 1, 3, 1]
SCALING INDEX = 2
removed
[3, 0, 1, 2]
SCALING INDEX = 2
removed
[2, 1, 2, 2]
SCALING INDEX = 2
removed
[1, 2, 3, 2]
SCALING INDEX = 2
removed
[3, 1, 2, 0]
SCALING INDEX = 2
removed
[2, 2, 3, 0]
SCALING INDEX = 2
removed
[3, 0, 0, 3]
SCALING INDEX = 2
removed
[2, 1, 1, 3]
SCALING INDEX = 2
removed
[1, 2, 2, 3]
SCALING INDEX = 2
removed
Starting at index 168 with window 10
Going to 2 tenants
[3, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 3, 3, 3]
SCALING INDEX = 2
removed
[2, 2, 2, 1]
SCALING INDEX = 2
removed
[1, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 0, 2]
SCALING INDEX = 2
removed
[2, 2, 1, 2]
SCALING INDEX = 2
removed
[1, 3, 2, 2]
SCALING INDEX = 2
removed
[3, 2, 1, 0]
SCALING INDEX = 2
removed
[2, 3, 2, 0]
SCALING INDEX = 2
removed
[2, 2, 0, 3]
SCALING INDEX = 2
removed
Starting at index 178 with window 10
Going to 2 tenants
[1, 3, 1, 3]
SCALING INDEX = 2
removed
[3, 2, 0, 1]
SCALING INDEX = 2
removed
[2, 3, 1, 1]
SCALING INDEX = 2
removed
[2, 0, 3, 3]
SCALING INDEX = 2
removed
[3, 0, 3, 1]
SCALING INDEX = 2
removed
[2, 3, 0, 2]
SCALING INDEX = 2
removed
[3, 3, 0, 0]
SCALING INDEX = 2
removed
[3, 0, 2, 2]
SCALING INDEX = 2
removed
[2, 1, 3, 2]
SCALING INDEX = 2
removed
[3, 1, 3, 0]
SCALING INDEX = 2
removed
Starting at index 188 with window 10
Going to 2 tenants
[3, 0, 1, 3]
SCALING INDEX = 2
removed
[2, 1, 2, 3]
SCALING INDEX = 2
removed
[1, 2, 3, 3]
SCALING INDEX = 2
removed
[3, 1, 2, 1]
SCALING INDEX = 2
removed
[2, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 1, 2]
SCALING INDEX = 2
removed
[2, 2, 2, 2]
SCALING INDEX = 2
removed
[1, 3, 3, 2]
SCALING INDEX = 2
removed
[3, 2, 2, 0]
SCALING INDEX = 2
removed
[2, 3, 3, 0]
SCALING INDEX = 2
removed
Starting at index 198 with window 10
Going to 2 tenants
[3, 1, 0, 3]
SCALING INDEX = 2
removed
[2, 2, 1, 3]
SCALING INDEX = 2
removed
[1, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 2, 1, 1]
SCALING INDEX = 2
removed
[2, 3, 2, 1]
SCALING INDEX = 2
removed
[3, 2, 0, 2]
SCALING INDEX = 2
removed
[2, 3, 1, 2]
SCALING INDEX = 2
removed
[3, 3, 1, 0]
SCALING INDEX = 2
removed
[3, 0, 3, 2]
SCALING INDEX = 2
removed
[2, 3, 0, 3]
SCALING INDEX = 2
removed
Starting at index 208 with window 10
Going to 2 tenants
[3, 3, 0, 1]
SCALING INDEX = 2
removed
[3, 0, 2, 3]
SCALING INDEX = 2
removed
[2, 1, 3, 3]
SCALING INDEX = 2
removed
[3, 1, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 2, 2]
SCALING INDEX = 2
removed
[2, 2, 3, 2]
SCALING INDEX = 2
removed
[3, 2, 3, 0]
SCALING INDEX = 2
removed
[3, 1, 1, 3]
SCALING INDEX = 2
removed
[2, 2, 2, 3]
SCALING INDEX = 2
removed
[1, 3, 3, 3]
SCALING INDEX = 2
removed
Starting at index 218 with window 10
Going to 2 tenants
[3, 2, 2, 1]
SCALING INDEX = 2
removed
[2, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 2, 1, 2]
SCALING INDEX = 2
removed
[2, 3, 2, 2]
SCALING INDEX = 2
removed
[3, 3, 2, 0]
SCALING INDEX = 2
removed
[3, 2, 0, 3]
SCALING INDEX = 2
removed
[2, 3, 1, 3]
SCALING INDEX = 2
removed
[3, 3, 1, 1]
SCALING INDEX = 2
removed
[3, 0, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 0, 2]
SCALING INDEX = 2
removed
Starting at index 228 with window 10
Going to 2 tenants
[3, 1, 3, 2]
SCALING INDEX = 2
removed
[3, 1, 2, 3]
SCALING INDEX = 2
removed
[2, 2, 3, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 2, 2, 2]
SCALING INDEX = 2
removed
[2, 3, 3, 2]
SCALING INDEX = 2
removed
[3, 3, 3, 0]
SCALING INDEX = 2
removed
[3, 2, 1, 3]
SCALING INDEX = 2
removed
[2, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 1]
SCALING INDEX = 2
removed
Starting at index 238 with window 10
Going to 2 tenants
[3, 3, 1, 2]
SCALING INDEX = 2
removed
[3, 3, 0, 3]
SCALING INDEX = 2
removed
[3, 1, 3, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 2]
SCALING INDEX = 2
removed
[3, 2, 2, 3]
SCALING INDEX = 2
removed
[2, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 3, 2, 2]
SCALING INDEX = 2
removed
[3, 3, 1, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 3]
SCALING INDEX = 2
removed
Starting at index 248 with window 10
Going to 2 tenants
[3, 3, 3, 2]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 2]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 2]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 2]
SCALING INDEX = 2
removed
Starting at index 258 with window 10
Going to 2 tenants
No config exists that meets all filtering constraints
Recursive down scaling disabled
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
Passing over worker in previously failed scaling
Passing over worker in previously failed scaling
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4d573d0>, <src.sla.WorkerConf object at 0x7fabc4d57f50>, <src.sla.WorkerConf object at 0x7fabc4d57590>, <src.sla.WorkerConf object at 0x7fabc4d576d0>]], [{}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4d3a2d0>, <src.sla.WorkerConf object at 0x7fabc4d3a050>, <src.sla.WorkerConf object at 0x7fabc4d3ac50>, <src.sla.WorkerConf object at 0x7fabc4d3a650>]], [{}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc6082e10>, <src.sla.WorkerConf object at 0x7fabc606fb10>, <src.sla.WorkerConf object at 0x7fabc606f390>, <src.sla.WorkerConf object at 0x7fabc606f6d0>]]]
Conf 0:
118
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;1;2 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 8 with window 1
[0, 0, 1, 2]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  2 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '121', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '130', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  2 tenants and 0;0;1;2:
Returning adaptive scaler for  2 tenants and 0;0;1;2:
1
255
['0030', '0021', '0012', '1010', '1001', '0120', '0111', '0102', '1100', '0210', '0201', '0300', '0031', '0022', '1020', '0013', '1011', '1002', '2000', '0130', '0121', '0112', '1110', '0103', '1101', '0220', '0211', '0202', '1200', '0310', '0301', '0032', '1030', '0023', '1021', '1012', '2010', '1003', '2001', '0131', '0122', '1120', '0113', '1111', '1102', '2100', '0230', '0221', '0212', '1210', '0203', '1201', '0320', '0311', '0302', '1300', '0033', '1031', '1022', '2020', '1013', '2011', '2002', '3000', '0132', '1130', '0123', '1121', '1112', '2110', '1103', '2101', '0231', '0222', '1220', '0213', '1211', '1202', '2200', '0330', '0321', '0312', '1310', '0303', '1301', '1032', '2030', '1023', '2021', '2012', '3010', '2003', '3001', '0133', '1131', '1122', '2120', '1113', '2111', '2102', '3100', '0232', '1230', '0223', '1221', '1212', '2210', '1203', '2201', '0331', '0322', '1320', '0313', '1311', '1302', '2300', '1033', '2031', '2022', '3020', '2013', '3011', '3002', '1132', '2130', '1123', '2121', '2112', '3110', '2103', '3101', '0233', '1231', '1222', '2220', '1213', '2211', '2202', '3200', '0332', '1330', '0323', '1321', '1312', '2310', '1303', '2301', '2032', '3030', '2023', '3021', '3012', '3003', '1133', '2131', '2122', '3120', '2113', '3111', '3102', '1232', '2230', '1223', '2221', '2212', '3210', '2203', '3201', '0333', '1331', '1322', '2320', '1313', '2311', '2302', '3300', '2033', '3031', '3022', '3013', '2132', '3130', '2123', '3121', '3112', '3103', '1233', '2231', '2222', '3220', '2213', '3211', '3202', '1332', '2330', '1323', '2321', '2312', '3310', '2303', '3301', '3032', '3023', '2133', '3131', '3122', '3113', '2232', '3230', '2223', '3221', '3212', '3203', '1333', '2331', '2322', '3320', '2313', '3311', '3302', '3033', '3132', '3123', '2233', '3231', '3222', '3213', '2332', '3330', '2323', '3321', '3312', '3303', '3133', '3232', '3223', '2333', '3331', '3322', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '123', 'Successfull': 'true'}
Starting at: 2
Tenant_nb: 2, maxTenants: 2
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '123', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '123', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '123', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '123', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 123.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '123', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4d65dd0>, <src.sla.WorkerConf object at 0x7fabc4d65c50>, <src.sla.WorkerConf object at 0x7fabc4d65350>, <src.sla.WorkerConf object at 0x7fabc4d65a50>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_2
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
4
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '123', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4d65dd0>, <src.sla.WorkerConf object at 0x7fabc4d65c50>, <src.sla.WorkerConf object at 0x7fabc4d65350>, <src.sla.WorkerConf object at 0x7fabc4d65a50>]]]
Conf 0:
123
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;1;2 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '123', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [2, {'cpu': [1], 'memory': [0]}], [1, {'cpu': [], 'memory': []}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 2 with window 1
[0, 0, 1, 2]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '123', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '130', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  3 tenants and 0;0;1;2:
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
['0012', '0021', '1010', '1001', '0030', '0102', '1100', '0111', '0120', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '133', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 3, maxTenants: 3
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '133', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '133', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '133', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '133', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 133.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '123', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '133', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  4 tenants and 0;0;1;2:
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 4, maxTenants: 4
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 141.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  5 tenants and 0;1;0;2:
1
255
Getting next batch of experiments for 5 tenants
Moving filtered samples in sorted combinations after the window
['0021', '1010', '1001', '0030', '0102', '0120', '1100', '0111', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 4
Starting at index 0 with window 4
[0, 0, 2, 1]
not removed
[1, 0, 1, 0]
removed
[1, 0, 0, 1]
removed
[0, 0, 3, 0]
removed
Going to 2 tenants
Going to 6 tenants
[0, 0, 2, 1]
removed
Starting at index 4 with window 4
[0, 0, 3, 0]
removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 1, 1, 1]
not removed
Going to 2 tenants
Going to 6 tenants
[0, 1, 1, 1]
not removed
Going to 7 tenants
[0, 1, 1, 1]
removed
Starting at index 8 with window 4
[0, 2, 0, 1]
removed
[0, 2, 1, 0]
removed
[0, 3, 0, 0]
removed
[0, 0, 1, 3]
not removed
Going to 2 tenants
Going to 6 tenants
[0, 0, 1, 3]
not removed
Going to 7 tenants
[0, 0, 1, 3]
not removed
Going to 8 tenants
[0, 0, 1, 3]
not removed
Going to 9 tenants
[0, 0, 1, 3]
not removed
Going to 10 tenants
[0, 0, 1, 3]
not removed
Going to 11 tenants
Starting at index 8 with window 1
['0021', '0102', '1010', '1001', '0111', '0030', '0120', '1100', '0013', '0201', '0210', '0300', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 0 1 3
min_conf_dec: 8
8
[0, 0, 1, 3]
{'0': [[0, 1, 3]]}
{'0': [[1, 3, 0]]}
{'1': [[3, 0, 0]]}
{'3': [[0, 0, 1]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 3]]}
Elementstr: [[0,0,1,3]]
Min replicacount:0 0 1 3
Max replicacount:0 0 1 3
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '123', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '133', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  5 tenants and 0;0;1;3:
Returning adaptive scaler for  5 tenants and 0;0;1;3:
1
255
['0021', '0102', '1010', '1001', '0111', '0030', '0120', '1100', '0013', '0201', '0210', '0300', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}
Starting at: 8
Tenant_nb: 5, maxTenants: 5
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 118
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 118
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2564102564102564', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2564102564102564', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 3]
Measured completion time is 118.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2564102564102564', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}, [0, 0, 1, 3], [<src.sla.WorkerConf object at 0x7fabc745a050>, <src.sla.WorkerConf object at 0x7fabc745a350>, <src.sla.WorkerConf object at 0x7fabc745a510>, <src.sla.WorkerConf object at 0x7fabc745a550>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
8
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2564102564102564', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}, [0, 0, 1, 3], [<src.sla.WorkerConf object at 0x7fabc745a050>, <src.sla.WorkerConf object at 0x7fabc745a350>, <src.sla.WorkerConf object at 0x7fabc745a510>, <src.sla.WorkerConf object at 0x7fabc745a550>]]]
Conf 0:
118
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;1;3 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2564102564102564', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 11 with window 1
[0, 0, 1, 3]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  5 tenants and 0;0;1;3:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '123', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '133', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  5 tenants and 0;0;1;3:
Returning adaptive scaler for  5 tenants and 0;0;1;3:
1
255
['0021', '1010', '1001', '0030', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}
Starting at: 11
Tenant_nb: 5, maxTenants: 5
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 3]
Measured completion time is 118.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}, [0, 0, 1, 3], [<src.sla.WorkerConf object at 0x7fabc4d3a650>, <src.sla.WorkerConf object at 0x7fabc4d3a950>, <src.sla.WorkerConf object at 0x7fabc4d3a4d0>, <src.sla.WorkerConf object at 0x7fabc4d3a250>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
8
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}, [0, 0, 1, 3], [<src.sla.WorkerConf object at 0x7fabc4d3a650>, <src.sla.WorkerConf object at 0x7fabc4d3a950>, <src.sla.WorkerConf object at 0x7fabc4d3a4d0>, <src.sla.WorkerConf object at 0x7fabc4d3a250>]]]
Conf 0:
118
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;1;3 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 11 with window 1
[0, 0, 1, 3]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  5 tenants and 0;0;1;3:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '123', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '133', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  5 tenants and 0;0;1;3:
Returning adaptive scaler for  5 tenants and 0;0;1;3:
1
255
['0021', '1010', '1001', '0030', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}
Starting at: 11
Tenant_nb: 5, maxTenants: 5
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 3]
Measured completion time is 118.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}, [0, 0, 1, 3], [<src.sla.WorkerConf object at 0x7fabc4cd76d0>, <src.sla.WorkerConf object at 0x7fabc4cd78d0>, <src.sla.WorkerConf object at 0x7fabc4cd7310>, <src.sla.WorkerConf object at 0x7fabc4cd7790>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
8
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}, [0, 0, 1, 3], [<src.sla.WorkerConf object at 0x7fabc4cd76d0>, <src.sla.WorkerConf object at 0x7fabc4cd78d0>, <src.sla.WorkerConf object at 0x7fabc4cd7310>, <src.sla.WorkerConf object at 0x7fabc4cd7790>]]]
Conf 0:
118
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;1;3 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 11 with window 1
[0, 0, 1, 3]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '123', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '133', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  4 tenants and 0;0;1;2:
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '136', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 4, maxTenants: 4
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '136', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '136', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '136', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '136', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 136.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '123', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '133', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '136', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  3 tenants and 0;0;1;2:
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
['0012', '0021', '1010', '1001', '0030', '0102', '1100', '0111', '0120', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '135', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 3, maxTenants: 3
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '135', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '135', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '135', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '135', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 135.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  2 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '123', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '136', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  2 tenants and 0;0;1;2:
Returning adaptive scaler for  2 tenants and 0;0;1;2:
1
255
['0030', '0021', '0012', '1010', '1001', '0120', '0111', '0102', '1100', '0210', '0201', '0300', '0031', '0022', '1020', '0013', '1011', '1002', '2000', '0130', '0121', '0112', '1110', '0103', '1101', '0220', '0211', '0202', '1200', '0310', '0301', '0032', '1030', '0023', '1021', '1012', '2010', '1003', '2001', '0131', '0122', '1120', '0113', '1111', '1102', '2100', '0230', '0221', '0212', '1210', '0203', '1201', '0320', '0311', '0302', '1300', '0033', '1031', '1022', '2020', '1013', '2011', '2002', '3000', '0132', '1130', '0123', '1121', '1112', '2110', '1103', '2101', '0231', '0222', '1220', '0213', '1211', '1202', '2200', '0330', '0321', '0312', '1310', '0303', '1301', '1032', '2030', '1023', '2021', '2012', '3010', '2003', '3001', '0133', '1131', '1122', '2120', '1113', '2111', '2102', '3100', '0232', '1230', '0223', '1221', '1212', '2210', '1203', '2201', '0331', '0322', '1320', '0313', '1311', '1302', '2300', '1033', '2031', '2022', '3020', '2013', '3011', '3002', '1132', '2130', '1123', '2121', '2112', '3110', '2103', '3101', '0233', '1231', '1222', '2220', '1213', '2211', '2202', '3200', '0332', '1330', '0323', '1321', '1312', '2310', '1303', '2301', '2032', '3030', '2023', '3021', '3012', '3003', '1133', '2131', '2122', '3120', '2113', '3111', '3102', '1232', '2230', '1223', '2221', '2212', '3210', '2203', '3201', '0333', '1331', '1322', '2320', '1313', '2311', '2302', '3300', '2033', '3031', '3022', '3013', '2132', '3130', '2123', '3121', '3112', '3103', '1233', '2231', '2222', '3220', '2213', '3211', '3202', '1332', '2330', '1323', '2321', '2312', '3310', '2303', '3301', '3032', '3023', '2133', '3131', '3122', '3113', '2232', '3230', '2223', '3221', '3212', '3203', '1333', '2331', '2322', '3320', '2313', '3311', '3302', '3033', '3132', '3123', '2233', '3231', '3222', '3213', '2332', '3330', '2323', '3321', '3312', '3303', '3133', '3232', '3223', '2333', '3331', '3322', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}
Starting at: 2
Tenant_nb: 2, maxTenants: 2
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 124.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4cd7450>, <src.sla.WorkerConf object at 0x7fabc4cd7210>, <src.sla.WorkerConf object at 0x7fabc4cd7390>, <src.sla.WorkerConf object at 0x7fabc4cd7f50>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_2
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
4
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4cd7450>, <src.sla.WorkerConf object at 0x7fabc4cd7210>, <src.sla.WorkerConf object at 0x7fabc4cd7390>, <src.sla.WorkerConf object at 0x7fabc4cd7f50>]]]
Conf 0:
124
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;1;2 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [2, {'cpu': [1], 'memory': [0]}], [1, {'cpu': [], 'memory': []}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 2 with window 1
[0, 0, 1, 2]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  1 tenants and 0;0;1;2:
1
255
Getting next batch of experiments for 1 tenants
Moving filtered samples in sorted combinations after the window
['0020', '0011', '1000', '0110', '0101', '0200', '0030', '0021', '0012', '1010', '0003', '1001', '0120', '0111', '0102', '1100', '0210', '0201', '0300', '0031', '0022', '1020', '0013', '1011', '1002', '2000', '0130', '0121', '0112', '1110', '0103', '1101', '0220', '0211', '0202', '1200', '0310', '0301', '0032', '1030', '0023', '1021', '1012', '2010', '1003', '2001', '0131', '0122', '1120', '0113', '1111', '1102', '2100', '0230', '0221', '0212', '1210', '0203', '1201', '0320', '0311', '0302', '1300', '0033', '1031', '1022', '2020', '1013', '2011', '2002', '3000', '0132', '1130', '0123', '1121', '1112', '2110', '1103', '2101', '0231', '0222', '1220', '0213', '1211', '1202', '2200', '0330', '0321', '0312', '1310', '0303', '1301', '1032', '2030', '1023', '2021', '2012', '3010', '2003', '3001', '0133', '1131', '1122', '2120', '1113', '2111', '2102', '3100', '0232', '1230', '0223', '1221', '1212', '2210', '1203', '2201', '0331', '0322', '1320', '0313', '1311', '1302', '2300', '1033', '2031', '2022', '3020', '2013', '3011', '3002', '1132', '2130', '1123', '2121', '2112', '3110', '2103', '3101', '0233', '1231', '1222', '2220', '1213', '2211', '2202', '3200', '0332', '1330', '0323', '1321', '1312', '2310', '1303', '2301', '2032', '3030', '2023', '3021', '3012', '3003', '1133', '2131', '2122', '3120', '2113', '3111', '3102', '1232', '2230', '1223', '2221', '2212', '3210', '2203', '3201', '0333', '1331', '1322', '2320', '1313', '2311', '2302', '3300', '2033', '3031', '3022', '3013', '2132', '3130', '2123', '3121', '3112', '3103', '1233', '2231', '2222', '3220', '2213', '3211', '3202', '1332', '2330', '1323', '2321', '2312', '3310', '2303', '3301', '3032', '3023', '2133', '3131', '3122', '3113', '2232', '3230', '2223', '3221', '3212', '3203', '1333', '2331', '2322', '3320', '2313', '3311', '3302', '3033', '3132', '3123', '2233', '3231', '3222', '3213', '2332', '3330', '2323', '3321', '3312', '3303', '3133', '3232', '3223', '2333', '3331', '3322', '3313', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 8
Starting at index 0 with window 8
Going to 2 tenants
[0, 0, 2, 0]
removed
[0, 0, 1, 1]
not removed
[1, 0, 0, 0]
removed
[0, 1, 1, 0]
removed
[0, 1, 0, 1]
removed
[0, 2, 0, 0]
removed
[0, 0, 3, 0]
removed
[0, 0, 2, 1]
not removed
Going to 3 tenants
[0, 0, 1, 1]
not removed
[0, 0, 2, 1]
not removed
Going to 4 tenants
[0, 0, 1, 1]
not removed
[0, 0, 2, 1]
not removed
Going to 5 tenants
[0, 0, 1, 1]
not removed
[0, 0, 2, 1]
not removed
Going to 6 tenants
[0, 0, 1, 1]
removed
[0, 0, 2, 1]
removed
Starting at index 8 with window 8
Going to 2 tenants
[0, 0, 3, 0]
removed
[1, 0, 1, 0]
removed
[0, 0, 0, 3]
not removed
[1, 0, 0, 1]
removed
[0, 1, 2, 0]
removed
[0, 1, 1, 1]
not removed
[0, 1, 0, 2]
not removed
[1, 1, 0, 0]
removed
Going to 3 tenants
[0, 0, 0, 3]
not removed
[0, 1, 1, 1]
not removed
[0, 1, 0, 2]
not removed
Going to 4 tenants
[0, 0, 0, 3]
not removed
[0, 1, 1, 1]
not removed
[0, 1, 0, 2]
not removed
Going to 5 tenants
[0, 0, 0, 3]
not removed
[0, 1, 1, 1]
not removed
[0, 1, 0, 2]
not removed
Going to 6 tenants
[0, 0, 0, 3]
not removed
[0, 1, 1, 1]
removed
[0, 1, 0, 2]
not removed
Going to 8 tenants
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
Going to 9 tenants
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
Going to 10 tenants
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
Going to 11 tenants
Starting at index 8 with window 2
['0011', '0021', '0020', '0012', '1000', '0110', '0101', '0200', '0003', '0102', '0030', '0111', '1010', '0210', '1001', '0120', '0201', '0300', '1100', '0031', '0022', '1020', '0013', '1011', '1002', '2000', '0130', '0121', '0112', '1110', '0103', '1101', '0220', '0211', '0202', '1200', '0310', '0301', '0032', '1030', '0023', '1021', '1012', '2010', '1003', '2001', '0131', '0122', '1120', '0113', '1111', '1102', '2100', '0230', '0221', '0212', '1210', '0203', '1201', '0320', '0311', '0302', '1300', '0033', '1031', '1022', '2020', '1013', '2011', '2002', '3000', '0132', '1130', '0123', '1121', '1112', '2110', '1103', '2101', '0231', '0222', '1220', '0213', '1211', '1202', '2200', '0330', '0321', '0312', '1310', '0303', '1301', '1032', '2030', '1023', '2021', '2012', '3010', '2003', '3001', '0133', '1131', '1122', '2120', '1113', '2111', '2102', '3100', '0232', '1230', '0223', '1221', '1212', '2210', '1203', '2201', '0331', '0322', '1320', '0313', '1311', '1302', '2300', '1033', '2031', '2022', '3020', '2013', '3011', '3002', '1132', '2130', '1123', '2121', '2112', '3110', '2103', '3101', '0233', '1231', '1222', '2220', '1213', '2211', '2202', '3200', '0332', '1330', '0323', '1321', '1312', '2310', '1303', '2301', '2032', '3030', '2023', '3021', '3012', '3003', '1133', '2131', '2122', '3120', '2113', '3111', '3102', '1232', '2230', '1223', '2221', '2212', '3210', '2203', '3201', '0333', '1331', '1322', '2320', '1313', '2311', '2302', '3300', '2033', '3031', '3022', '3013', '2132', '3130', '2123', '3121', '3112', '3103', '1233', '2231', '2222', '3220', '2213', '3211', '3202', '1332', '2330', '1323', '2321', '2312', '3310', '2303', '3301', '3032', '3023', '2133', '3131', '3122', '3113', '2232', '3230', '2223', '3221', '3212', '3203', '1333', '2331', '2322', '3320', '2313', '3311', '3302', '3033', '3132', '3123', '2233', '3231', '3222', '3213', '2332', '3330', '2323', '3321', '3312', '3303', '3133', '3232', '3223', '2333', '3331', '3322', '3313', '3233', '3323', '3332', '3333']
min_conf: 0 0 0 3
min_conf_dec: 8
8
[0, 0, 0, 3]
9
[0, 1, 0, 2]
{'0': [[0, 0, 3], [1, 0, 2]]}
{'0': [[0, 3, 0]], '1': [[0, 2, 0]]}
{'0': [[3, 0, 0], [2, 0, 1]]}
{'3': [[0, 0, 0]], '2': [[0, 1, 0]]}
Next possible experiments for next nb of tenants
{'0': [[0, 0, 3], [1, 0, 2]]}
Elementstr: [[0,0,0,3];[0,1,0,2]]
Min replicacount:0 0 0 3
Max replicacount:0 1 0 2
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '124', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '136', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;0;3:
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
['0011', '0021', '0020', '0012', '1000', '0110', '0101', '0200', '0003', '0102', '0030', '0111', '1010', '0210', '1001', '0120', '0201', '0300', '1100', '0031', '0022', '1020', '0013', '1011', '1002', '2000', '0130', '0121', '0112', '1110', '0103', '1101', '0220', '0211', '0202', '1200', '0310', '0301', '0032', '1030', '0023', '1021', '1012', '2010', '1003', '2001', '0131', '0122', '1120', '0113', '1111', '1102', '2100', '0230', '0221', '0212', '1210', '0203', '1201', '0320', '0311', '0302', '1300', '0033', '1031', '1022', '2020', '1013', '2011', '2002', '3000', '0132', '1130', '0123', '1121', '1112', '2110', '1103', '2101', '0231', '0222', '1220', '0213', '1211', '1202', '2200', '0330', '0321', '0312', '1310', '0303', '1301', '1032', '2030', '1023', '2021', '2012', '3010', '2003', '3001', '0133', '1131', '1122', '2120', '1113', '2111', '2102', '3100', '0232', '1230', '0223', '1221', '1212', '2210', '1203', '2201', '0331', '0322', '1320', '0313', '1311', '1302', '2300', '1033', '2031', '2022', '3020', '2013', '3011', '3002', '1132', '2130', '1123', '2121', '2112', '3110', '2103', '3101', '0233', '1231', '1222', '2220', '1213', '2211', '2202', '3200', '0332', '1330', '0323', '1321', '1312', '2310', '1303', '2301', '2032', '3030', '2023', '3021', '3012', '3003', '1133', '2131', '2122', '3120', '2113', '3111', '3102', '1232', '2230', '1223', '2221', '2212', '3210', '2203', '3201', '0333', '1331', '1322', '2320', '1313', '2311', '2302', '3300', '2033', '3031', '3022', '3013', '2132', '3130', '2123', '3121', '3112', '3103', '1233', '2231', '2222', '3220', '2213', '3211', '3202', '1332', '2330', '1323', '2321', '2312', '3310', '2303', '3301', '3032', '3023', '2133', '3131', '3122', '3113', '2232', '3230', '2223', '3221', '3212', '3203', '1333', '2331', '2322', '3320', '2313', '3311', '3302', '3033', '3132', '3123', '2233', '3231', '3222', '3213', '2332', '3330', '2323', '3321', '3312', '3303', '3133', '3232', '3223', '2333', '3331', '3322', '3313', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}
Starting at: 8
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 127
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 127
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 0, 3]
Measured completion time is 127.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fabc7451590>, <src.sla.WorkerConf object at 0x7fabc74513d0>, <src.sla.WorkerConf object at 0x7fabc7451690>, <src.sla.WorkerConf object at 0x7fabc74516d0>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_0_3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fabc7451590>, <src.sla.WorkerConf object at 0x7fabc74513d0>, <src.sla.WorkerConf object at 0x7fabc7451690>, <src.sla.WorkerConf object at 0x7fabc74516d0>]]]
Conf 0:
127
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;0;3 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '127', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 8 with window 1
[0, 0, 0, 3]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '127', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '124', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '136', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;0;3:
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
['0011', '0020', '1000', '0110', '0101', '0200', '0021', '0012', '0003', '0030', '1010', '1001', '0102', '0111', '0120', '1100', '0210', '0201', '0300', '0031', '0022', '1020', '0013', '1011', '1002', '2000', '0130', '0121', '0112', '1110', '0103', '1101', '0220', '0211', '0202', '1200', '0310', '0301', '0032', '1030', '0023', '1021', '1012', '2010', '1003', '2001', '0131', '0122', '1120', '0113', '1111', '1102', '2100', '0230', '0221', '0212', '1210', '0203', '1201', '0320', '0311', '0302', '1300', '0033', '1031', '1022', '2020', '1013', '2011', '2002', '3000', '0132', '1130', '0123', '1121', '1112', '2110', '1103', '2101', '0231', '0222', '1220', '0213', '1211', '1202', '2200', '0330', '0321', '0312', '1310', '0303', '1301', '1032', '2030', '1023', '2021', '2012', '3010', '2003', '3001', '0133', '1131', '1122', '2120', '1113', '2111', '2102', '3100', '0232', '1230', '0223', '1221', '1212', '2210', '1203', '2201', '0331', '0322', '1320', '0313', '1311', '1302', '2300', '1033', '2031', '2022', '3020', '2013', '3011', '3002', '1132', '2130', '1123', '2121', '2112', '3110', '2103', '3101', '0233', '1231', '1222', '2220', '1213', '2211', '2202', '3200', '0332', '1330', '0323', '1321', '1312', '2310', '1303', '2301', '2032', '3030', '2023', '3021', '3012', '3003', '1133', '2131', '2122', '3120', '2113', '3111', '3102', '1232', '2230', '1223', '2221', '2212', '3210', '2203', '3201', '0333', '1331', '1322', '2320', '1313', '2311', '2302', '3300', '2033', '3031', '3022', '3013', '2132', '3130', '2123', '3121', '3112', '3103', '1233', '2231', '2222', '3220', '2213', '3211', '3202', '1332', '2330', '1323', '2321', '2312', '3310', '2303', '3301', '3032', '3023', '2133', '3131', '3122', '3113', '2232', '3230', '2223', '3221', '3212', '3203', '1333', '2331', '2322', '3320', '2313', '3311', '3302', '3033', '3132', '3123', '2233', '3231', '3222', '3213', '2332', '3330', '2323', '3321', '3312', '3303', '3133', '3232', '3223', '2333', '3331', '3322', '3313', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '117', 'Successfull': 'true'}
Starting at: 8
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '117', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '117', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '117', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '117', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 0, 3]
Measured completion time is 117.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '117', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fabc74553d0>, <src.sla.WorkerConf object at 0x7fabc7455c50>, <src.sla.WorkerConf object at 0x7fabc7455e90>, <src.sla.WorkerConf object at 0x7fabc7455e10>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_0_3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '117', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fabc74553d0>, <src.sla.WorkerConf object at 0x7fabc7455c50>, <src.sla.WorkerConf object at 0x7fabc7455e90>, <src.sla.WorkerConf object at 0x7fabc7455e10>]]]
Conf 0:
117
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;0;3 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '117', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 8 with window 1
[0, 0, 0, 3]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '117', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '124', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '136', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;0;3:
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
['0011', '0020', '1000', '0110', '0101', '0200', '0021', '0012', '0003', '0030', '1010', '1001', '0102', '0111', '0120', '1100', '0210', '0201', '0300', '0031', '0022', '1020', '0013', '1011', '1002', '2000', '0130', '0121', '0112', '1110', '0103', '1101', '0220', '0211', '0202', '1200', '0310', '0301', '0032', '1030', '0023', '1021', '1012', '2010', '1003', '2001', '0131', '0122', '1120', '0113', '1111', '1102', '2100', '0230', '0221', '0212', '1210', '0203', '1201', '0320', '0311', '0302', '1300', '0033', '1031', '1022', '2020', '1013', '2011', '2002', '3000', '0132', '1130', '0123', '1121', '1112', '2110', '1103', '2101', '0231', '0222', '1220', '0213', '1211', '1202', '2200', '0330', '0321', '0312', '1310', '0303', '1301', '1032', '2030', '1023', '2021', '2012', '3010', '2003', '3001', '0133', '1131', '1122', '2120', '1113', '2111', '2102', '3100', '0232', '1230', '0223', '1221', '1212', '2210', '1203', '2201', '0331', '0322', '1320', '0313', '1311', '1302', '2300', '1033', '2031', '2022', '3020', '2013', '3011', '3002', '1132', '2130', '1123', '2121', '2112', '3110', '2103', '3101', '0233', '1231', '1222', '2220', '1213', '2211', '2202', '3200', '0332', '1330', '0323', '1321', '1312', '2310', '1303', '2301', '2032', '3030', '2023', '3021', '3012', '3003', '1133', '2131', '2122', '3120', '2113', '3111', '3102', '1232', '2230', '1223', '2221', '2212', '3210', '2203', '3201', '0333', '1331', '1322', '2320', '1313', '2311', '2302', '3300', '2033', '3031', '3022', '3013', '2132', '3130', '2123', '3121', '3112', '3103', '1233', '2231', '2222', '3220', '2213', '3211', '3202', '1332', '2330', '1323', '2321', '2312', '3310', '2303', '3301', '3032', '3023', '2133', '3131', '3122', '3113', '2232', '3230', '2223', '3221', '3212', '3203', '1333', '2331', '2322', '3320', '2313', '3311', '3302', '3033', '3132', '3123', '2233', '3231', '3222', '3213', '2332', '3330', '2323', '3321', '3312', '3303', '3133', '3232', '3223', '2333', '3331', '3322', '3313', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}
Starting at: 8
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 0, 3]
Measured completion time is 118.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fabc4d80450>, <src.sla.WorkerConf object at 0x7fabc4d803d0>, <src.sla.WorkerConf object at 0x7fabc4d80690>, <src.sla.WorkerConf object at 0x7fabc4d80490>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_0_3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
SCALE DOWN DIFF
Rescaling worker 4
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
6
4
3
2
Moving filtered samples in sorted combinations after the window
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '0021', '1001', '0102', '0030', '1010', '0111', '0120', '1100', '0201', '0210', '0013', '0300', '0022', '1002', '0103', '0031', '1011', '0112', '1020', '2000', '0121', '1101', '0202', '0130', '1110', '0211', '0220', '1200', '0301', '0023', '1003', '0310', '0032', '1012', '0113', '1021', '2001', '0122', '1102', '0203', '1030', '2010', '0131', '1111', '0212', '1120', '2100', '0221', '1201', '0302', '0230', '1210', '0311', '0033', '1013', '0320', '1300', '1022', '2002', '0123', '1103', '1031', '2011', '0132', '1112', '0213', '2020', '3000', '1121', '2101', '0222', '1202', '0303', '1130', '2110', '0231', '1211', '0312', '1220', '2200', '0321', '1301', '1023', '2003', '0330', '1310', '1032', '2012', '0133', '1113', '2021', '3001', '1122', '2102', '0223', '1203', '2030', '3010', '1131', '2111', '0232', '1212', '0313', '2120', '3100', '1221', '2201', '0322', '1302', '1230', '2210', '0331', '1311', '1033', '2013', '1320', '2300', '2022', '3002', '1123', '2103', '2031', '3011', '1132', '2112', '0233', '1213', '3020', '2121', '3101', '1222', '2202', '0323', '1303', '2130', '3110', '1231', '2211', '0332', '1312', '2220', '3200', '1321', '2301', '2023', '3003', '1330', '2310', '2032', '3012', '1133', '2113', '3021', '2122', '3102', '1223', '2203', '3030', '2131', '3111', '1232', '2212', '0333', '1313', '3120', '2221', '3201', '1322', '2302', '2230', '3210', '1331', '2311', '2033', '3013', '2320', '3300', '3022', '2123', '3103', '3031', '2132', '3112', '1233', '2213', '3121', '2222', '3202', '1323', '2303', '3130', '2231', '3211', '1332', '2312', '3220', '2321', '3301', '3023', '2330', '3310', '3032', '2133', '3113', '3122', '2223', '3203', '3131', '2232', '3212', '1333', '2313', '3221', '2322', '3302', '3230', '2331', '3311', '3033', '3320', '3123', '3132', '2233', '3213', '3222', '2323', '3303', '3231', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 6 with window 10
Starting at index 6 with window 10
Going to 2 tenants
[0, 0, 0, 3]
SCALING INDEX = 3
removed
[0, 0, 1, 2]
SCALING INDEX = 3
removed
[0, 0, 2, 1]
SCALING INDEX = 3
removed
[1, 0, 0, 1]
SCALING INDEX = 3
removed
[0, 1, 0, 2]
SCALING INDEX = 3
removed
[0, 0, 3, 0]
SCALING INDEX = 3
removed
[1, 0, 1, 0]
SCALING INDEX = 3
removed
[0, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 2, 0]
SCALING INDEX = 3
removed
[1, 1, 0, 0]
SCALING INDEX = 3
removed
Starting at index 16 with window 10
Going to 2 tenants
[0, 2, 0, 1]
SCALING INDEX = 3
removed
[0, 2, 1, 0]
SCALING INDEX = 3
removed
[0, 0, 1, 3]
SCALING INDEX = 3
removed
[0, 3, 0, 0]
SCALING INDEX = 3
removed
[0, 0, 2, 2]
SCALING INDEX = 3
removed
[1, 0, 0, 2]
SCALING INDEX = 3
removed
[0, 1, 0, 3]
SCALING INDEX = 3
removed
[0, 0, 3, 1]
SCALING INDEX = 3
removed
[1, 0, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 1, 2]
SCALING INDEX = 3
removed
Starting at index 26 with window 10
Going to 2 tenants
[1, 0, 2, 0]
SCALING INDEX = 3
removed
[2, 0, 0, 0]
SCALING INDEX = 3
removed
[0, 1, 2, 1]
SCALING INDEX = 3
removed
[1, 1, 0, 1]
SCALING INDEX = 3
removed
[0, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 1, 3, 0]
SCALING INDEX = 3
removed
[1, 1, 1, 0]
SCALING INDEX = 3
removed
[0, 2, 1, 1]
SCALING INDEX = 3
removed
[0, 2, 2, 0]
SCALING INDEX = 3
removed
[1, 2, 0, 0]
SCALING INDEX = 3
removed
Starting at index 36 with window 10
Going to 2 tenants
[0, 3, 0, 1]
SCALING INDEX = 3
removed
[0, 0, 2, 3]
SCALING INDEX = 3
removed
[1, 0, 0, 3]
SCALING INDEX = 3
removed
[0, 3, 1, 0]
SCALING INDEX = 3
removed
[0, 0, 3, 2]
SCALING INDEX = 3
removed
[1, 0, 1, 2]
SCALING INDEX = 3
removed
[0, 1, 1, 3]
SCALING INDEX = 3
removed
[1, 0, 2, 1]
SCALING INDEX = 3
removed
[2, 0, 0, 1]
SCALING INDEX = 3
removed
[0, 1, 2, 2]
SCALING INDEX = 3
removed
Starting at index 46 with window 10
Going to 2 tenants
[1, 1, 0, 2]
SCALING INDEX = 3
removed
[0, 2, 0, 3]
SCALING INDEX = 3
removed
[1, 0, 3, 0]
SCALING INDEX = 3
removed
[2, 0, 1, 0]
SCALING INDEX = 3
removed
[0, 1, 3, 1]
SCALING INDEX = 3
removed
[1, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 2, 1, 2]
SCALING INDEX = 3
removed
[1, 1, 2, 0]
SCALING INDEX = 3
removed
[2, 1, 0, 0]
SCALING INDEX = 3
removed
[0, 2, 2, 1]
SCALING INDEX = 3
removed
Starting at index 56 with window 10
Going to 2 tenants
[1, 2, 0, 1]
SCALING INDEX = 3
removed
[0, 3, 0, 2]
SCALING INDEX = 3
removed
[0, 2, 3, 0]
SCALING INDEX = 3
removed
[1, 2, 1, 0]
SCALING INDEX = 3
removed
[0, 3, 1, 1]
SCALING INDEX = 3
removed
[0, 0, 3, 3]
SCALING INDEX = 3
removed
[1, 0, 1, 3]
SCALING INDEX = 3
removed
[0, 3, 2, 0]
SCALING INDEX = 3
removed
[1, 3, 0, 0]
SCALING INDEX = 3
removed
[1, 0, 2, 2]
SCALING INDEX = 3
removed
Starting at index 66 with window 10
Going to 2 tenants
[2, 0, 0, 2]
SCALING INDEX = 3
removed
[0, 1, 2, 3]
SCALING INDEX = 3
removed
[1, 1, 0, 3]
SCALING INDEX = 3
removed
[1, 0, 3, 1]
SCALING INDEX = 3
removed
[2, 0, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 3, 2]
SCALING INDEX = 3
removed
[1, 1, 1, 2]
SCALING INDEX = 3
removed
[0, 2, 1, 3]
SCALING INDEX = 3
removed
[2, 0, 2, 0]
SCALING INDEX = 3
removed
[3, 0, 0, 0]
SCALING INDEX = 3
removed
Starting at index 76 with window 10
Going to 2 tenants
[1, 1, 2, 1]
SCALING INDEX = 3
removed
[2, 1, 0, 1]
SCALING INDEX = 3
removed
[0, 2, 2, 2]
SCALING INDEX = 3
removed
[1, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 3, 0, 3]
SCALING INDEX = 3
removed
[1, 1, 3, 0]
SCALING INDEX = 3
removed
[2, 1, 1, 0]
SCALING INDEX = 3
removed
[0, 2, 3, 1]
SCALING INDEX = 3
removed
[1, 2, 1, 1]
SCALING INDEX = 3
removed
[0, 3, 1, 2]
SCALING INDEX = 3
removed
Starting at index 86 with window 10
Going to 2 tenants
[1, 2, 2, 0]
SCALING INDEX = 3
removed
[2, 2, 0, 0]
SCALING INDEX = 3
removed
[0, 3, 2, 1]
SCALING INDEX = 3
removed
[1, 3, 0, 1]
SCALING INDEX = 3
removed
[1, 0, 2, 3]
SCALING INDEX = 3
removed
[2, 0, 0, 3]
SCALING INDEX = 3
removed
[0, 3, 3, 0]
SCALING INDEX = 3
removed
[1, 3, 1, 0]
SCALING INDEX = 3
removed
[1, 0, 3, 2]
SCALING INDEX = 3
removed
[2, 0, 1, 2]
SCALING INDEX = 3
removed
Starting at index 96 with window 10
Going to 2 tenants
[0, 1, 3, 3]
SCALING INDEX = 3
removed
[1, 1, 1, 3]
SCALING INDEX = 3
removed
[2, 0, 2, 1]
SCALING INDEX = 3
removed
[3, 0, 0, 1]
SCALING INDEX = 3
removed
[1, 1, 2, 2]
SCALING INDEX = 3
removed
[2, 1, 0, 2]
SCALING INDEX = 3
removed
[0, 2, 2, 3]
SCALING INDEX = 3
removed
[1, 2, 0, 3]
SCALING INDEX = 3
removed
[2, 0, 3, 0]
SCALING INDEX = 3
removed
[3, 0, 1, 0]
SCALING INDEX = 3
removed
Starting at index 106 with window 10
Going to 2 tenants
[1, 1, 3, 1]
SCALING INDEX = 3
removed
[2, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 2, 3, 2]
SCALING INDEX = 3
removed
[1, 2, 1, 2]
SCALING INDEX = 3
removed
[0, 3, 1, 3]
SCALING INDEX = 3
removed
[2, 1, 2, 0]
SCALING INDEX = 3
removed
[3, 1, 0, 0]
SCALING INDEX = 3
removed
[1, 2, 2, 1]
SCALING INDEX = 3
removed
[2, 2, 0, 1]
SCALING INDEX = 3
removed
[0, 3, 2, 2]
SCALING INDEX = 3
removed
Starting at index 116 with window 10
Going to 2 tenants
[1, 3, 0, 2]
SCALING INDEX = 3
removed
[1, 2, 3, 0]
SCALING INDEX = 3
removed
[2, 2, 1, 0]
SCALING INDEX = 3
removed
[0, 3, 3, 1]
SCALING INDEX = 3
removed
[1, 3, 1, 1]
SCALING INDEX = 3
removed
[1, 0, 3, 3]
SCALING INDEX = 3
removed
[2, 0, 1, 3]
SCALING INDEX = 3
removed
[1, 3, 2, 0]
SCALING INDEX = 3
removed
[2, 3, 0, 0]
SCALING INDEX = 3
removed
[2, 0, 2, 2]
SCALING INDEX = 3
removed
Starting at index 126 with window 10
Going to 2 tenants
[3, 0, 0, 2]
SCALING INDEX = 3
removed
[1, 1, 2, 3]
SCALING INDEX = 3
removed
[2, 1, 0, 3]
SCALING INDEX = 3
removed
[2, 0, 3, 1]
SCALING INDEX = 3
removed
[3, 0, 1, 1]
SCALING INDEX = 3
removed
[1, 1, 3, 2]
SCALING INDEX = 3
removed
[2, 1, 1, 2]
SCALING INDEX = 3
removed
[0, 2, 3, 3]
SCALING INDEX = 3
removed
[1, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 0, 2, 0]
SCALING INDEX = 3
removed
Starting at index 136 with window 10
Going to 2 tenants
[2, 1, 2, 1]
SCALING INDEX = 3
removed
[3, 1, 0, 1]
SCALING INDEX = 3
removed
[1, 2, 2, 2]
SCALING INDEX = 3
removed
[2, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 3, 2, 3]
SCALING INDEX = 3
removed
[1, 3, 0, 3]
SCALING INDEX = 3
removed
[2, 1, 3, 0]
SCALING INDEX = 3
removed
[3, 1, 1, 0]
SCALING INDEX = 3
removed
[1, 2, 3, 1]
SCALING INDEX = 3
removed
[2, 2, 1, 1]
SCALING INDEX = 3
removed
Starting at index 146 with window 10
Going to 2 tenants
[0, 3, 3, 2]
SCALING INDEX = 3
removed
[1, 3, 1, 2]
SCALING INDEX = 3
removed
[2, 2, 2, 0]
SCALING INDEX = 3
removed
[3, 2, 0, 0]
SCALING INDEX = 3
removed
[1, 3, 2, 1]
SCALING INDEX = 3
removed
[2, 3, 0, 1]
SCALING INDEX = 3
removed
[2, 0, 2, 3]
SCALING INDEX = 3
removed
[3, 0, 0, 3]
SCALING INDEX = 3
removed
[1, 3, 3, 0]
SCALING INDEX = 3
removed
[2, 3, 1, 0]
SCALING INDEX = 3
removed
Starting at index 156 with window 10
Going to 2 tenants
[2, 0, 3, 2]
SCALING INDEX = 3
removed
[3, 0, 1, 2]
SCALING INDEX = 3
removed
[1, 1, 3, 3]
SCALING INDEX = 3
removed
[2, 1, 1, 3]
SCALING INDEX = 3
removed
[3, 0, 2, 1]
SCALING INDEX = 3
removed
[2, 1, 2, 2]
SCALING INDEX = 3
removed
[3, 1, 0, 2]
SCALING INDEX = 3
removed
[1, 2, 2, 3]
SCALING INDEX = 3
removed
[2, 2, 0, 3]
SCALING INDEX = 3
removed
[3, 0, 3, 0]
SCALING INDEX = 3
removed
Starting at index 166 with window 10
Going to 2 tenants
[2, 1, 3, 1]
SCALING INDEX = 3
removed
[3, 1, 1, 1]
SCALING INDEX = 3
removed
[1, 2, 3, 2]
SCALING INDEX = 3
removed
[2, 2, 1, 2]
SCALING INDEX = 3
removed
[0, 3, 3, 3]
SCALING INDEX = 3
removed
[1, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 0]
SCALING INDEX = 3
removed
[2, 2, 2, 1]
SCALING INDEX = 3
removed
[3, 2, 0, 1]
SCALING INDEX = 3
removed
[1, 3, 2, 2]
SCALING INDEX = 3
removed
Starting at index 176 with window 10
Going to 2 tenants
[2, 3, 0, 2]
SCALING INDEX = 3
removed
[2, 2, 3, 0]
SCALING INDEX = 3
removed
[3, 2, 1, 0]
SCALING INDEX = 3
removed
[1, 3, 3, 1]
SCALING INDEX = 3
removed
[2, 3, 1, 1]
SCALING INDEX = 3
removed
[2, 0, 3, 3]
SCALING INDEX = 3
removed
[3, 0, 1, 3]
SCALING INDEX = 3
removed
[2, 3, 2, 0]
SCALING INDEX = 3
removed
[3, 3, 0, 0]
SCALING INDEX = 3
removed
[3, 0, 2, 2]
SCALING INDEX = 3
removed
Starting at index 186 with window 10
Going to 2 tenants
[2, 1, 2, 3]
SCALING INDEX = 3
removed
[3, 1, 0, 3]
SCALING INDEX = 3
removed
[3, 0, 3, 1]
SCALING INDEX = 3
removed
[2, 1, 3, 2]
SCALING INDEX = 3
removed
[3, 1, 1, 2]
SCALING INDEX = 3
removed
[1, 2, 3, 3]
SCALING INDEX = 3
removed
[2, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 1]
SCALING INDEX = 3
removed
[2, 2, 2, 2]
SCALING INDEX = 3
removed
[3, 2, 0, 2]
SCALING INDEX = 3
removed
Starting at index 196 with window 10
Going to 2 tenants
[1, 3, 2, 3]
SCALING INDEX = 3
removed
[2, 3, 0, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 0]
SCALING INDEX = 3
removed
[2, 2, 3, 1]
SCALING INDEX = 3
removed
[3, 2, 1, 1]
SCALING INDEX = 3
removed
[1, 3, 3, 2]
SCALING INDEX = 3
removed
[2, 3, 1, 2]
SCALING INDEX = 3
removed
[3, 2, 2, 0]
SCALING INDEX = 3
removed
[2, 3, 2, 1]
SCALING INDEX = 3
removed
[3, 3, 0, 1]
SCALING INDEX = 3
removed
Starting at index 206 with window 10
Going to 2 tenants
[3, 0, 2, 3]
SCALING INDEX = 3
removed
[2, 3, 3, 0]
SCALING INDEX = 3
removed
[3, 3, 1, 0]
SCALING INDEX = 3
removed
[3, 0, 3, 2]
SCALING INDEX = 3
removed
[2, 1, 3, 3]
SCALING INDEX = 3
removed
[3, 1, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 2]
SCALING INDEX = 3
removed
[2, 2, 2, 3]
SCALING INDEX = 3
removed
[3, 2, 0, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 1]
SCALING INDEX = 3
removed
Starting at index 216 with window 10
Going to 2 tenants
[2, 2, 3, 2]
SCALING INDEX = 3
removed
[3, 2, 1, 2]
SCALING INDEX = 3
removed
[1, 3, 3, 3]
SCALING INDEX = 3
removed
[2, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 1]
SCALING INDEX = 3
removed
[2, 3, 2, 2]
SCALING INDEX = 3
removed
[3, 3, 0, 2]
SCALING INDEX = 3
removed
[3, 2, 3, 0]
SCALING INDEX = 3
removed
[2, 3, 3, 1]
SCALING INDEX = 3
removed
[3, 3, 1, 1]
SCALING INDEX = 3
removed
Starting at index 226 with window 10
Going to 2 tenants
[3, 0, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 0]
SCALING INDEX = 3
removed
[3, 1, 2, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 2]
SCALING INDEX = 3
removed
[2, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 2]
SCALING INDEX = 3
removed
[2, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 0, 3]
SCALING INDEX = 3
removed
[3, 2, 3, 1]
SCALING INDEX = 3
removed
Starting at index 236 with window 10
Going to 2 tenants
[2, 3, 3, 2]
SCALING INDEX = 3
removed
[3, 3, 1, 2]
SCALING INDEX = 3
removed
[3, 3, 2, 1]
SCALING INDEX = 3
removed
[3, 3, 3, 0]
SCALING INDEX = 3
removed
[3, 1, 3, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 3]
SCALING INDEX = 3
removed
[3, 2, 3, 2]
SCALING INDEX = 3
removed
[2, 3, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 2]
SCALING INDEX = 3
removed
Starting at index 246 with window 10
Going to 2 tenants
[3, 3, 3, 1]
SCALING INDEX = 3
removed
[3, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 3, 2]
SCALING INDEX = 3
removed
[3, 3, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 3, 1]
SCALING INDEX = 3
removed
[3, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 3, 2]
SCALING INDEX = 3
removed
[3, 3, 3, 3]
SCALING INDEX = 3
removed
Starting at index 256 with window 10
Going to 2 tenants
No config exists that meets all filtering constraints
Recursive down scaling disabled
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
Passing over worker in previously failed scaling
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fabc4d80450>, <src.sla.WorkerConf object at 0x7fabc4d803d0>, <src.sla.WorkerConf object at 0x7fabc4d80690>, <src.sla.WorkerConf object at 0x7fabc4d80490>]], [{}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fabc4cc6790>, <src.sla.WorkerConf object at 0x7fabc4cc6850>, <src.sla.WorkerConf object at 0x7fabc4cc64d0>, <src.sla.WorkerConf object at 0x7fabc4cc6210>]]]
Conf 0:
118
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;0;3 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '118', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 6 with window 1
[0, 0, 0, 3]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  2 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '124', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '136', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  2 tenants and 0;0;1;2:
Returning adaptive scaler for  2 tenants and 0;0;1;2:
1
255
['0030', '0021', '0012', '1010', '1001', '0120', '0111', '0102', '1100', '0210', '0201', '0300', '0031', '0022', '1020', '0013', '1011', '1002', '2000', '0130', '0121', '0112', '1110', '0103', '1101', '0220', '0211', '0202', '1200', '0310', '0301', '0032', '1030', '0023', '1021', '1012', '2010', '1003', '2001', '0131', '0122', '1120', '0113', '1111', '1102', '2100', '0230', '0221', '0212', '1210', '0203', '1201', '0320', '0311', '0302', '1300', '0033', '1031', '1022', '2020', '1013', '2011', '2002', '3000', '0132', '1130', '0123', '1121', '1112', '2110', '1103', '2101', '0231', '0222', '1220', '0213', '1211', '1202', '2200', '0330', '0321', '0312', '1310', '0303', '1301', '1032', '2030', '1023', '2021', '2012', '3010', '2003', '3001', '0133', '1131', '1122', '2120', '1113', '2111', '2102', '3100', '0232', '1230', '0223', '1221', '1212', '2210', '1203', '2201', '0331', '0322', '1320', '0313', '1311', '1302', '2300', '1033', '2031', '2022', '3020', '2013', '3011', '3002', '1132', '2130', '1123', '2121', '2112', '3110', '2103', '3101', '0233', '1231', '1222', '2220', '1213', '2211', '2202', '3200', '0332', '1330', '0323', '1321', '1312', '2310', '1303', '2301', '2032', '3030', '2023', '3021', '3012', '3003', '1133', '2131', '2122', '3120', '2113', '3111', '3102', '1232', '2230', '1223', '2221', '2212', '3210', '2203', '3201', '0333', '1331', '1322', '2320', '1313', '2311', '2302', '3300', '2033', '3031', '3022', '3013', '2132', '3130', '2123', '3121', '3112', '3103', '1233', '2231', '2222', '3220', '2213', '3211', '3202', '1332', '2330', '1323', '2321', '2312', '3310', '2303', '3301', '3032', '3023', '2133', '3131', '3122', '3113', '2232', '3230', '2223', '3221', '3212', '3203', '1333', '2331', '2322', '3320', '2313', '3311', '3302', '3033', '3132', '3123', '2233', '3231', '3222', '3213', '2332', '3330', '2323', '3321', '3312', '3303', '3133', '3232', '3223', '2333', '3331', '3322', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '128', 'Successfull': 'true'}
Starting at: 2
Tenant_nb: 2, maxTenants: 2
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '128', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '128', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '128', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '128', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 128.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '128', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc606f750>, <src.sla.WorkerConf object at 0x7fabc606fb50>, <src.sla.WorkerConf object at 0x7fabc606fc10>, <src.sla.WorkerConf object at 0x7fabc606fd50>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_2
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
4
SCALE DOWN DIFF
Rescaling worker 3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 2, 'memory': 2}
{'cpu': 3, 'memory': 2}
6
4
2
3
Moving filtered samples in sorted combinations after the window
['0030', '0021', '0012', '1010', '0120', '1001', '0111', '0102', '1100', '0210', '0201', '0031', '0300', '0022', '1020', '0130', '0013', '1011', '0121', '1002', '2000', '0112', '1110', '0220', '0103', '1101', '0211', '0202', '1200', '0310', '0032', '1030', '0301', '0023', '1021', '0131', '1012', '2010', '0122', '1120', '0230', '1003', '2001', '0113', '1111', '0221', '1102', '2100', '0212', '1210', '0320', '0203', '1201', '0311', '0033', '1031', '0302', '1300', '1022', '2020', '0132', '1130', '1013', '2011', '0123', '1121', '0231', '2002', '3000', '1112', '2110', '0222', '1220', '0330', '1103', '2101', '0213', '1211', '0321', '1202', '2200', '0312', '1310', '1032', '2030', '0303', '1301', '1023', '2021', '0133', '1131', '2012', '3010', '1122', '2120', '0232', '1230', '2003', '3001', '1113', '2111', '0223', '1221', '0331', '2102', '3100', '1212', '2210', '0322', '1320', '1203', '2201', '0313', '1311', '1033', '2031', '1302', '2300', '2022', '3020', '1132', '2130', '2013', '3011', '1123', '2121', '0233', '1231', '3002', '2112', '3110', '1222', '2220', '0332', '1330', '2103', '3101', '1213', '2211', '0323', '1321', '2202', '3200', '1312', '2310', '2032', '3030', '1303', '2301', '2023', '3021', '1133', '2131', '3012', '2122', '3120', '1232', '2230', '3003', '2113', '3111', '1223', '2221', '0333', '1331', '3102', '2212', '3210', '1322', '2320', '2203', '3201', '1313', '2311', '2033', '3031', '2302', '3300', '3022', '2132', '3130', '3013', '2123', '3121', '1233', '2231', '3112', '2222', '3220', '1332', '2330', '3103', '2213', '3211', '1323', '2321', '3202', '2312', '3310', '3032', '2303', '3301', '3023', '2133', '3131', '3122', '2232', '3230', '3113', '2223', '3221', '1333', '2331', '3212', '2322', '3320', '3203', '2313', '3311', '3033', '3302', '3132', '3123', '2233', '3231', '3222', '2332', '3330', '3213', '2323', '3321', '3312', '3303', '3133', '3232', '3223', '2333', '3331', '3322', '3313', '3233', '3332', '3323', '3333']
Filtering from index 2 with window 10
Starting at index 2 with window 10
[0, 0, 1, 2]
not removed
[1, 0, 1, 0]
SCALING INDEX = 2
removed
[0, 1, 2, 0]
SCALING INDEX = 2
removed
[1, 0, 0, 1]
SCALING INDEX = 2
removed
[0, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 1, 0, 2]
SCALING INDEX = 2
removed
[1, 1, 0, 0]
SCALING INDEX = 2
removed
[0, 2, 1, 0]
SCALING INDEX = 2
removed
[0, 2, 0, 1]
SCALING INDEX = 2
removed
[0, 0, 3, 1]
SCALING INDEX = 2
removed
Going to 2 tenants
Going to 3 tenants
[0, 0, 1, 2]
SCALING INDEX = 2
removed
Starting at index 12 with window 10
[0, 0, 3, 1]
SCALING INDEX = 2
removed
[0, 0, 2, 2]
SCALING INDEX = 2
removed
[1, 0, 2, 0]
SCALING INDEX = 2
removed
[0, 1, 3, 0]
SCALING INDEX = 2
removed
[0, 0, 1, 3]
SCALING INDEX = 2
removed
[1, 0, 1, 1]
SCALING INDEX = 2
removed
[0, 1, 2, 1]
SCALING INDEX = 2
removed
[1, 0, 0, 2]
SCALING INDEX = 2
removed
[2, 0, 0, 0]
SCALING INDEX = 2
removed
[0, 1, 1, 2]
SCALING INDEX = 2
removed
Starting at index 22 with window 10
[1, 1, 1, 0]
SCALING INDEX = 2
removed
[0, 2, 2, 0]
SCALING INDEX = 2
removed
[0, 1, 0, 3]
SCALING INDEX = 2
removed
[1, 1, 0, 1]
SCALING INDEX = 2
removed
[0, 2, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 0, 2]
SCALING INDEX = 2
removed
[1, 2, 0, 0]
SCALING INDEX = 2
removed
[0, 3, 1, 0]
SCALING INDEX = 2
removed
[0, 0, 3, 2]
SCALING INDEX = 2
removed
[1, 0, 3, 0]
SCALING INDEX = 2
removed
Starting at index 32 with window 10
[0, 3, 0, 1]
SCALING INDEX = 2
removed
[0, 0, 2, 3]
SCALING INDEX = 2
removed
[1, 0, 2, 1]
SCALING INDEX = 2
removed
[0, 1, 3, 1]
SCALING INDEX = 2
removed
[1, 0, 1, 2]
SCALING INDEX = 2
removed
[2, 0, 1, 0]
SCALING INDEX = 2
removed
[0, 1, 2, 2]
SCALING INDEX = 2
removed
[1, 1, 2, 0]
SCALING INDEX = 2
removed
[0, 2, 3, 0]
SCALING INDEX = 2
removed
[1, 0, 0, 3]
SCALING INDEX = 2
removed
Starting at index 42 with window 10
[2, 0, 0, 1]
SCALING INDEX = 2
removed
[0, 1, 1, 3]
SCALING INDEX = 2
removed
[1, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 2, 1]
SCALING INDEX = 2
removed
[1, 1, 0, 2]
SCALING INDEX = 2
removed
[2, 1, 0, 0]
SCALING INDEX = 2
removed
[0, 2, 1, 2]
SCALING INDEX = 2
removed
[1, 2, 1, 0]
SCALING INDEX = 2
removed
[0, 3, 2, 0]
SCALING INDEX = 2
removed
[0, 2, 0, 3]
SCALING INDEX = 2
removed
Starting at index 52 with window 10
[1, 2, 0, 1]
SCALING INDEX = 2
removed
[0, 3, 1, 1]
SCALING INDEX = 2
removed
[0, 0, 3, 3]
SCALING INDEX = 2
removed
[1, 0, 3, 1]
SCALING INDEX = 2
removed
[0, 3, 0, 2]
SCALING INDEX = 2
removed
[1, 3, 0, 0]
SCALING INDEX = 2
removed
[1, 0, 2, 2]
SCALING INDEX = 2
removed
[2, 0, 2, 0]
SCALING INDEX = 2
removed
[0, 1, 3, 2]
SCALING INDEX = 2
removed
[1, 1, 3, 0]
SCALING INDEX = 2
removed
Starting at index 62 with window 10
[1, 0, 1, 3]
SCALING INDEX = 2
removed
[2, 0, 1, 1]
SCALING INDEX = 2
removed
[0, 1, 2, 3]
SCALING INDEX = 2
removed
[1, 1, 2, 1]
SCALING INDEX = 2
removed
[0, 2, 3, 1]
SCALING INDEX = 2
removed
[2, 0, 0, 2]
SCALING INDEX = 2
removed
[3, 0, 0, 0]
SCALING INDEX = 2
removed
[1, 1, 1, 2]
SCALING INDEX = 2
removed
[2, 1, 1, 0]
SCALING INDEX = 2
removed
[0, 2, 2, 2]
SCALING INDEX = 2
removed
Starting at index 72 with window 10
[1, 2, 2, 0]
SCALING INDEX = 2
removed
[0, 3, 3, 0]
SCALING INDEX = 2
removed
[1, 1, 0, 3]
SCALING INDEX = 2
removed
[2, 1, 0, 1]
SCALING INDEX = 2
removed
[0, 2, 1, 3]
SCALING INDEX = 2
removed
[1, 2, 1, 1]
SCALING INDEX = 2
removed
[0, 3, 2, 1]
SCALING INDEX = 2
removed
[1, 2, 0, 2]
SCALING INDEX = 2
removed
[2, 2, 0, 0]
SCALING INDEX = 2
removed
[0, 3, 1, 2]
SCALING INDEX = 2
removed
Starting at index 82 with window 10
[1, 3, 1, 0]
SCALING INDEX = 2
removed
[1, 0, 3, 2]
SCALING INDEX = 2
removed
[2, 0, 3, 0]
SCALING INDEX = 2
removed
[0, 3, 0, 3]
SCALING INDEX = 2
removed
[1, 3, 0, 1]
SCALING INDEX = 2
removed
[1, 0, 2, 3]
SCALING INDEX = 2
removed
[2, 0, 2, 1]
SCALING INDEX = 2
removed
[0, 1, 3, 3]
SCALING INDEX = 2
removed
[1, 1, 3, 1]
SCALING INDEX = 2
removed
[2, 0, 1, 2]
SCALING INDEX = 2
removed
Starting at index 92 with window 10
[3, 0, 1, 0]
SCALING INDEX = 2
removed
[1, 1, 2, 2]
SCALING INDEX = 2
removed
[2, 1, 2, 0]
SCALING INDEX = 2
removed
[0, 2, 3, 2]
SCALING INDEX = 2
removed
[1, 2, 3, 0]
SCALING INDEX = 2
removed
[2, 0, 0, 3]
SCALING INDEX = 2
removed
[3, 0, 0, 1]
SCALING INDEX = 2
removed
[1, 1, 1, 3]
SCALING INDEX = 2
removed
[2, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 2, 3]
SCALING INDEX = 2
removed
Starting at index 102 with window 10
[1, 2, 2, 1]
SCALING INDEX = 2
removed
[0, 3, 3, 1]
SCALING INDEX = 2
removed
[2, 1, 0, 2]
SCALING INDEX = 2
removed
[3, 1, 0, 0]
SCALING INDEX = 2
removed
[1, 2, 1, 2]
SCALING INDEX = 2
removed
[2, 2, 1, 0]
SCALING INDEX = 2
removed
[0, 3, 2, 2]
SCALING INDEX = 2
removed
[1, 3, 2, 0]
SCALING INDEX = 2
removed
[1, 2, 0, 3]
SCALING INDEX = 2
removed
[2, 2, 0, 1]
SCALING INDEX = 2
removed
Starting at index 112 with window 10
[0, 3, 1, 3]
SCALING INDEX = 2
removed
[1, 3, 1, 1]
SCALING INDEX = 2
removed
[1, 0, 3, 3]
SCALING INDEX = 2
removed
[2, 0, 3, 1]
SCALING INDEX = 2
removed
[1, 3, 0, 2]
SCALING INDEX = 2
removed
[2, 3, 0, 0]
SCALING INDEX = 2
removed
[2, 0, 2, 2]
SCALING INDEX = 2
removed
[3, 0, 2, 0]
SCALING INDEX = 2
removed
[1, 1, 3, 2]
SCALING INDEX = 2
removed
[2, 1, 3, 0]
SCALING INDEX = 2
removed
Starting at index 122 with window 10
[2, 0, 1, 3]
SCALING INDEX = 2
removed
[3, 0, 1, 1]
SCALING INDEX = 2
removed
[1, 1, 2, 3]
SCALING INDEX = 2
removed
[2, 1, 2, 1]
SCALING INDEX = 2
removed
[0, 2, 3, 3]
SCALING INDEX = 2
removed
[1, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 0, 0, 2]
SCALING INDEX = 2
removed
[2, 1, 1, 2]
SCALING INDEX = 2
removed
[3, 1, 1, 0]
SCALING INDEX = 2
removed
[1, 2, 2, 2]
SCALING INDEX = 2
removed
Starting at index 132 with window 10
[2, 2, 2, 0]
SCALING INDEX = 2
removed
[0, 3, 3, 2]
SCALING INDEX = 2
removed
[1, 3, 3, 0]
SCALING INDEX = 2
removed
[2, 1, 0, 3]
SCALING INDEX = 2
removed
[3, 1, 0, 1]
SCALING INDEX = 2
removed
[1, 2, 1, 3]
SCALING INDEX = 2
removed
[2, 2, 1, 1]
SCALING INDEX = 2
removed
[0, 3, 2, 3]
SCALING INDEX = 2
removed
[1, 3, 2, 1]
SCALING INDEX = 2
removed
[2, 2, 0, 2]
SCALING INDEX = 2
removed
Starting at index 142 with window 10
[3, 2, 0, 0]
SCALING INDEX = 2
removed
[1, 3, 1, 2]
SCALING INDEX = 2
removed
[2, 3, 1, 0]
SCALING INDEX = 2
removed
[2, 0, 3, 2]
SCALING INDEX = 2
removed
[3, 0, 3, 0]
SCALING INDEX = 2
removed
[1, 3, 0, 3]
SCALING INDEX = 2
removed
[2, 3, 0, 1]
SCALING INDEX = 2
removed
[2, 0, 2, 3]
SCALING INDEX = 2
removed
[3, 0, 2, 1]
SCALING INDEX = 2
removed
[1, 1, 3, 3]
SCALING INDEX = 2
removed
Starting at index 152 with window 10
[2, 1, 3, 1]
SCALING INDEX = 2
removed
[3, 0, 1, 2]
SCALING INDEX = 2
removed
[2, 1, 2, 2]
SCALING INDEX = 2
removed
[3, 1, 2, 0]
SCALING INDEX = 2
removed
[1, 2, 3, 2]
SCALING INDEX = 2
removed
[2, 2, 3, 0]
SCALING INDEX = 2
removed
[3, 0, 0, 3]
SCALING INDEX = 2
removed
[2, 1, 1, 3]
SCALING INDEX = 2
removed
[3, 1, 1, 1]
SCALING INDEX = 2
removed
[1, 2, 2, 3]
SCALING INDEX = 2
removed
Starting at index 162 with window 10
[2, 2, 2, 1]
SCALING INDEX = 2
removed
[0, 3, 3, 3]
SCALING INDEX = 2
removed
[1, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 0, 2]
SCALING INDEX = 2
removed
[2, 2, 1, 2]
SCALING INDEX = 2
removed
[3, 2, 1, 0]
SCALING INDEX = 2
removed
[1, 3, 2, 2]
SCALING INDEX = 2
removed
[2, 3, 2, 0]
SCALING INDEX = 2
removed
[2, 2, 0, 3]
SCALING INDEX = 2
removed
[3, 2, 0, 1]
SCALING INDEX = 2
removed
Starting at index 172 with window 10
[1, 3, 1, 3]
SCALING INDEX = 2
removed
[2, 3, 1, 1]
SCALING INDEX = 2
removed
[2, 0, 3, 3]
SCALING INDEX = 2
removed
[3, 0, 3, 1]
SCALING INDEX = 2
removed
[2, 3, 0, 2]
SCALING INDEX = 2
removed
[3, 3, 0, 0]
SCALING INDEX = 2
removed
[3, 0, 2, 2]
SCALING INDEX = 2
removed
[2, 1, 3, 2]
SCALING INDEX = 2
removed
[3, 1, 3, 0]
SCALING INDEX = 2
removed
[3, 0, 1, 3]
SCALING INDEX = 2
removed
Starting at index 182 with window 10
[2, 1, 2, 3]
SCALING INDEX = 2
removed
[3, 1, 2, 1]
SCALING INDEX = 2
removed
[1, 2, 3, 3]
SCALING INDEX = 2
removed
[2, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 1, 2]
SCALING INDEX = 2
removed
[2, 2, 2, 2]
SCALING INDEX = 2
removed
[3, 2, 2, 0]
SCALING INDEX = 2
removed
[1, 3, 3, 2]
SCALING INDEX = 2
removed
[2, 3, 3, 0]
SCALING INDEX = 2
removed
[3, 1, 0, 3]
SCALING INDEX = 2
removed
Starting at index 192 with window 10
[2, 2, 1, 3]
SCALING INDEX = 2
removed
[3, 2, 1, 1]
SCALING INDEX = 2
removed
[1, 3, 2, 3]
SCALING INDEX = 2
removed
[2, 3, 2, 1]
SCALING INDEX = 2
removed
[3, 2, 0, 2]
SCALING INDEX = 2
removed
[2, 3, 1, 2]
SCALING INDEX = 2
removed
[3, 3, 1, 0]
SCALING INDEX = 2
removed
[3, 0, 3, 2]
SCALING INDEX = 2
removed
[2, 3, 0, 3]
SCALING INDEX = 2
removed
[3, 3, 0, 1]
SCALING INDEX = 2
removed
Starting at index 202 with window 10
[3, 0, 2, 3]
SCALING INDEX = 2
removed
[2, 1, 3, 3]
SCALING INDEX = 2
removed
[3, 1, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 2, 2]
SCALING INDEX = 2
removed
[2, 2, 3, 2]
SCALING INDEX = 2
removed
[3, 2, 3, 0]
SCALING INDEX = 2
removed
[3, 1, 1, 3]
SCALING INDEX = 2
removed
[2, 2, 2, 3]
SCALING INDEX = 2
removed
[3, 2, 2, 1]
SCALING INDEX = 2
removed
[1, 3, 3, 3]
SCALING INDEX = 2
removed
Starting at index 212 with window 10
[2, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 2, 1, 2]
SCALING INDEX = 2
removed
[2, 3, 2, 2]
SCALING INDEX = 2
removed
[3, 3, 2, 0]
SCALING INDEX = 2
removed
[3, 2, 0, 3]
SCALING INDEX = 2
removed
[2, 3, 1, 3]
SCALING INDEX = 2
removed
[3, 3, 1, 1]
SCALING INDEX = 2
removed
[3, 0, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 0, 2]
SCALING INDEX = 2
removed
[3, 1, 3, 2]
SCALING INDEX = 2
removed
Starting at index 222 with window 10
[3, 1, 2, 3]
SCALING INDEX = 2
removed
[2, 2, 3, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 2, 2, 2]
SCALING INDEX = 2
removed
[2, 3, 3, 2]
SCALING INDEX = 2
removed
[3, 3, 3, 0]
SCALING INDEX = 2
removed
[3, 2, 1, 3]
SCALING INDEX = 2
removed
[2, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 1]
SCALING INDEX = 2
removed
[3, 3, 1, 2]
SCALING INDEX = 2
removed
Starting at index 232 with window 10
[3, 3, 0, 3]
SCALING INDEX = 2
removed
[3, 1, 3, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 2]
SCALING INDEX = 2
removed
[3, 2, 2, 3]
SCALING INDEX = 2
removed
[2, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 3, 2, 2]
SCALING INDEX = 2
removed
[3, 3, 1, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 2]
SCALING INDEX = 2
removed
Starting at index 242 with window 10
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
Starting at index 252 with window 10
No config exists that meets all filtering constraints
Recursive down scaling disabled
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
4
Passing over worker in previously failed scaling
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '128', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc606f750>, <src.sla.WorkerConf object at 0x7fabc606fb50>, <src.sla.WorkerConf object at 0x7fabc606fc10>, <src.sla.WorkerConf object at 0x7fabc606fd50>]], [{}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4cc61d0>, <src.sla.WorkerConf object at 0x7fabc4cc6b10>, <src.sla.WorkerConf object at 0x7fabc4cc6950>, <src.sla.WorkerConf object at 0x7fabc4cc6a10>]]]
Conf 0:
128
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;1;2 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '128', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 2 with window 1
[0, 0, 1, 2]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '136', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  3 tenants and 0;0;1;2:
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
['0012', '0021', '1010', '1001', '0030', '0102', '1100', '0111', '0120', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '135', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 3, maxTenants: 3
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '135', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '135', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '135', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '135', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 135.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '136', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  4 tenants and 0;0;1;2:
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 4, maxTenants: 4
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 141.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  5 tenants and 0;0;1;3:
1
255
Getting next batch of experiments for 5 tenants
Moving filtered samples in sorted combinations after the window
['0021', '1010', '1001', '0030', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 10
Starting at index 0 with window 10
[0, 0, 2, 1]
removed
[1, 0, 1, 0]
removed
[1, 0, 0, 1]
removed
[0, 0, 3, 0]
removed
[0, 1, 0, 2]
not removed
[0, 1, 1, 1]
removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 2, 0, 1]
removed
[0, 2, 1, 0]
removed
Going to 2 tenants
[0, 1, 0, 2]
not removed
Going to 3 tenants
Going to 6 tenants
[0, 1, 0, 2]
not removed
Going to 7 tenants
[0, 1, 0, 2]
not removed
Going to 8 tenants
[0, 1, 0, 2]
not removed
Going to 9 tenants
[0, 1, 0, 2]
not removed
Going to 10 tenants
[0, 1, 0, 2]
not removed
Going to 11 tenants
Starting at index 0 with window 1
['0102', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '1100', '0201', '0210', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 1 0 2
min_conf_dec: 0
0
[0, 1, 0, 2]
{'0': [[1, 0, 2]]}
{'1': [[0, 2, 0]]}
{'0': [[2, 0, 1]]}
{'2': [[0, 1, 0]]}
Next possible experiments for next nb of tenants
{'0': [[1, 0, 2]]}
Elementstr: [[0,1,0,2]]
Min replicacount:0 1 0 2
Max replicacount:0 1 0 2
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  5 tenants and 0;1;0;2:
Returning adaptive scaler for  5 tenants and 0;1;0;2:
1
255
['0102', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '1100', '0201', '0210', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 5, maxTenants: 5
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 137
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 137
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.20512820512820512', 'best_score': '-0.20512820512820512', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.20512820512820512', 'best_score': '-0.20512820512820512', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}]
RESULT FOUND
[0, 1, 0, 2]
Measured completion time is 137.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  5 tenants and 0;1;0;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  5 tenants and 0;1;0;2:
Returning adaptive scaler for  5 tenants and 0;1;0;2:
1
255
['0102', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '1100', '0201', '0210', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '143', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 5, maxTenants: 5
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '143', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '143', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '143', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '143', 'Successfull': 'true'}]
RESULT FOUND
[0, 1, 0, 2]
Measured completion time is 143.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  6 tenants and 0;1;0;2:
1
255
Getting next batch of experiments for 6 tenants
Moving filtered samples in sorted combinations after the window
['0021', '1010', '1001', '0030', '0102', '0120', '1100', '0111', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 4
Starting at index 0 with window 4
[0, 0, 2, 1]
removed
[1, 0, 1, 0]
removed
[1, 0, 0, 1]
removed
[0, 0, 3, 0]
removed
Starting at index 4 with window 4
[0, 1, 0, 2]
not removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 1, 1, 1]
removed
Going to 2 tenants
[0, 1, 0, 2]
not removed
Going to 3 tenants
[0, 1, 0, 2]
not removed
Going to 6 tenants
[0, 1, 0, 2]
not removed
Going to 8 tenants
[0, 1, 0, 2]
not removed
Going to 9 tenants
[0, 1, 0, 2]
not removed
Going to 10 tenants
[0, 1, 0, 2]
not removed
Going to 11 tenants
Starting at index 4 with window 1
['0021', '1010', '1001', '0030', '0102', '0201', '0120', '1100', '0111', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 1 0 2
min_conf_dec: 4
4
[0, 1, 0, 2]
{'0': [[1, 0, 2]]}
{'1': [[0, 2, 0]]}
{'0': [[2, 0, 1]]}
{'2': [[0, 1, 0]]}
Next possible experiments for next nb of tenants
{'0': [[1, 0, 2]]}
Elementstr: [[0,1,0,2]]
Min replicacount:0 1 0 2
Max replicacount:0 1 0 2
Generating new experiment. Saving results on Results/exp3/silver/6_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 140
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '143', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '140', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  6 tenants and 0;1;0;2:
Returning adaptive scaler for  6 tenants and 0;1;0;2:
1
255
['0021', '1010', '1001', '0030', '0102', '0201', '0120', '1100', '0111', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}
Starting at: 4
Tenant_nb: 6, maxTenants: 6
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/6_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 147
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/6_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 147
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.20512820512820512', 'best_score': '-0.20512820512820512', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.20512820512820512', 'best_score': '-0.20512820512820512', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}]
RESULT FOUND
[0, 1, 0, 2]
Measured completion time is 147.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  7 tenants and 1;0;0;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '143', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '147', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  7 tenants and 1;0;0;2:
Returning adaptive scaler for  7 tenants and 1;0;0;2:
1
255
['0120', '1100', '0111', '0201', '0013', '0022', '1002', '0103', '0112', '2000', '0130', '0210', '0300', '1110', '0121', '1101', '0031', '1011', '1020', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}
Starting at: 6
Tenant_nb: 7, maxTenants: 7
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/7_tenants-ex1/op/
SAMPLE_LIST
[1, 0, 0, 2] -> 141
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 2 experiments
Generating new experiment. Saving results on Results/exp3/silver/7_tenants-ex0/op/
Generating new experiment. Saving results on Results/exp3/silver/7_tenants-ex1/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 1e-09
[0, 1, 0, 3] -> 1e-09
[1, 0, 0, 2] -> 141
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2564102564102564', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}, {'config': '1', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2692307692307692', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}, {'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2564102564102564', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2564102564102564', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '141', 'Successfull': 'true'}]
RESULT FOUND
[1, 0, 0, 2]
Measured completion time is 141.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  8 tenants and 1;0;0;2:
1
255
Getting next batch of experiments for 8 tenants
Moving filtered samples in sorted combinations after the window
['0120', '1100', '0111', '0210', '0201', '0300', '0013', '0022', '1002', '1011', '0031', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 8
Starting at index 0 with window 8
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 1, 1, 1]
removed
[0, 2, 1, 0]
removed
[0, 2, 0, 1]
removed
[0, 3, 0, 0]
removed
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
Going to 2 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
Going to 3 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
Going to 6 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
Going to 8 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
Going to 10 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
Going to 11 tenants
Starting at index 0 with window 2
['0013', '0022', '0120', '1100', '0111', '0210', '0201', '0300', '1002', '1011', '0031', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 0 1 3
min_conf_dec: 0
0
[0, 0, 1, 3]
1
[0, 0, 2, 2]
{'0': [[0, 1, 3], [0, 2, 2]]}
{'0': [[1, 3, 0], [2, 2, 0]]}
{'1': [[3, 0, 0]], '2': [[2, 0, 0]]}
{'3': [[0, 0, 1]], '2': [[0, 0, 2]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 3], [0, 2, 2]]}
Elementstr: [[0,0,1,3];[0,0,2,2]]
Min replicacount:0 0 1 3
Max replicacount:0 0 2 2
Generating new experiment. Saving results on Results/exp3/silver/8_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '143', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '147', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  8 tenants and 0;0;1;3:
Returning adaptive scaler for  8 tenants and 0;0;1;3:
1
255
['0013', '0022', '0120', '1100', '0111', '0210', '0201', '0300', '1002', '1011', '0031', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '143', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 8, maxTenants: 8
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '143', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '143', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '143', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '143', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/8_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 143
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/8_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 143
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2564102564102564', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '143', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2564102564102564', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '143', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 3]
Measured completion time is 143.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  9 tenants and 0;1;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '143', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '147', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '143', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '2', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  9 tenants and 0;1;1;2:
Returning adaptive scaler for  9 tenants and 0;1;1;2:
1
255
['0013', '0022', '1002', '0103', '0112', '0120', '1100', '0111', '0201', '1011', '0121', '1101', '0031', '0210', '0300', '1020', '2000', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '145', 'Successfull': 'true'}
Starting at: 4
Tenant_nb: 9, maxTenants: 9
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '145', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '145', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '145', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '145', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/9_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 151
[0, 1, 0, 3] -> 147
[0, 1, 1, 2] -> 145
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 2 experiments
Generating new experiment. Saving results on Results/exp3/silver/9_tenants-ex0/op/
Generating new experiment. Saving results on Results/exp3/silver/9_tenants-ex1/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 151
[0, 1, 0, 3] -> 147
[0, 1, 1, 2] -> 145
[1, 0, 0, 2] -> 1e-09
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-1.0066666666666666', 'best_score': '-1', 'SLAName': 'silver', 'CompletionTime': '151', 'Successfull': 'true'}, {'config': '1', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2692307692307692', 'best_score': '-0.2692307692307692', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}, {'config': '2', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2692307692307692', 'best_score': '-0.2692307692307692', 'SLAName': 'silver', 'CompletionTime': '145', 'Successfull': 'true'}, {'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2564102564102564', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}]
Filtered results
[{'config': '1', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2692307692307692', 'best_score': '-0.2692307692307692', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}, {'config': '2', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2692307692307692', 'best_score': '-0.2692307692307692', 'SLAName': 'silver', 'CompletionTime': '145', 'Successfull': 'true'}]
RESULT FOUND
[0, 1, 0, 3]
Measured completion time is 147.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
[0, 1, 2, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[1, 1, 0, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 1, 1, 1]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 2, 0, 1]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 2, 1, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 3, 0, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
Removing failed conf
[0, 0, 1, 3]
Tipped over conf already removed:
[0, 0, 1, 3]
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  10 tenants and 0;2;0;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.28205128205128205', 'config': '0', 'score': '-0.28205128205128205', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '143', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '147', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '143', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '147', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '1', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  10 tenants and 0;2;0;2:
Returning adaptive scaler for  10 tenants and 0;2;0;2:
1
255
['0121', '1101', '0130', '1110', '0202', '1003', '1012', '1021', '0023', '0211', '0220', '1200', '0301', '0310', '2001', '1030', '0032', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '156', 'Successfull': 'true'}
Starting at: 4
Tenant_nb: 10, maxTenants: 10
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '156', 'Successfull': 'true'}]
Filtered results
Current result is NO RESULT, therefore, we remove all configs with higher resource_cost than current result for higher number of tenants: 11..10
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '156', 'Successfull': 'true'}]
Filtered results
Left over configs in runtime manager: 
[[1, 0, 0, 3]]
Moving filtered samples in sorted combinations after the window
['0121', '1101', '0130', '1110', '0202', '1003', '1012', '1021', '0023', '0211', '0220', '1200', '0301', '0310', '2001', '1030', '0032', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 5 with window 10
Starting at index 5 with window 10
[1, 0, 0, 3]
not removed
[1, 0, 1, 2]
not removed
[1, 0, 2, 1]
removed
[0, 0, 2, 3]
not removed
[0, 2, 1, 1]
removed
[0, 2, 2, 0]
removed
[1, 2, 0, 0]
removed
[0, 3, 0, 1]
removed
[0, 3, 1, 0]
removed
[2, 0, 0, 1]
removed
Going to 2 tenants
[1, 0, 0, 3]
not removed
[1, 0, 1, 2]
not removed
[0, 0, 2, 3]
not removed
Going to 3 tenants
[1, 0, 0, 3]
not removed
[1, 0, 1, 2]
not removed
[0, 0, 2, 3]
removed
Going to 6 tenants
[1, 0, 0, 3]
not removed
[1, 0, 1, 2]
not removed
Going to 8 tenants
[1, 0, 0, 3]
not removed
[1, 0, 1, 2]
not removed
Going to 9 tenants
[1, 0, 0, 3]
not removed
[1, 0, 1, 2]
not removed
Going to 10 tenants
[1, 0, 0, 3]
not removed
[1, 0, 1, 2]
not removed
Going to 11 tenants
Starting at index 5 with window 2
['0121', '1101', '0130', '1110', '0202', '1003', '1012', '1030', '0032', '0023', '1021', '2010', '0211', '0220', '1200', '0301', '0310', '2001', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/10_tenants-ex1/op/
SAMPLE_LIST
[1, 0, 0, 3] -> 1e-09
There still remains configs to be tested in the current k8-resource-optimizer experiment batch
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Returning adaptive scaler for  10 tenants and 1;0;0;3:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.32051282051282054', 'config': '0', 'score': '-0.32051282051282054', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '143', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '147', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '143', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '147', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '1', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  10 tenants and 1;0;0;3:
Returning adaptive scaler for  10 tenants and 1;0;0;3:
1
255
['0121', '1101', '0130', '1110', '0202', '1003', '1012', '1030', '0032', '0023', '1021', '2010', '0211', '0220', '1200', '0301', '0310', '2001', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}
Starting at: 5
Tenant_nb: 10, maxTenants: 10
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/10_tenants-ex1/op/
SAMPLE_LIST
[1, 0, 0, 3] -> 138
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 2 experiments
Generating new experiment. Saving results on Results/exp3/silver/10_tenants-ex0/op/
Generating new experiment. Saving results on Results/exp3/silver/10_tenants-ex1/op/
SAMPLE_LIST
[0, 2, 0, 2] -> 1e-09
[1, 0, 0, 3] -> 138
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '2', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.28205128205128205', 'best_score': '-0.28205128205128205', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}, {'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.32051282051282054', 'best_score': '-0.32051282051282054', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.32051282051282054', 'best_score': '-0.32051282051282054', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
RESULT FOUND
[1, 0, 0, 3]
Measured completion time is 138.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  10 tenants and 1;0;0;3:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.32051282051282054', 'config': '0', 'score': '-0.32051282051282054', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '143', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '147', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '143', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '147', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '1', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  10 tenants and 1;0;0;3:
Returning adaptive scaler for  10 tenants and 1;0;0;3:
1
255
['0121', '1101', '0130', '1110', '0202', '1003', '1012', '1030', '0032', '0023', '1021', '2010', '0211', '0220', '1200', '0301', '0310', '2001', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}
Starting at: 5
Tenant_nb: 10, maxTenants: 10
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '138', 'Successfull': 'true'}]
RESULT FOUND
[1, 0, 0, 3]
Measured completion time is 138.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  9 tenants and 0;1;0;3:
1
255
Getting next batch of experiments for 9 tenants
Moving filtered samples in sorted combinations after the window
['0022', '1002', '1011', '0031', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 6
Starting at index 0 with window 6
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[1, 0, 1, 1]
removed
[0, 0, 3, 1]
removed
[1, 0, 2, 0]
removed
[2, 0, 0, 0]
removed
Going to 2 tenants
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
Going to 3 tenants
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
Going to 6 tenants
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
Going to 8 tenants
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
Going to 9 tenants
Going to 10 tenants
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
Going to 11 tenants
Starting at index 0 with window 2
['0022', '1002', '0103', '0112', '1011', '0031', '1020', '2000', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 0 2 2
min_conf_dec: 0
0
[0, 0, 2, 2]
1
[1, 0, 0, 2]
{'0': [[0, 2, 2]], '1': [[0, 0, 2]]}
{'0': [[2, 2, 0], [0, 2, 1]]}
{'2': [[2, 0, 0]], '0': [[2, 1, 0]]}
{'2': [[0, 0, 2], [1, 0, 0]]}
Next possible experiments for next nb of tenants
{'0': [[2, 2, 0], [0, 2, 1]]}
Elementstr: [[0,0,2,2];[1,0,0,2]]
Min replicacount:0 0 2 2
Max replicacount:1 0 0 2
Generating new experiment. Saving results on Results/exp3/silver/9_tenants-ex0/op/
SAMPLE_LIST
[1, 0, 0, 2] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '143', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '147', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '143', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  9 tenants and 1;0;0;2:
Returning adaptive scaler for  9 tenants and 1;0;0;2:
1
255
['0022', '1002', '0103', '0112', '1011', '0031', '1020', '2000', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '155', 'Successfull': 'true'}
Starting at: 1
Tenant_nb: 9, maxTenants: 9
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '155', 'Successfull': 'true'}]
Filtered results
Current result is NO RESULT, therefore, we remove all configs with higher resource_cost than current result for higher number of tenants: 10..10
UPDATING RUNTIME MANAGER FOR NB OF TENANTS: 10
Returning adaptive scaler for  10 tenants and 1;0;0;3:
Returning adaptive scaler for  10 tenants and 1;0;0;3:
1
255
REMOVING CONFS FOR NB OF TENANTS: 10
Results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '155', 'Successfull': 'true'}]
Filtered results
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/9_tenants-ex0/op/
SAMPLE_LIST
[1, 0, 0, 2] -> 155
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/9_tenants-ex0/op/
SAMPLE_LIST
[1, 0, 0, 2] -> 155
Results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-1.0333333333333334', 'best_score': '-1', 'SLAName': 'silver', 'CompletionTime': '155', 'Successfull': 'true'}]
Filtered results
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[9880593853]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{}, [], [<src.sla.WorkerConf object at 0x7fabc4cc6650>, <src.sla.WorkerConf object at 0x7fabc4cc6e90>, <src.sla.WorkerConf object at 0x7fabc4cc6990>, <src.sla.WorkerConf object at 0x7fabc4cc6c90>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO RESULT
TIPPED_OVER_CONFS
[[1, 0, 0, 2]]
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE UP DIFF
difference between resource_cost optimal conf and predicted total cost -1
40
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
Removing failed conf
[1, 0, 0, 2]
Tipped over conf already removed:
[1, 0, 0, 2]
Moving filtered samples in sorted combinations after the window
['0022', '0103', '0112', '1011', '0031', '1020', '2000', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 1 with window 10
Starting at index 1 with window 10
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
[1, 0, 1, 1]
removed
[0, 0, 3, 1]
removed
[1, 0, 2, 0]
removed
[2, 0, 0, 0]
removed
[0, 1, 2, 1]
removed
[1, 1, 0, 1]
removed
[0, 1, 3, 0]
removed
[1, 1, 1, 0]
removed
Going to 2 tenants
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 3 tenants
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 6 tenants
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 8 tenants
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 9 tenants
Going to 10 tenants
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 11 tenants
Starting at index 1 with window 2
['0022', '0103', '0112', '0202', '0211', '1011', '0031', '1020', '2000', '0121', '1101', '0130', '1110', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Starting at index 1 with window 2
Getting next batch of experiments for 9 tenants
min_conf: 0 1 0 3
min_conf_dec: 1
1
[0, 1, 0, 3]
2
[0, 1, 1, 2]
{'0': [[1, 0, 3], [1, 1, 2]]}
{'1': [[0, 3, 0], [1, 2, 0]]}
{'0': [[3, 0, 1]], '1': [[2, 0, 1]]}
{'3': [[0, 1, 0]], '2': [[0, 1, 1]]}
Next possible experiments for next nb of tenants
{'0': [[1, 0, 3], [1, 1, 2]]}
Elementstr: [[0,1,0,3];[0,1,1,2]]
Min replicacount:0 1 0 3
Max replicacount:0 1 1 2
Generating new experiment. Saving results on Results/exp3/silver/9_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 3] -> 1e-09
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Saving optimal results into matrix for previous results
Returning adaptive scaler for  8 tenants and 0;0;1;3:
1
255
Getting next batch of experiments for 8 tenants
Moving filtered samples in sorted combinations after the window
['0120', '1100', '0111', '0210', '0201', '0300', '0013', '0022', '1002', '1011', '0031', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 6
Starting at index 0 with window 6
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 1, 1, 1]
removed
[0, 2, 1, 0]
removed
[0, 2, 0, 1]
removed
[0, 3, 0, 0]
removed
Starting at index 6 with window 6
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[1, 0, 1, 1]
removed
[0, 0, 3, 1]
removed
[1, 0, 2, 0]
removed
Going to 2 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
Going to 3 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
Going to 6 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
Going to 8 tenants
Going to 9 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
Going to 10 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
Going to 11 tenants
Starting at index 6 with window 3
['0120', '1100', '0111', '0210', '0201', '0300', '0013', '0022', '1002', '2000', '0103', '0112', '1011', '0031', '1020', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 0 1 3
min_conf_dec: 6
6
[0, 0, 1, 3]
7
[0, 0, 2, 2]
8
[1, 0, 0, 2]
{'0': [[0, 1, 3], [0, 2, 2]], '1': [[0, 0, 2]]}
{'0': [[1, 3, 0], [2, 2, 0], [0, 2, 1]]}
{'1': [[3, 0, 0]], '2': [[2, 0, 0]], '0': [[2, 1, 0]]}
{'3': [[0, 0, 1]], '2': [[0, 0, 2], [1, 0, 0]]}
Next possible experiments for next nb of tenants
{'0': [[1, 3, 0], [2, 2, 0], [0, 2, 1]]}
Elementstr: [[0,0,1,3];[0,0,2,2];[1,0,0,2]]
Min replicacount:0 0 1 3
Max replicacount:1 0 0 2
Generating new experiment. Saving results on Results/exp3/silver/8_tenants-ex0/op/
SAMPLE_LIST
[1, 0, 0, 2] -> 1e-09
[0, 0, 2, 2] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '143', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '147', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '0', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  8 tenants and 1;0;0;2:
Returning adaptive scaler for  8 tenants and 1;0;0;2:
1
255
['0120', '1100', '0111', '0210', '0201', '0300', '0013', '0022', '1002', '2000', '0103', '0112', '1011', '0031', '1020', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '144', 'Successfull': 'true'}
Starting at: 8
Tenant_nb: 8, maxTenants: 8
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '144', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '144', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '144', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '144', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[[0, 0, 2, 2]]
Moving filtered samples in sorted combinations after the window
['0120', '1100', '0111', '0210', '0201', '0300', '0013', '0022', '1002', '2000', '0103', '0112', '1011', '0031', '1020', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 7 with window 10
Starting at index 7 with window 10
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[2, 0, 0, 0]
removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
[1, 0, 1, 1]
removed
[0, 0, 3, 1]
removed
[1, 0, 2, 0]
removed
[0, 1, 2, 1]
removed
[1, 1, 0, 1]
removed
Going to 2 tenants
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 3 tenants
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 6 tenants
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 8 tenants
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 10 tenants
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 1, 0, 3]
not removed
[0, 1, 1, 2]
not removed
Going to 11 tenants
Starting at index 7 with window 4
['0120', '1100', '0111', '0210', '0201', '0300', '0013', '0022', '1002', '0103', '0112', '0130', '1110', '2000', '0202', '0211', '1011', '0031', '1020', '0121', '1101', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/8_tenants-ex0/op/
SAMPLE_LIST
[1, 0, 0, 2] -> 144
[0, 0, 2, 2] -> 1e-09
There still remains configs to be tested in the current k8-resource-optimizer experiment batch
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Returning adaptive scaler for  7 tenants and 1;0;0;2:
1
255
Getting next batch of experiments for 7 tenants
Moving filtered samples in sorted combinations after the window
['0120', '1100', '0111', '0201', '0210', '0300', '0013', '0022', '1002', '2000', '0031', '1011', '1020', '0103', '0112', '0130', '1110', '0121', '1101', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 8
Starting at index 0 with window 8
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 1, 1, 1]
removed
[0, 2, 0, 1]
removed
[0, 2, 1, 0]
removed
[0, 3, 0, 0]
removed
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
Going to 2 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
Going to 3 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
Going to 6 tenants
Going to 8 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
Going to 9 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
Going to 10 tenants
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
Going to 11 tenants
Starting at index 0 with window 2
['0013', '0022', '0120', '1100', '0111', '0201', '0210', '0300', '1002', '2000', '0031', '1011', '1020', '0103', '0112', '0130', '1110', '0121', '1101', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 0 1 3
min_conf_dec: 0
0
[0, 0, 1, 3]
1
[0, 0, 2, 2]
{'0': [[0, 1, 3], [0, 2, 2]]}
{'0': [[1, 3, 0], [2, 2, 0]]}
{'1': [[3, 0, 0]], '2': [[2, 0, 0]]}
{'3': [[0, 0, 1]], '2': [[0, 0, 2]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 3], [0, 2, 2]]}
Elementstr: [[0,0,1,3];[0,0,2,2]]
Min replicacount:0 0 1 3
Max replicacount:0 0 2 2
Generating new experiment. Saving results on Results/exp3/silver/7_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '143', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '147', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '1', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '2', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '0', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  7 tenants and 0;0;1;3:
Returning adaptive scaler for  7 tenants and 0;0;1;3:
1
255
['0013', '0022', '0120', '1100', '0111', '0201', '0210', '0300', '1002', '2000', '0031', '1011', '1020', '0103', '0112', '0130', '1110', '0121', '1101', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '132', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 7, maxTenants: 7
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '132', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '132', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '132', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '132', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/7_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 132
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/7_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 3] -> 132
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2564102564102564', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '132', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.2564102564102564', 'best_score': '-0.2564102564102564', 'SLAName': 'silver', 'CompletionTime': '132', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 3]
Measured completion time is 132.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  6 tenants and 0;1;0;2:
1
255
Getting next batch of experiments for 6 tenants
Moving filtered samples in sorted combinations after the window
['0021', '1010', '1001', '0030', '0102', '0120', '1100', '0111', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 4
Starting at index 0 with window 4
[0, 0, 2, 1]
removed
[1, 0, 1, 0]
removed
[1, 0, 0, 1]
removed
[0, 0, 3, 0]
removed
Starting at index 4 with window 4
[0, 1, 0, 2]
not removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 1, 1, 1]
removed
Going to 2 tenants
[0, 1, 0, 2]
not removed
Going to 3 tenants
[0, 1, 0, 2]
not removed
Going to 6 tenants
[0, 1, 0, 2]
not removed
Going to 8 tenants
[0, 1, 0, 2]
not removed
Going to 9 tenants
[0, 1, 0, 2]
not removed
Going to 10 tenants
[0, 1, 0, 2]
not removed
Going to 11 tenants
Starting at index 4 with window 1
['0021', '1010', '1001', '0030', '0102', '0201', '0120', '1100', '0111', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 1 0 2
min_conf_dec: 4
4
[0, 1, 0, 2]
{'0': [[1, 0, 2]]}
{'1': [[0, 2, 0]]}
{'0': [[2, 0, 1]]}
{'2': [[0, 1, 0]]}
Next possible experiments for next nb of tenants
{'0': [[1, 0, 2]]}
Elementstr: [[0,1,0,2]]
Min replicacount:0 1 0 2
Max replicacount:0 1 0 2
Generating new experiment. Saving results on Results/exp3/silver/6_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 147
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '143', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '147', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '132', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '1', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '2', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '0', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  6 tenants and 0;1;0;2:
Returning adaptive scaler for  6 tenants and 0;1;0;2:
1
255
['0021', '1010', '1001', '0030', '0102', '0201', '0120', '1100', '0111', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '142', 'Successfull': 'true'}
Starting at: 4
Tenant_nb: 6, maxTenants: 6
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '142', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '142', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '142', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '142', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/6_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 142
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/6_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 142
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.20512820512820512', 'best_score': '-0.20512820512820512', 'SLAName': 'silver', 'CompletionTime': '142', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.20512820512820512', 'best_score': '-0.20512820512820512', 'SLAName': 'silver', 'CompletionTime': '142', 'Successfull': 'true'}]
RESULT FOUND
[0, 1, 0, 2]
Measured completion time is 142.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  5 tenants and 0;1;0;2:
1
255
Getting next batch of experiments for 5 tenants
Moving filtered samples in sorted combinations after the window
['0021', '1010', '1001', '0030', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 4
Starting at index 0 with window 4
[0, 0, 2, 1]
removed
[1, 0, 1, 0]
removed
[1, 0, 0, 1]
removed
[0, 0, 3, 0]
removed
Starting at index 4 with window 4
[0, 1, 0, 2]
not removed
[0, 1, 1, 1]
removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
Going to 2 tenants
[0, 1, 0, 2]
not removed
Going to 3 tenants
Going to 6 tenants
[0, 1, 0, 2]
not removed
Going to 7 tenants
[0, 1, 0, 2]
not removed
Going to 8 tenants
[0, 1, 0, 2]
not removed
Going to 9 tenants
[0, 1, 0, 2]
not removed
Going to 10 tenants
[0, 1, 0, 2]
not removed
Going to 11 tenants
Starting at index 4 with window 1
['0021', '1010', '1001', '0030', '0102', '0201', '0111', '0120', '1100', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 1 0 2
min_conf_dec: 4
4
[0, 1, 0, 2]
{'0': [[1, 0, 2]]}
{'1': [[0, 2, 0]]}
{'0': [[2, 0, 1]]}
{'2': [[0, 1, 0]]}
Next possible experiments for next nb of tenants
{'0': [[1, 0, 2]]}
Elementstr: [[0,1,0,2]]
Min replicacount:0 1 0 2
Max replicacount:0 1 0 2
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 137
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '142', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '132', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '1', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '2', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '0', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  5 tenants and 0;1;0;2:
Returning adaptive scaler for  5 tenants and 0;1;0;2:
1
255
['0021', '1010', '1001', '0030', '0102', '0201', '0111', '0120', '1100', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '136', 'Successfull': 'true'}
Starting at: 4
Tenant_nb: 5, maxTenants: 5
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '136', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '136', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '136', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '136', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 136
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 136
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.20512820512820512', 'best_score': '-0.20512820512820512', 'SLAName': 'silver', 'CompletionTime': '136', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.20512820512820512', 'best_score': '-0.20512820512820512', 'SLAName': 'silver', 'CompletionTime': '136', 'Successfull': 'true'}]
RESULT FOUND
[0, 1, 0, 2]
Measured completion time is 136.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '141', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '136', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '142', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '132', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '1', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '2', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '0', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  4 tenants and 0;0;1;2:
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
['0012', '0102', '1100', '0201', '0210', '0021', '1010', '1001', '0030', '0300', '0111', '0120', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '133', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 4, maxTenants: 4
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '133', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '133', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '133', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '133', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 133.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '135', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '133', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '136', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '142', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '132', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '1', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '2', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '0', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  3 tenants and 0;0;1;2:
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
['0012', '0021', '1010', '1001', '0030', '0102', '1100', '0111', '0120', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '130', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 3, maxTenants: 3
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '130', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '130', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '130', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '130', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 130.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '130', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4cd3210>, <src.sla.WorkerConf object at 0x7fabc4cd3bd0>, <src.sla.WorkerConf object at 0x7fabc4cd34d0>, <src.sla.WorkerConf object at 0x7fabc4cd30d0>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_2
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
5
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '130', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4cd3210>, <src.sla.WorkerConf object at 0x7fabc4cd3bd0>, <src.sla.WorkerConf object at 0x7fabc4cd34d0>, <src.sla.WorkerConf object at 0x7fabc4cd30d0>]]]
Conf 0:
130
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;1;2 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '130', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [2, {'cpu': [1], 'memory': [0]}], [1, {'cpu': [], 'memory': []}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 0 with window 1
[0, 0, 1, 2]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  2 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '118', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '130', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '133', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '136', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '142', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '132', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '1', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '2', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '0', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  2 tenants and 0;0;1;2:
Returning adaptive scaler for  2 tenants and 0;0;1;2:
1
255
['0030', '0021', '0012', '1010', '1001', '0120', '0111', '0102', '1100', '0210', '0201', '0300', '0031', '0022', '1020', '0013', '1011', '1002', '2000', '0130', '0121', '0112', '1110', '0103', '1101', '0220', '0211', '0202', '1200', '0310', '0301', '0032', '1030', '0023', '1021', '1012', '2010', '1003', '2001', '0131', '0122', '1120', '0113', '1111', '1102', '2100', '0230', '0221', '0212', '1210', '0203', '1201', '0320', '0311', '0302', '1300', '0033', '1031', '1022', '2020', '1013', '2011', '2002', '3000', '0132', '1130', '0123', '1121', '1112', '2110', '1103', '2101', '0231', '0222', '1220', '0213', '1211', '1202', '2200', '0330', '0321', '0312', '1310', '0303', '1301', '1032', '2030', '1023', '2021', '2012', '3010', '2003', '3001', '0133', '1131', '1122', '2120', '1113', '2111', '2102', '3100', '0232', '1230', '0223', '1221', '1212', '2210', '1203', '2201', '0331', '0322', '1320', '0313', '1311', '1302', '2300', '1033', '2031', '2022', '3020', '2013', '3011', '3002', '1132', '2130', '1123', '2121', '2112', '3110', '2103', '3101', '0233', '1231', '1222', '2220', '1213', '2211', '2202', '3200', '0332', '1330', '0323', '1321', '1312', '2310', '1303', '2301', '2032', '3030', '2023', '3021', '3012', '3003', '1133', '2131', '2122', '3120', '2113', '3111', '3102', '1232', '2230', '1223', '2221', '2212', '3210', '2203', '3201', '0333', '1331', '1322', '2320', '1313', '2311', '2302', '3300', '2033', '3031', '3022', '3013', '2132', '3130', '2123', '3121', '3112', '3103', '1233', '2231', '2222', '3220', '2213', '3211', '3202', '1332', '2330', '1323', '2321', '2312', '3310', '2303', '3301', '3032', '3023', '2133', '3131', '3122', '3113', '2232', '3230', '2223', '3221', '3212', '3203', '1333', '2331', '2322', '3320', '2313', '3311', '3302', '3033', '3132', '3123', '2233', '3231', '3222', '3213', '2332', '3330', '2323', '3321', '3312', '3303', '3133', '3232', '3223', '2333', '3331', '3322', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '122', 'Successfull': 'true'}
Starting at: 2
Tenant_nb: 2, maxTenants: 2
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '122', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '122', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '122', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '122', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 122.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '122', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4d57410>, <src.sla.WorkerConf object at 0x7fabc4d57690>, <src.sla.WorkerConf object at 0x7fabc4d57cd0>, <src.sla.WorkerConf object at 0x7fabc4d578d0>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_2
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
4
SCALE DOWN DIFF
Rescaling worker 3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 2, 'memory': 2}
{'cpu': 3, 'memory': 2}
6
4
2
3
Moving filtered samples in sorted combinations after the window
['0030', '0021', '0012', '1010', '0120', '1001', '0111', '0102', '1100', '0210', '0201', '0031', '0300', '0022', '1020', '0130', '0013', '1011', '0121', '1002', '2000', '0112', '1110', '0220', '0103', '1101', '0211', '0202', '1200', '0310', '0032', '1030', '0301', '0023', '1021', '0131', '1012', '2010', '0122', '1120', '0230', '1003', '2001', '0113', '1111', '0221', '1102', '2100', '0212', '1210', '0320', '0203', '1201', '0311', '0033', '1031', '0302', '1300', '1022', '2020', '0132', '1130', '1013', '2011', '0123', '1121', '0231', '2002', '3000', '1112', '2110', '0222', '1220', '0330', '1103', '2101', '0213', '1211', '0321', '1202', '2200', '0312', '1310', '1032', '2030', '0303', '1301', '1023', '2021', '0133', '1131', '2012', '3010', '1122', '2120', '0232', '1230', '2003', '3001', '1113', '2111', '0223', '1221', '0331', '2102', '3100', '1212', '2210', '0322', '1320', '1203', '2201', '0313', '1311', '1033', '2031', '1302', '2300', '2022', '3020', '1132', '2130', '2013', '3011', '1123', '2121', '0233', '1231', '3002', '2112', '3110', '1222', '2220', '0332', '1330', '2103', '3101', '1213', '2211', '0323', '1321', '2202', '3200', '1312', '2310', '2032', '3030', '1303', '2301', '2023', '3021', '1133', '2131', '3012', '2122', '3120', '1232', '2230', '3003', '2113', '3111', '1223', '2221', '0333', '1331', '3102', '2212', '3210', '1322', '2320', '2203', '3201', '1313', '2311', '2033', '3031', '2302', '3300', '3022', '2132', '3130', '3013', '2123', '3121', '1233', '2231', '3112', '2222', '3220', '1332', '2330', '3103', '2213', '3211', '1323', '2321', '3202', '2312', '3310', '3032', '2303', '3301', '3023', '2133', '3131', '3122', '2232', '3230', '3113', '2223', '3221', '1333', '2331', '3212', '2322', '3320', '3203', '2313', '3311', '3033', '3302', '3132', '3123', '2233', '3231', '3222', '2332', '3330', '3213', '2323', '3321', '3312', '3303', '3133', '3232', '3223', '2333', '3331', '3322', '3313', '3233', '3332', '3323', '3333']
Filtering from index 2 with window 10
Starting at index 2 with window 10
[0, 0, 1, 2]
not removed
[1, 0, 1, 0]
SCALING INDEX = 2
removed
[0, 1, 2, 0]
SCALING INDEX = 2
removed
[1, 0, 0, 1]
SCALING INDEX = 2
removed
[0, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 1, 0, 2]
SCALING INDEX = 2
removed
[1, 1, 0, 0]
SCALING INDEX = 2
removed
[0, 2, 1, 0]
SCALING INDEX = 2
removed
[0, 2, 0, 1]
SCALING INDEX = 2
removed
[0, 0, 3, 1]
SCALING INDEX = 2
removed
Going to 2 tenants
Going to 3 tenants
[0, 0, 1, 2]
SCALING INDEX = 2
removed
Starting at index 12 with window 10
[0, 0, 3, 1]
SCALING INDEX = 2
removed
[0, 0, 2, 2]
SCALING INDEX = 2
removed
[1, 0, 2, 0]
SCALING INDEX = 2
removed
[0, 1, 3, 0]
SCALING INDEX = 2
removed
[0, 0, 1, 3]
SCALING INDEX = 2
removed
[1, 0, 1, 1]
SCALING INDEX = 2
removed
[0, 1, 2, 1]
SCALING INDEX = 2
removed
[1, 0, 0, 2]
SCALING INDEX = 2
removed
[2, 0, 0, 0]
SCALING INDEX = 2
removed
[0, 1, 1, 2]
SCALING INDEX = 2
removed
Starting at index 22 with window 10
[1, 1, 1, 0]
SCALING INDEX = 2
removed
[0, 2, 2, 0]
SCALING INDEX = 2
removed
[0, 1, 0, 3]
SCALING INDEX = 2
removed
[1, 1, 0, 1]
SCALING INDEX = 2
removed
[0, 2, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 0, 2]
SCALING INDEX = 2
removed
[1, 2, 0, 0]
SCALING INDEX = 2
removed
[0, 3, 1, 0]
SCALING INDEX = 2
removed
[0, 0, 3, 2]
SCALING INDEX = 2
removed
[1, 0, 3, 0]
SCALING INDEX = 2
removed
Starting at index 32 with window 10
[0, 3, 0, 1]
SCALING INDEX = 2
removed
[0, 0, 2, 3]
SCALING INDEX = 2
removed
[1, 0, 2, 1]
SCALING INDEX = 2
removed
[0, 1, 3, 1]
SCALING INDEX = 2
removed
[1, 0, 1, 2]
SCALING INDEX = 2
removed
[2, 0, 1, 0]
SCALING INDEX = 2
removed
[0, 1, 2, 2]
SCALING INDEX = 2
removed
[1, 1, 2, 0]
SCALING INDEX = 2
removed
[0, 2, 3, 0]
SCALING INDEX = 2
removed
[1, 0, 0, 3]
SCALING INDEX = 2
removed
Starting at index 42 with window 10
[2, 0, 0, 1]
SCALING INDEX = 2
removed
[0, 1, 1, 3]
SCALING INDEX = 2
removed
[1, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 2, 1]
SCALING INDEX = 2
removed
[1, 1, 0, 2]
SCALING INDEX = 2
removed
[2, 1, 0, 0]
SCALING INDEX = 2
removed
[0, 2, 1, 2]
SCALING INDEX = 2
removed
[1, 2, 1, 0]
SCALING INDEX = 2
removed
[0, 3, 2, 0]
SCALING INDEX = 2
removed
[0, 2, 0, 3]
SCALING INDEX = 2
removed
Starting at index 52 with window 10
[1, 2, 0, 1]
SCALING INDEX = 2
removed
[0, 3, 1, 1]
SCALING INDEX = 2
removed
[0, 0, 3, 3]
SCALING INDEX = 2
removed
[1, 0, 3, 1]
SCALING INDEX = 2
removed
[0, 3, 0, 2]
SCALING INDEX = 2
removed
[1, 3, 0, 0]
SCALING INDEX = 2
removed
[1, 0, 2, 2]
SCALING INDEX = 2
removed
[2, 0, 2, 0]
SCALING INDEX = 2
removed
[0, 1, 3, 2]
SCALING INDEX = 2
removed
[1, 1, 3, 0]
SCALING INDEX = 2
removed
Starting at index 62 with window 10
[1, 0, 1, 3]
SCALING INDEX = 2
removed
[2, 0, 1, 1]
SCALING INDEX = 2
removed
[0, 1, 2, 3]
SCALING INDEX = 2
removed
[1, 1, 2, 1]
SCALING INDEX = 2
removed
[0, 2, 3, 1]
SCALING INDEX = 2
removed
[2, 0, 0, 2]
SCALING INDEX = 2
removed
[3, 0, 0, 0]
SCALING INDEX = 2
removed
[1, 1, 1, 2]
SCALING INDEX = 2
removed
[2, 1, 1, 0]
SCALING INDEX = 2
removed
[0, 2, 2, 2]
SCALING INDEX = 2
removed
Starting at index 72 with window 10
[1, 2, 2, 0]
SCALING INDEX = 2
removed
[0, 3, 3, 0]
SCALING INDEX = 2
removed
[1, 1, 0, 3]
SCALING INDEX = 2
removed
[2, 1, 0, 1]
SCALING INDEX = 2
removed
[0, 2, 1, 3]
SCALING INDEX = 2
removed
[1, 2, 1, 1]
SCALING INDEX = 2
removed
[0, 3, 2, 1]
SCALING INDEX = 2
removed
[1, 2, 0, 2]
SCALING INDEX = 2
removed
[2, 2, 0, 0]
SCALING INDEX = 2
removed
[0, 3, 1, 2]
SCALING INDEX = 2
removed
Starting at index 82 with window 10
[1, 3, 1, 0]
SCALING INDEX = 2
removed
[1, 0, 3, 2]
SCALING INDEX = 2
removed
[2, 0, 3, 0]
SCALING INDEX = 2
removed
[0, 3, 0, 3]
SCALING INDEX = 2
removed
[1, 3, 0, 1]
SCALING INDEX = 2
removed
[1, 0, 2, 3]
SCALING INDEX = 2
removed
[2, 0, 2, 1]
SCALING INDEX = 2
removed
[0, 1, 3, 3]
SCALING INDEX = 2
removed
[1, 1, 3, 1]
SCALING INDEX = 2
removed
[2, 0, 1, 2]
SCALING INDEX = 2
removed
Starting at index 92 with window 10
[3, 0, 1, 0]
SCALING INDEX = 2
removed
[1, 1, 2, 2]
SCALING INDEX = 2
removed
[2, 1, 2, 0]
SCALING INDEX = 2
removed
[0, 2, 3, 2]
SCALING INDEX = 2
removed
[1, 2, 3, 0]
SCALING INDEX = 2
removed
[2, 0, 0, 3]
SCALING INDEX = 2
removed
[3, 0, 0, 1]
SCALING INDEX = 2
removed
[1, 1, 1, 3]
SCALING INDEX = 2
removed
[2, 1, 1, 1]
SCALING INDEX = 2
removed
[0, 2, 2, 3]
SCALING INDEX = 2
removed
Starting at index 102 with window 10
[1, 2, 2, 1]
SCALING INDEX = 2
removed
[0, 3, 3, 1]
SCALING INDEX = 2
removed
[2, 1, 0, 2]
SCALING INDEX = 2
removed
[3, 1, 0, 0]
SCALING INDEX = 2
removed
[1, 2, 1, 2]
SCALING INDEX = 2
removed
[2, 2, 1, 0]
SCALING INDEX = 2
removed
[0, 3, 2, 2]
SCALING INDEX = 2
removed
[1, 3, 2, 0]
SCALING INDEX = 2
removed
[1, 2, 0, 3]
SCALING INDEX = 2
removed
[2, 2, 0, 1]
SCALING INDEX = 2
removed
Starting at index 112 with window 10
[0, 3, 1, 3]
SCALING INDEX = 2
removed
[1, 3, 1, 1]
SCALING INDEX = 2
removed
[1, 0, 3, 3]
SCALING INDEX = 2
removed
[2, 0, 3, 1]
SCALING INDEX = 2
removed
[1, 3, 0, 2]
SCALING INDEX = 2
removed
[2, 3, 0, 0]
SCALING INDEX = 2
removed
[2, 0, 2, 2]
SCALING INDEX = 2
removed
[3, 0, 2, 0]
SCALING INDEX = 2
removed
[1, 1, 3, 2]
SCALING INDEX = 2
removed
[2, 1, 3, 0]
SCALING INDEX = 2
removed
Starting at index 122 with window 10
[2, 0, 1, 3]
SCALING INDEX = 2
removed
[3, 0, 1, 1]
SCALING INDEX = 2
removed
[1, 1, 2, 3]
SCALING INDEX = 2
removed
[2, 1, 2, 1]
SCALING INDEX = 2
removed
[0, 2, 3, 3]
SCALING INDEX = 2
removed
[1, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 0, 0, 2]
SCALING INDEX = 2
removed
[2, 1, 1, 2]
SCALING INDEX = 2
removed
[3, 1, 1, 0]
SCALING INDEX = 2
removed
[1, 2, 2, 2]
SCALING INDEX = 2
removed
Starting at index 132 with window 10
[2, 2, 2, 0]
SCALING INDEX = 2
removed
[0, 3, 3, 2]
SCALING INDEX = 2
removed
[1, 3, 3, 0]
SCALING INDEX = 2
removed
[2, 1, 0, 3]
SCALING INDEX = 2
removed
[3, 1, 0, 1]
SCALING INDEX = 2
removed
[1, 2, 1, 3]
SCALING INDEX = 2
removed
[2, 2, 1, 1]
SCALING INDEX = 2
removed
[0, 3, 2, 3]
SCALING INDEX = 2
removed
[1, 3, 2, 1]
SCALING INDEX = 2
removed
[2, 2, 0, 2]
SCALING INDEX = 2
removed
Starting at index 142 with window 10
[3, 2, 0, 0]
SCALING INDEX = 2
removed
[1, 3, 1, 2]
SCALING INDEX = 2
removed
[2, 3, 1, 0]
SCALING INDEX = 2
removed
[2, 0, 3, 2]
SCALING INDEX = 2
removed
[3, 0, 3, 0]
SCALING INDEX = 2
removed
[1, 3, 0, 3]
SCALING INDEX = 2
removed
[2, 3, 0, 1]
SCALING INDEX = 2
removed
[2, 0, 2, 3]
SCALING INDEX = 2
removed
[3, 0, 2, 1]
SCALING INDEX = 2
removed
[1, 1, 3, 3]
SCALING INDEX = 2
removed
Starting at index 152 with window 10
[2, 1, 3, 1]
SCALING INDEX = 2
removed
[3, 0, 1, 2]
SCALING INDEX = 2
removed
[2, 1, 2, 2]
SCALING INDEX = 2
removed
[3, 1, 2, 0]
SCALING INDEX = 2
removed
[1, 2, 3, 2]
SCALING INDEX = 2
removed
[2, 2, 3, 0]
SCALING INDEX = 2
removed
[3, 0, 0, 3]
SCALING INDEX = 2
removed
[2, 1, 1, 3]
SCALING INDEX = 2
removed
[3, 1, 1, 1]
SCALING INDEX = 2
removed
[1, 2, 2, 3]
SCALING INDEX = 2
removed
Starting at index 162 with window 10
[2, 2, 2, 1]
SCALING INDEX = 2
removed
[0, 3, 3, 3]
SCALING INDEX = 2
removed
[1, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 0, 2]
SCALING INDEX = 2
removed
[2, 2, 1, 2]
SCALING INDEX = 2
removed
[3, 2, 1, 0]
SCALING INDEX = 2
removed
[1, 3, 2, 2]
SCALING INDEX = 2
removed
[2, 3, 2, 0]
SCALING INDEX = 2
removed
[2, 2, 0, 3]
SCALING INDEX = 2
removed
[3, 2, 0, 1]
SCALING INDEX = 2
removed
Starting at index 172 with window 10
[1, 3, 1, 3]
SCALING INDEX = 2
removed
[2, 3, 1, 1]
SCALING INDEX = 2
removed
[2, 0, 3, 3]
SCALING INDEX = 2
removed
[3, 0, 3, 1]
SCALING INDEX = 2
removed
[2, 3, 0, 2]
SCALING INDEX = 2
removed
[3, 3, 0, 0]
SCALING INDEX = 2
removed
[3, 0, 2, 2]
SCALING INDEX = 2
removed
[2, 1, 3, 2]
SCALING INDEX = 2
removed
[3, 1, 3, 0]
SCALING INDEX = 2
removed
[3, 0, 1, 3]
SCALING INDEX = 2
removed
Starting at index 182 with window 10
[2, 1, 2, 3]
SCALING INDEX = 2
removed
[3, 1, 2, 1]
SCALING INDEX = 2
removed
[1, 2, 3, 3]
SCALING INDEX = 2
removed
[2, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 1, 2]
SCALING INDEX = 2
removed
[2, 2, 2, 2]
SCALING INDEX = 2
removed
[3, 2, 2, 0]
SCALING INDEX = 2
removed
[1, 3, 3, 2]
SCALING INDEX = 2
removed
[2, 3, 3, 0]
SCALING INDEX = 2
removed
[3, 1, 0, 3]
SCALING INDEX = 2
removed
Starting at index 192 with window 10
[2, 2, 1, 3]
SCALING INDEX = 2
removed
[3, 2, 1, 1]
SCALING INDEX = 2
removed
[1, 3, 2, 3]
SCALING INDEX = 2
removed
[2, 3, 2, 1]
SCALING INDEX = 2
removed
[3, 2, 0, 2]
SCALING INDEX = 2
removed
[2, 3, 1, 2]
SCALING INDEX = 2
removed
[3, 3, 1, 0]
SCALING INDEX = 2
removed
[3, 0, 3, 2]
SCALING INDEX = 2
removed
[2, 3, 0, 3]
SCALING INDEX = 2
removed
[3, 3, 0, 1]
SCALING INDEX = 2
removed
Starting at index 202 with window 10
[3, 0, 2, 3]
SCALING INDEX = 2
removed
[2, 1, 3, 3]
SCALING INDEX = 2
removed
[3, 1, 3, 1]
SCALING INDEX = 2
removed
[3, 1, 2, 2]
SCALING INDEX = 2
removed
[2, 2, 3, 2]
SCALING INDEX = 2
removed
[3, 2, 3, 0]
SCALING INDEX = 2
removed
[3, 1, 1, 3]
SCALING INDEX = 2
removed
[2, 2, 2, 3]
SCALING INDEX = 2
removed
[3, 2, 2, 1]
SCALING INDEX = 2
removed
[1, 3, 3, 3]
SCALING INDEX = 2
removed
Starting at index 212 with window 10
[2, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 2, 1, 2]
SCALING INDEX = 2
removed
[2, 3, 2, 2]
SCALING INDEX = 2
removed
[3, 3, 2, 0]
SCALING INDEX = 2
removed
[3, 2, 0, 3]
SCALING INDEX = 2
removed
[2, 3, 1, 3]
SCALING INDEX = 2
removed
[3, 3, 1, 1]
SCALING INDEX = 2
removed
[3, 0, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 0, 2]
SCALING INDEX = 2
removed
[3, 1, 3, 2]
SCALING INDEX = 2
removed
Starting at index 222 with window 10
[3, 1, 2, 3]
SCALING INDEX = 2
removed
[2, 2, 3, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 1]
SCALING INDEX = 2
removed
[3, 2, 2, 2]
SCALING INDEX = 2
removed
[2, 3, 3, 2]
SCALING INDEX = 2
removed
[3, 3, 3, 0]
SCALING INDEX = 2
removed
[3, 2, 1, 3]
SCALING INDEX = 2
removed
[2, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 1]
SCALING INDEX = 2
removed
[3, 3, 1, 2]
SCALING INDEX = 2
removed
Starting at index 232 with window 10
[3, 3, 0, 3]
SCALING INDEX = 2
removed
[3, 1, 3, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 2]
SCALING INDEX = 2
removed
[3, 2, 2, 3]
SCALING INDEX = 2
removed
[2, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 1]
SCALING INDEX = 2
removed
[3, 3, 2, 2]
SCALING INDEX = 2
removed
[3, 3, 1, 3]
SCALING INDEX = 2
removed
[3, 2, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 2]
SCALING INDEX = 2
removed
Starting at index 242 with window 10
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
[3, 3, 2, 3]
SCALING INDEX = 2
removed
[3, 3, 3, 3]
SCALING INDEX = 2
removed
Starting at index 252 with window 10
No config exists that meets all filtering constraints
Recursive down scaling disabled
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
4
Passing over worker in previously failed scaling
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '122', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc4d57410>, <src.sla.WorkerConf object at 0x7fabc4d57690>, <src.sla.WorkerConf object at 0x7fabc4d57cd0>, <src.sla.WorkerConf object at 0x7fabc4d578d0>]], [{}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc745f410>, <src.sla.WorkerConf object at 0x7fabc4cd3c10>, <src.sla.WorkerConf object at 0x7fabc4cd3510>, <src.sla.WorkerConf object at 0x7fabc4cd3110>]]]
Conf 0:
122
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;1;2 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '122', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 2 with window 1
[0, 0, 1, 2]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
Getting next batch of experiments for 1 tenants
Moving filtered samples in sorted combinations after the window
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '0021', '1001', '0030', '1010', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 6
Starting at index 0 with window 6
Going to 2 tenants
[0, 0, 1, 1]
not removed
[0, 0, 2, 0]
removed
[1, 0, 0, 0]
removed
[0, 1, 0, 1]
removed
[0, 1, 1, 0]
removed
[0, 2, 0, 0]
removed
Going to 3 tenants
[0, 0, 1, 1]
not removed
Going to 4 tenants
[0, 0, 1, 1]
not removed
Going to 5 tenants
[0, 0, 1, 1]
removed
Starting at index 6 with window 6
Going to 2 tenants
[0, 2, 0, 0]
removed
[0, 0, 1, 2]
not removed
[0, 0, 2, 1]
not removed
[1, 0, 0, 1]
removed
[0, 0, 3, 0]
removed
[1, 0, 1, 0]
removed
Going to 3 tenants
[0, 0, 1, 2]
not removed
[0, 0, 2, 1]
not removed
Going to 4 tenants
[0, 0, 1, 2]
not removed
[0, 0, 2, 1]
not removed
Going to 5 tenants
[0, 0, 1, 2]
not removed
[0, 0, 2, 1]
removed
Going to 6 tenants
[0, 0, 1, 2]
not removed
Going to 7 tenants
[0, 0, 1, 2]
not removed
Going to 8 tenants
[0, 0, 1, 2]
not removed
Going to 9 tenants
[0, 0, 1, 2]
not removed
Going to 10 tenants
[0, 0, 1, 2]
not removed
Going to 11 tenants
Starting at index 6 with window 1
['0011', '0003', '0020', '1000', '0101', '0110', '0012', '0200', '0021', '0102', '0111', '1001', '0030', '1010', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 0 1 2
min_conf_dec: 6
6
[0, 0, 1, 2]
{'0': [[0, 1, 2]]}
{'0': [[1, 2, 0]]}
{'1': [[2, 0, 0]]}
{'2': [[0, 0, 1]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 2]]}
Elementstr: [[0,0,1,2]]
Min replicacount:0 0 1 2
Max replicacount:0 0 1 2
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '122', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '130', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '133', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '136', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '142', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '132', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '1', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '2', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '0', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;1;2:
Returning adaptive scaler for  1 tenants and 0;0;1;2:
1
255
['0011', '0003', '0020', '1000', '0101', '0110', '0012', '0200', '0021', '0102', '0111', '1001', '0030', '1010', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}
Starting at: 6
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 119
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 119
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 119.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDozn
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc7475910>, <src.sla.WorkerConf object at 0x7fabc7475450>, <src.sla.WorkerConf object at 0x7fabc7475650>, <src.sla.WorkerConf object at 0x7fabc74752d0>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_2
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fabc7475910>, <src.sla.WorkerConf object at 0x7fabc7475450>, <src.sla.WorkerConf object at 0x7fabc7475650>, <src.sla.WorkerConf object at 0x7fabc74752d0>]]]
Conf 0:
119
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;1;2 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=True}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 7 with window 1
[0, 0, 1, 2]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  1 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '119', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '10': {'CompletionTime': '138', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '122', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '130', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '133', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '136', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '6': {'CompletionTime': '142', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20512820512820512', 'config': '0', 'score': '-0.20512820512820512', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '7': {'CompletionTime': '132', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '0', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '8': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2564102564102564', 'config': '1', 'score': '-0.2564102564102564', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '2', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '9': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2692307692307692', 'config': '0', 'score': '-0.2692307692307692', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}