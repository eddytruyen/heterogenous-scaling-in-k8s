 * Serving Flask app 'server' (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: on
Starting at: 0
using curve-fitted scaling function to estimate configuration for tenants 1
1
255
total_cost = 8
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
Returning adaptive scaler for  1 tenants and 0;0;0;1:
1
255
Getting next batch of experiments for 1 tenants
Moving filtered samples in sorted combinations after the window
['0001', '0010', '0100', '0002', '0011', '0020', '0101', '1000', '0110', '0003', '0200', '0012', '0021', '0102', '1001', '0030', '0111', '1010', '0120', '0201', '1100', '0013', '0210', '0022', '0103', '0300', '1002', '0031', '0112', '1011', '0121', '0202', '1020', '1101', '2000', '0130', '0211', '1110', '0023', '0220', '0301', '1003', '1200', '0032', '0113', '0310', '1012', '0122', '0203', '1021', '1102', '2001', '0131', '0212', '1030', '1111', '2010', '0221', '0302', '1120', '1201', '2100', '0033', '0230', '0311', '1013', '1210', '0123', '0320', '1022', '1103', '1300', '2002', '0132', '0213', '1031', '1112', '2011', '0222', '0303', '1121', '1202', '2020', '2101', '3000', '0231', '0312', '1130', '1211', '2110', '0321', '1023', '1220', '1301', '2003', '2200', '0133', '0330', '1032', '1113', '1310', '2012', '0223', '1122', '1203', '2021', '2102', '3001', '0232', '0313', '1131', '1212', '2030', '2111', '3010', '0322', '1221', '1302', '2120', '2201', '3100', '0331', '1033', '1230', '1311', '2013', '2210', '1123', '1320', '2022', '2103', '2300', '3002', '0233', '1132', '1213', '2031', '2112', '3011', '0323', '1222', '1303', '2121', '2202', '3020', '3101', '0332', '1231', '1312', '2130', '2211', '3110', '1321', '2023', '2220', '2301', '3003', '3200', '1133', '1330', '2032', '2113', '2310', '3012', '1223', '2122', '2203', '3021', '3102', '0333', '1232', '1313', '2131', '2212', '3030', '3111', '1322', '2221', '2302', '3120', '3201', '1331', '2033', '2230', '2311', '3013', '3210', '2123', '2320', '3022', '3103', '3300', '1233', '2132', '2213', '3031', '3112', '1323', '2222', '2303', '3121', '3202', '1332', '2231', '2312', '3130', '3211', '2321', '3023', '3220', '3301', '2133', '2330', '3032', '3113', '3310', '2223', '3122', '3203', '1333', '2232', '2313', '3131', '3212', '2322', '3221', '3302', '2331', '3033', '3230', '3311', '3123', '3320', '2233', '3132', '3213', '2323', '3222', '3303', '2332', '3231', '3312', '3321', '3133', '3330', '3223', '2333', '3232', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 10
Starting at index 0 with window 10
[0, 0, 0, 1]
not removed
[0, 0, 1, 0]
not removed
[0, 1, 0, 0]
not removed
[0, 0, 0, 2]
not removed
[0, 0, 1, 1]
not removed
[0, 0, 2, 0]
not removed
[0, 1, 0, 1]
not removed
[1, 0, 0, 0]
not removed
[0, 1, 1, 0]
not removed
[0, 0, 0, 3]
not removed
Starting at index 0 with window 10
['0001', '0010', '0100', '0002', '0011', '0020', '0101', '1000', '0110', '0003', '0200', '0012', '0021', '0102', '1001', '0030', '0111', '1010', '0120', '0201', '1100', '0013', '0210', '0022', '0103', '0300', '1002', '0031', '0112', '1011', '0121', '0202', '1020', '1101', '2000', '0130', '0211', '1110', '0023', '0220', '0301', '1003', '1200', '0032', '0113', '0310', '1012', '0122', '0203', '1021', '1102', '2001', '0131', '0212', '1030', '1111', '2010', '0221', '0302', '1120', '1201', '2100', '0033', '0230', '0311', '1013', '1210', '0123', '0320', '1022', '1103', '1300', '2002', '0132', '0213', '1031', '1112', '2011', '0222', '0303', '1121', '1202', '2020', '2101', '3000', '0231', '0312', '1130', '1211', '2110', '0321', '1023', '1220', '1301', '2003', '2200', '0133', '0330', '1032', '1113', '1310', '2012', '0223', '1122', '1203', '2021', '2102', '3001', '0232', '0313', '1131', '1212', '2030', '2111', '3010', '0322', '1221', '1302', '2120', '2201', '3100', '0331', '1033', '1230', '1311', '2013', '2210', '1123', '1320', '2022', '2103', '2300', '3002', '0233', '1132', '1213', '2031', '2112', '3011', '0323', '1222', '1303', '2121', '2202', '3020', '3101', '0332', '1231', '1312', '2130', '2211', '3110', '1321', '2023', '2220', '2301', '3003', '3200', '1133', '1330', '2032', '2113', '2310', '3012', '1223', '2122', '2203', '3021', '3102', '0333', '1232', '1313', '2131', '2212', '3030', '3111', '1322', '2221', '2302', '3120', '3201', '1331', '2033', '2230', '2311', '3013', '3210', '2123', '2320', '3022', '3103', '3300', '1233', '2132', '2213', '3031', '3112', '1323', '2222', '2303', '3121', '3202', '1332', '2231', '2312', '3130', '3211', '2321', '3023', '3220', '3301', '2133', '2330', '3032', '3113', '3310', '2223', '3122', '3203', '1333', '2232', '2313', '3131', '3212', '2322', '3221', '3302', '2331', '3033', '3230', '3311', '3123', '3320', '2233', '3132', '3213', '2323', '3222', '3303', '2332', '3231', '3312', '3321', '3133', '3330', '3223', '2333', '3232', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 0 0 1
min_conf_dec: 0
0
[0, 0, 0, 1]
1
[0, 0, 1, 0]
2
[0, 1, 0, 0]
3
[0, 0, 0, 2]
4
[0, 0, 1, 1]
5
[0, 0, 2, 0]
6
[0, 1, 0, 1]
7
[1, 0, 0, 0]
8
[0, 1, 1, 0]
9
[0, 0, 0, 3]
{'0': [[0, 0, 1], [0, 1, 0], [1, 0, 0], [0, 0, 2], [0, 1, 1], [0, 2, 0], [1, 0, 1], [1, 1, 0], [0, 0, 3]], '1': [[0, 0, 0]]}
{'0': [[0, 1, 0], [1, 0, 0], [0, 2, 0], [1, 1, 0], [2, 0, 0], [0, 0, 1], [0, 3, 0]], '1': [[0, 0, 0], [0, 1, 0], [1, 0, 0]]}
{'0': [[1, 0, 0], [0, 0, 1], [2, 0, 0], [1, 0, 1], [0, 1, 0], [3, 0, 0]], '1': [[0, 0, 0], [1, 0, 0], [0, 0, 1]], '2': [[0, 0, 0]]}
{'1': [[0, 0, 0], [0, 0, 1], [0, 1, 0]], '0': [[0, 0, 1], [0, 1, 0], [0, 0, 2], [1, 0, 0], [0, 1, 1]], '2': [[0, 0, 0]], '3': [[0, 0, 0]]}
Next possible experiments for next nb of tenants
{'0': [[0, 0, 1], [0, 1, 0], [1, 0, 0], [0, 0, 2], [0, 1, 1], [0, 2, 0], [1, 0, 1], [1, 1, 0], [0, 0, 3]], '1': [[0, 0, 0]]}
Elementstr: [[0,0,0,1];[0,0,1,0];[0,1,0,0];[0,0,0,2];[0,0,1,1];[0,0,2,0];[0,1,0,1];[0,1,1,0];[0,0,0,3]]
Min replicacount:0 0 0 1
Max replicacount:0 0 0 3
Elementstr: [[1,0,0,0]]
Min replicacount:1 0 0 0
Max replicacount:1 0 0 0
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 1e-09
[0, 0, 0, 2] -> 1e-09
[0, 0, 1, 0] -> 1e-09
[0, 1, 1, 0] -> 1e-09
[0, 1, 0, 0] -> 1e-09
[0, 0, 2, 0] -> 1e-09
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex1/op/
SAMPLE_LIST
[1, 0, 0, 0] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.16', 'config': '0', 'score': '-0.16', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;0;3:
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
['0001', '0010', '0100', '0002', '0011', '0020', '0101', '1000', '0110', '0003', '0200', '0012', '0021', '0102', '1001', '0030', '0111', '1010', '0120', '0201', '1100', '0013', '0210', '0022', '0103', '0300', '1002', '0031', '0112', '1011', '0121', '0202', '1020', '1101', '2000', '0130', '0211', '1110', '0023', '0220', '0301', '1003', '1200', '0032', '0113', '0310', '1012', '0122', '0203', '1021', '1102', '2001', '0131', '0212', '1030', '1111', '2010', '0221', '0302', '1120', '1201', '2100', '0033', '0230', '0311', '1013', '1210', '0123', '0320', '1022', '1103', '1300', '2002', '0132', '0213', '1031', '1112', '2011', '0222', '0303', '1121', '1202', '2020', '2101', '3000', '0231', '0312', '1130', '1211', '2110', '0321', '1023', '1220', '1301', '2003', '2200', '0133', '0330', '1032', '1113', '1310', '2012', '0223', '1122', '1203', '2021', '2102', '3001', '0232', '0313', '1131', '1212', '2030', '2111', '3010', '0322', '1221', '1302', '2120', '2201', '3100', '0331', '1033', '1230', '1311', '2013', '2210', '1123', '1320', '2022', '2103', '2300', '3002', '0233', '1132', '1213', '2031', '2112', '3011', '0323', '1222', '1303', '2121', '2202', '3020', '3101', '0332', '1231', '1312', '2130', '2211', '3110', '1321', '2023', '2220', '2301', '3003', '3200', '1133', '1330', '2032', '2113', '2310', '3012', '1223', '2122', '2203', '3021', '3102', '0333', '1232', '1313', '2131', '2212', '3030', '3111', '1322', '2221', '2302', '3120', '3201', '1331', '2033', '2230', '2311', '3013', '3210', '2123', '2320', '3022', '3103', '3300', '1233', '2132', '2213', '3031', '3112', '1323', '2222', '2303', '3121', '3202', '1332', '2231', '2312', '3130', '3211', '2321', '3023', '3220', '3301', '2133', '2330', '3032', '3113', '3310', '2223', '3122', '3203', '1333', '2232', '2313', '3131', '3212', '2322', '3221', '3302', '2331', '3033', '3230', '3311', '3123', '3320', '2233', '3132', '3213', '2323', '3222', '3303', '2332', '3231', '3312', '3321', '3133', '3330', '3223', '2333', '3232', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '167', 'Successfull': 'true'}
Starting at: 9
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '167', 'Successfull': 'true'}]
Filtered results
Current result is NO RESULT, therefore, we remove all configs with higher resource_cost than current result for higher number of tenants: 2..1
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '167', 'Successfull': 'true'}]
Filtered results
Left over configs in runtime manager: 
[[0, 0, 0, 2], [0, 0, 1, 0], [0, 1, 1, 0], [0, 1, 0, 0], [0, 0, 2, 0], [1, 0, 0, 0]]
Moving filtered samples in sorted combinations after the window
['0001', '0010', '0100', '0002', '0011', '0020', '0101', '1000', '0110', '0003', '0200', '0012', '0021', '0102', '1001', '0030', '0111', '1010', '0120', '0201', '1100', '0013', '0210', '0022', '0103', '0300', '1002', '0031', '0112', '1011', '0121', '0202', '1020', '1101', '2000', '0130', '0211', '1110', '0023', '0220', '0301', '1003', '1200', '0032', '0113', '0310', '1012', '0122', '0203', '1021', '1102', '2001', '0131', '0212', '1030', '1111', '2010', '0221', '0302', '1120', '1201', '2100', '0033', '0230', '0311', '1013', '1210', '0123', '0320', '1022', '1103', '1300', '2002', '0132', '0213', '1031', '1112', '2011', '0222', '0303', '1121', '1202', '2020', '2101', '3000', '0231', '0312', '1130', '1211', '2110', '0321', '1023', '1220', '1301', '2003', '2200', '0133', '0330', '1032', '1113', '1310', '2012', '0223', '1122', '1203', '2021', '2102', '3001', '0232', '0313', '1131', '1212', '2030', '2111', '3010', '0322', '1221', '1302', '2120', '2201', '3100', '0331', '1033', '1230', '1311', '2013', '2210', '1123', '1320', '2022', '2103', '2300', '3002', '0233', '1132', '1213', '2031', '2112', '3011', '0323', '1222', '1303', '2121', '2202', '3020', '3101', '0332', '1231', '1312', '2130', '2211', '3110', '1321', '2023', '2220', '2301', '3003', '3200', '1133', '1330', '2032', '2113', '2310', '3012', '1223', '2122', '2203', '3021', '3102', '0333', '1232', '1313', '2131', '2212', '3030', '3111', '1322', '2221', '2302', '3120', '3201', '1331', '2033', '2230', '2311', '3013', '3210', '2123', '2320', '3022', '3103', '3300', '1233', '2132', '2213', '3031', '3112', '1323', '2222', '2303', '3121', '3202', '1332', '2231', '2312', '3130', '3211', '2321', '3023', '3220', '3301', '2133', '2330', '3032', '3113', '3310', '2223', '3122', '3203', '1333', '2232', '2313', '3131', '3212', '2322', '3221', '3302', '2331', '3033', '3230', '3311', '3123', '3320', '2233', '3132', '3213', '2323', '3222', '3303', '2332', '3231', '3312', '3321', '3133', '3330', '3223', '2333', '3232', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 3 with window 10
Starting at index 3 with window 10
[0, 0, 0, 2]
not removed
[0, 0, 1, 1]
removed
[0, 0, 2, 0]
removed
[0, 1, 0, 1]
removed
[1, 0, 0, 0]
removed
[0, 1, 1, 0]
removed
[0, 0, 0, 3]
not removed
[0, 2, 0, 0]
removed
[0, 0, 1, 2]
not removed
[0, 0, 2, 1]
removed
Going to 2 tenants
Starting at index 3 with window 3
['0001', '0010', '0100', '0002', '0003', '0012', '0102', '0011', '0020', '0101', '1000', '0110', '1001', '0200', '0030', '0021', '0111', '1010', '0120', '0201', '1100', '0013', '0210', '0022', '0103', '0300', '1002', '0031', '0112', '1011', '0121', '0202', '1020', '1101', '2000', '0130', '0211', '1110', '0023', '0220', '0301', '1003', '1200', '0032', '0113', '0310', '1012', '0122', '0203', '1021', '1102', '2001', '0131', '0212', '1030', '1111', '2010', '0221', '0302', '1120', '1201', '2100', '0033', '0230', '0311', '1013', '1210', '0123', '0320', '1022', '1103', '1300', '2002', '0132', '0213', '1031', '1112', '2011', '0222', '0303', '1121', '1202', '2020', '2101', '3000', '0231', '0312', '1130', '1211', '2110', '0321', '1023', '1220', '1301', '2003', '2200', '0133', '0330', '1032', '1113', '1310', '2012', '0223', '1122', '1203', '2021', '2102', '3001', '0232', '0313', '1131', '1212', '2030', '2111', '3010', '0322', '1221', '1302', '2120', '2201', '3100', '0331', '1033', '1230', '1311', '2013', '2210', '1123', '1320', '2022', '2103', '2300', '3002', '0233', '1132', '1213', '2031', '2112', '3011', '0323', '1222', '1303', '2121', '2202', '3020', '3101', '0332', '1231', '1312', '2130', '2211', '3110', '1321', '2023', '2220', '2301', '3003', '3200', '1133', '1330', '2032', '2113', '2310', '3012', '1223', '2122', '2203', '3021', '3102', '0333', '1232', '1313', '2131', '2212', '3030', '3111', '1322', '2221', '2302', '3120', '3201', '1331', '2033', '2230', '2311', '3013', '3210', '2123', '2320', '3022', '3103', '3300', '1233', '2132', '2213', '3031', '3112', '1323', '2222', '2303', '3121', '3202', '1332', '2231', '2312', '3130', '3211', '2321', '3023', '3220', '3301', '2133', '2330', '3032', '3113', '3310', '2223', '3122', '3203', '1333', '2232', '2313', '3131', '3212', '2322', '3221', '3302', '2331', '3033', '3230', '3311', '3123', '3320', '2233', '3132', '3213', '2323', '3222', '3303', '2332', '3231', '3312', '3321', '3133', '3330', '3223', '2333', '3232', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Removing conf 0010 from left experiments in runtime manager because of this conf violates transition constraints
Runtime manager:: Removing sample for the following conf: [0,0,1,0]
Runtime manager:: Sample list before remove:
[[0, 0, 0, 3], [0, 0, 0, 2], [0, 0, 1, 0], [0, 1, 1, 0], [0, 1, 0, 0], [0, 0, 2, 0]]
[[1, 0, 0, 0]]
Runtime manager:: Sample list after remove:
[[0, 0, 0, 3], [0, 0, 0, 2], [0, 1, 1, 0], [0, 1, 0, 0], [0, 0, 2, 0]]
[[1, 0, 0, 0]]
Removing conf 0110 from left experiments in runtime manager because of this conf violates transition constraints
Runtime manager:: Removing sample for the following conf: [0,1,1,0]
Runtime manager:: Sample list before remove:
[[0, 0, 0, 3], [0, 0, 0, 2], [0, 1, 1, 0], [0, 1, 0, 0], [0, 0, 2, 0]]
[[1, 0, 0, 0]]
Runtime manager:: Sample list after remove:
[[0, 0, 0, 3], [0, 0, 0, 2], [0, 1, 0, 0], [0, 0, 2, 0]]
[[1, 0, 0, 0]]
Removing conf 0100 from left experiments in runtime manager because of this conf violates transition constraints
Runtime manager:: Removing sample for the following conf: [0,1,0,0]
Runtime manager:: Sample list before remove:
[[0, 0, 0, 3], [0, 0, 0, 2], [0, 1, 0, 0], [0, 0, 2, 0]]
[[1, 0, 0, 0]]
Runtime manager:: Sample list after remove:
[[0, 0, 0, 3], [0, 0, 0, 2], [0, 0, 2, 0]]
[[1, 0, 0, 0]]
Removing conf 0020 from left experiments in runtime manager because of this conf violates transition constraints
Runtime manager:: Removing sample for the following conf: [0,0,2,0]
Runtime manager:: Sample list before remove:
[[0, 0, 0, 3], [0, 0, 0, 2], [0, 0, 2, 0]]
[[1, 0, 0, 0]]
Runtime manager:: Sample list after remove:
[[0, 0, 0, 3], [0, 0, 0, 2]]
[[1, 0, 0, 0]]
Removing conf 1000 from left experiments in runtime manager because of this conf violates transition constraints
Runtime manager:: Removing sample for the following conf: [1,0,0,0]
Runtime manager:: Sample list before remove:
[[0, 0, 0, 3], [0, 0, 0, 2]]
[[1, 0, 0, 0]]
Runtime manager:: Sample list after remove:
[[0, 0, 0, 3], [0, 0, 0, 2]]
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 167
[0, 0, 0, 2] -> 1e-09
[0, 0, 1, 0] -> 1e-09
[0, 1, 1, 0] -> 1e-09
[0, 1, 0, 0] -> 1e-09
[0, 0, 2, 0] -> 1e-09
There still remains configs to be tested in the current k8-resource-optimizer experiment batch
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
Returning adaptive scaler for  1 tenants and 0;0;0;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.10666666666666667', 'config': '1', 'score': '-0.10666666666666667', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;0;2:
Returning adaptive scaler for  1 tenants and 0;0;0;2:
1
255
['0001', '0010', '0100', '0002', '0003', '0012', '0102', '0011', '0020', '0101', '1000', '0110', '1001', '0200', '0030', '0021', '0111', '1010', '0120', '0201', '1100', '0013', '0210', '0022', '0103', '0300', '1002', '0031', '0112', '1011', '0121', '0202', '1020', '1101', '2000', '0130', '0211', '1110', '0023', '0220', '0301', '1003', '1200', '0032', '0113', '0310', '1012', '0122', '0203', '1021', '1102', '2001', '0131', '0212', '1030', '1111', '2010', '0221', '0302', '1120', '1201', '2100', '0033', '0230', '0311', '1013', '1210', '0123', '0320', '1022', '1103', '1300', '2002', '0132', '0213', '1031', '1112', '2011', '0222', '0303', '1121', '1202', '2020', '2101', '3000', '0231', '0312', '1130', '1211', '2110', '0321', '1023', '1220', '1301', '2003', '2200', '0133', '0330', '1032', '1113', '1310', '2012', '0223', '1122', '1203', '2021', '2102', '3001', '0232', '0313', '1131', '1212', '2030', '2111', '3010', '0322', '1221', '1302', '2120', '2201', '3100', '0331', '1033', '1230', '1311', '2013', '2210', '1123', '1320', '2022', '2103', '2300', '3002', '0233', '1132', '1213', '2031', '2112', '3011', '0323', '1222', '1303', '2121', '2202', '3020', '3101', '0332', '1231', '1312', '2130', '2211', '3110', '1321', '2023', '2220', '2301', '3003', '3200', '1133', '1330', '2032', '2113', '2310', '3012', '1223', '2122', '2203', '3021', '3102', '0333', '1232', '1313', '2131', '2212', '3030', '3111', '1322', '2221', '2302', '3120', '3201', '1331', '2033', '2230', '2311', '3013', '3210', '2123', '2320', '3022', '3103', '3300', '1233', '2132', '2213', '3031', '3112', '1323', '2222', '2303', '3121', '3202', '1332', '2231', '2312', '3130', '3211', '2321', '3023', '3220', '3301', '2133', '2330', '3032', '3113', '3310', '2223', '3122', '3203', '1333', '2232', '2313', '3131', '3212', '2322', '3221', '3302', '2331', '3033', '3230', '3311', '3123', '3320', '2233', '3132', '3213', '2323', '3222', '3303', '2332', '3231', '3312', '3321', '3133', '3330', '3223', '2333', '3232', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '232', 'Successfull': 'true'}
Starting at: 3
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '232', 'Successfull': 'true'}]
Filtered results
Current result is NO RESULT, therefore, we remove all configs with higher resource_cost than current result for higher number of tenants: 2..1
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '232', 'Successfull': 'true'}]
Filtered results
[0, 0, 0, 1]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 0, 1, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 1, 0, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
Removing failed conf
[0, 0, 0, 2]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 167
[0, 0, 0, 2] -> 232
[0, 0, 1, 0] -> 1e-09
[0, 1, 1, 0] -> 1e-09
[0, 1, 0, 0] -> 1e-09
[0, 0, 2, 0] -> 1e-09
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 2 experiments
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex0/op/
Generating new experiment. Saving results on Results/exp3/silver/1_tenants-ex1/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 167
[0, 0, 0, 2] -> 232
[0, 0, 1, 0] -> 1e-09
[0, 1, 1, 0] -> 1e-09
[0, 1, 0, 0] -> 1e-09
[0, 0, 2, 0] -> 1e-09
[1, 0, 0, 0] -> 1e-09
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': '-1.1133333333333333', 'best_score': '-1', 'SLAName': 'silver', 'CompletionTime': '167', 'Successfull': 'true'}, {'config': '1', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': '-1.5466666666666666', 'best_score': '-1', 'SLAName': 'silver', 'CompletionTime': '232', 'Successfull': 'true'}, {'config': '2', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '0', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': '-0.06666666666666667', 'best_score': '-0.06666666666666667', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}, {'config': '3', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '0', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': '-0.14666666666666667', 'best_score': '-0.06666666666666667', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}, {'config': '4', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '0', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': '-0.08', 'best_score': '-0.06666666666666667', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}, {'config': '5', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '2', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '0', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': '-0.13333333333333333', 'best_score': '-0.06666666666666667', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}, {'config': '0', 'worker1.replicaCount': '1', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '0', 'worker4.resources.requests.cpu': '2', 'worker4.resources.requests.memory': '2', 'score': '-0.13333333333333333', 'best_score': '-0.13333333333333333', 'SLAName': 'silver', 'CompletionTime': '1e-09', 'Successfull': 'true'}]
Filtered results
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
[9880593853]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[[{}, [], [<src.sla.WorkerConf object at 0x7fb4baf04810>, <src.sla.WorkerConf object at 0x7fb4baf04190>, <src.sla.WorkerConf object at 0x7fb4baf62d50>, <src.sla.WorkerConf object at 0x7fb4baef57d0>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
NO RESULT
TIPPED_OVER_CONFS
[[0, 0, 0, 3]]
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
SCALE UP DIFF
difference between resource_cost optimal conf and predicted total cost -1
37
SCALE UP DIFF
Rescaling worker 4
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
6
4
3
3
Moving filtered samples in sorted combinations after the window
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '1001', '0030', '0021', '1010', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 6 with window 1
Starting at index 6 with window 1
Going to 2 tenants
Starting at index 6 with window 1
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '1001', '0030', '0021', '1010', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
False
True
[[0, 0, 0, 3]]
[0, 0, 0, 3]
[[{}, [], [<src.sla.WorkerConf object at 0x7fb4baf1c150>, <src.sla.WorkerConf object at 0x7fb4baf1cfd0>, <src.sla.WorkerConf object at 0x7fb4baf1c390>, <src.sla.WorkerConf object at 0x7fb4baf1c5d0>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': 1000149.0, 'Successfull': 'true'}
RETRYING WITH ANOTHER WORKER CONFIGURATION
Starting at index 6 with window 1
Saving optimal results into matrix for previous results
using curve-fitted scaling function to estimate configuration for tenants 2
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
total_cost = 10
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Returning adaptive scaler for  2 tenants and 0;0;1;1:
1
255
Getting next batch of experiments for 2 tenants
Moving filtered samples in sorted combinations after the window
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '1001', '0030', '0021', '1010', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 10
Starting at index 0 with window 10
[0, 0, 1, 1]
removed
[0, 0, 2, 0]
removed
[1, 0, 0, 0]
removed
[0, 1, 0, 1]
removed
[0, 1, 1, 0]
removed
[0, 2, 0, 0]
removed
[0, 0, 0, 3]
not removed
[0, 0, 1, 2]
not removed
[1, 0, 0, 1]
removed
[0, 0, 3, 0]
removed
Going to 2 tenants
Starting at index 0 with window 2
['0003', '0012', '0011', '0020', '1000', '0101', '0110', '0200', '0021', '1010', '1001', '0030', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
min_conf: 0 0 0 3
min_conf_dec: 0
0
[0, 0, 0, 3]
1
[0, 0, 1, 2]
{'0': [[0, 0, 3], [0, 1, 2]]}
{'0': [[0, 3, 0], [1, 2, 0]]}
{'0': [[3, 0, 0]], '1': [[2, 0, 0]]}
{'3': [[0, 0, 0]], '2': [[0, 0, 1]]}
Next possible experiments for next nb of tenants
{'0': [[0, 0, 3], [0, 1, 2]]}
Elementstr: [[0,0,0,3];[0,0,1,2]]
Min replicacount:0 0 0 3
Max replicacount:0 0 1 2
Generating new experiment. Saving results on Results/exp3/silver/2_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  2 tenants and 0;0;0;3:
Returning adaptive scaler for  2 tenants and 0;0;0;3:
1
255
['0003', '0012', '0011', '0020', '1000', '0101', '0110', '0200', '0021', '1010', '1001', '0030', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '171', 'Successfull': 'true'}
Starting at: 0
Tenant_nb: 2, maxTenants: 2
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '171', 'Successfull': 'true'}]
Filtered results
Current result is NO RESULT, therefore, we remove all configs with higher resource_cost than current result for higher number of tenants: 3..2
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '171', 'Successfull': 'true'}]
Filtered results
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/2_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 171
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/2_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 171
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-1.1400000000000001', 'best_score': '-1', 'SLAName': 'silver', 'CompletionTime': '171', 'Successfull': 'true'}]
Filtered results
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[9880593853]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[[{}, [], [<src.sla.WorkerConf object at 0x7fb4baf62490>, <src.sla.WorkerConf object at 0x7fb4baf62cd0>, <src.sla.WorkerConf object at 0x7fb4baf62c50>, <src.sla.WorkerConf object at 0x7fb4baf62fd0>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO RESULT
TIPPED_OVER_CONFS
[[0, 0, 0, 3]]
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE UP DIFF
difference between resource_cost optimal conf and predicted total cost -1
36
SCALE UP DIFF
Rescaling worker 4
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
6
4
3
4
Moving filtered samples in sorted combinations after the window
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0120', '1100', '0012', '0111', '0210', '0003', '0102', '0201', '0300', '1020', '2000', '0031', '1011', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
Filtering from index 15 with window 1
Starting at index 15 with window 1
[0, 0, 0, 3]
not removed
Going to 2 tenants
Starting at index 15 with window 1
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0120', '1100', '0012', '0111', '0210', '0003', '0102', '0201', '0300', '1020', '2000', '0031', '1011', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
Adding stronger incremental result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': 1000149.0, 'Successfull': 'true'}
RETRYING WITH ANOTHER WORKER CONFIGURATION
Starting at index 15 with window 1
Saving optimal results into matrix for previous results
using curve-fitted scaling function to estimate configuration for tenants 3
Returning adaptive scaler for  2 tenants and 0;0;0;3:
1
255
total_cost = 9
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
Returning adaptive scaler for  3 tenants and 0;0;2;0:
1
255
Getting next batch of experiments for 3 tenants
Moving filtered samples in sorted combinations after the window
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0120', '1100', '0012', '0111', '0210', '0003', '0102', '0201', '0300', '1020', '2000', '0031', '1011', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
Filtering from index 0 with window 10
Starting at index 0 with window 10
[0, 0, 2, 0]
removed
[1, 0, 0, 0]
removed
[0, 0, 1, 1]
removed
[0, 1, 1, 0]
removed
[0, 1, 0, 1]
removed
[0, 2, 0, 0]
removed
[1, 0, 1, 0]
removed
[0, 0, 3, 0]
removed
[0, 0, 2, 1]
removed
[1, 0, 0, 1]
removed
Starting at index 10 with window 10
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 0, 1, 2]
not removed
[0, 1, 1, 1]
removed
[0, 2, 1, 0]
removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
[0, 2, 0, 1]
removed
[0, 3, 0, 0]
removed
[1, 0, 2, 0]
removed
Going to 2 tenants
Starting at index 10 with window 3
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0120', '1100', '2000', '0111', '0210', '0031', '1011', '0201', '0300', '1020', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
min_conf: 0 0 1 2
min_conf_dec: 10
10
[0, 0, 1, 2]
11
[0, 0, 0, 3]
12
[0, 1, 0, 2]
{'0': [[0, 1, 2], [0, 0, 3], [1, 0, 2]]}
{'0': [[1, 2, 0], [0, 3, 0]], '1': [[0, 2, 0]]}
{'1': [[2, 0, 0]], '0': [[3, 0, 0], [2, 0, 1]]}
{'2': [[0, 0, 1], [0, 1, 0]], '3': [[0, 0, 0]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 2], [0, 0, 3], [1, 0, 2]]}
Elementstr: [[0,0,1,2];[0,0,0,3];[0,1,0,2]]
Min replicacount:0 0 1 2
Max replicacount:0 1 0 2
Generating new experiment. Saving results on Results/exp3/silver/3_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 1e-09
[0, 0, 1, 2] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2222222222222222', 'config': '0', 'score': '-0.2222222222222222', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  3 tenants and 0;1;0;2:
Returning adaptive scaler for  3 tenants and 0;1;0;2:
1
255
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0120', '1100', '2000', '0111', '0210', '0031', '1011', '0201', '0300', '1020', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '140', 'Successfull': 'true'}
Starting at: 12
Tenant_nb: 3, maxTenants: 3
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '140', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '140', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '140', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '140', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[[0, 0, 1, 2]]
Moving filtered samples in sorted combinations after the window
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0120', '1100', '2000', '0111', '0210', '0031', '1011', '0201', '0300', '1020', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
Filtering from index 10 with window 10
Starting at index 10 with window 10
[0, 0, 1, 2]
not removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[2, 0, 0, 0]
removed
[0, 1, 1, 1]
removed
[0, 2, 1, 0]
removed
[0, 0, 3, 1]
removed
[1, 0, 1, 1]
removed
Going to 2 tenants
Going to 4 tenants
Starting at index 10 with window 3
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0201', '0300', '1020', '0120', '1100', '2000', '0111', '0210', '0031', '1011', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/3_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 140
[0, 0, 1, 2] -> 1e-09
There still remains configs to be tested in the current k8-resource-optimizer experiment batch
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
using curve-fitted scaling function to estimate configuration for tenants 4
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
total_cost = 10
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
Returning adaptive scaler for  4 tenants and 0;0;2;0:
1
255
Getting next batch of experiments for 4 tenants
Moving filtered samples in sorted combinations after the window
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0201', '0300', '1020', '0120', '1100', '2000', '0111', '0210', '0031', '1011', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
Filtering from index 0 with window 10
Starting at index 0 with window 10
[0, 0, 2, 0]
removed
[1, 0, 0, 0]
removed
[0, 0, 1, 1]
removed
[0, 1, 1, 0]
removed
[0, 1, 0, 1]
removed
[0, 2, 0, 0]
removed
[1, 0, 1, 0]
removed
[0, 0, 3, 0]
removed
[0, 0, 2, 1]
removed
[1, 0, 0, 1]
removed
Starting at index 10 with window 10
[0, 0, 1, 2]
not removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
[0, 2, 0, 1]
removed
[0, 3, 0, 0]
removed
[1, 0, 2, 0]
removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[2, 0, 0, 0]
removed
[0, 1, 1, 1]
removed
Going to 2 tenants
[0, 0, 1, 2]
not removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
Going to 4 tenants
Starting at index 10 with window 3
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0210', '0031', '1011', '0201', '0300', '1020', '0120', '1100', '2000', '0111', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
min_conf: 0 0 1 2
min_conf_dec: 10
10
[0, 0, 1, 2]
11
[0, 0, 0, 3]
12
[0, 1, 0, 2]
{'0': [[0, 1, 2], [0, 0, 3], [1, 0, 2]]}
{'0': [[1, 2, 0], [0, 3, 0]], '1': [[0, 2, 0]]}
{'1': [[2, 0, 0]], '0': [[3, 0, 0], [2, 0, 1]]}
{'2': [[0, 0, 1], [0, 1, 0]], '3': [[0, 0, 0]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 2], [0, 0, 3], [1, 0, 2]]}
Elementstr: [[0,0,1,2];[0,0,0,3];[0,1,0,2]]
Min replicacount:0 0 1 2
Max replicacount:0 1 0 2
Generating new experiment. Saving results on Results/exp3/silver/4_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 1e-09
[0, 0, 1, 2] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2222222222222222', 'config': '0', 'score': '-0.2222222222222222', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  4 tenants and 0;1;0;2:
Returning adaptive scaler for  4 tenants and 0;1;0;2:
1
255
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0210', '0031', '1011', '0201', '0300', '1020', '0120', '1100', '2000', '0111', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}
Starting at: 12
Tenant_nb: 4, maxTenants: 4
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[[0, 0, 1, 2]]
Moving filtered samples in sorted combinations after the window
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0210', '0031', '1011', '0201', '0300', '1020', '0120', '1100', '2000', '0111', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
Filtering from index 10 with window 10
Starting at index 10 with window 10
[0, 0, 1, 2]
not removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
[0, 2, 1, 0]
removed
[0, 0, 3, 1]
removed
[1, 0, 1, 1]
removed
[0, 2, 0, 1]
removed
[0, 3, 0, 0]
removed
[1, 0, 2, 0]
removed
[0, 1, 2, 0]
removed
Going to 2 tenants
[0, 0, 1, 2]
not removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
Going to 4 tenants
Going to 5 tenants
Starting at index 10 with window 3
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '1100', '2000', '0111', '0210', '0031', '1011', '0201', '0300', '1020', '0120', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/4_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 120
[0, 0, 1, 2] -> 1e-09
There still remains configs to be tested in the current k8-resource-optimizer experiment batch
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
using curve-fitted scaling function to estimate configuration for tenants 5
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
total_cost = 11
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
Returning adaptive scaler for  5 tenants and 0;0;2;0:
1
255
Getting next batch of experiments for 5 tenants
Moving filtered samples in sorted combinations after the window
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '1100', '2000', '0111', '0210', '0031', '1011', '0201', '0300', '1020', '0120', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
Filtering from index 0 with window 10
Starting at index 0 with window 10
[0, 0, 2, 0]
removed
[1, 0, 0, 0]
removed
[0, 0, 1, 1]
removed
[0, 1, 1, 0]
removed
[0, 1, 0, 1]
removed
[0, 2, 0, 0]
removed
[1, 0, 1, 0]
removed
[0, 0, 3, 0]
removed
[0, 0, 2, 1]
removed
[1, 0, 0, 1]
removed
Starting at index 10 with window 10
[0, 0, 1, 2]
not removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
[1, 1, 0, 0]
removed
[2, 0, 0, 0]
removed
[0, 1, 1, 1]
removed
[0, 2, 1, 0]
removed
[0, 0, 3, 1]
removed
[1, 0, 1, 1]
removed
[0, 2, 0, 1]
removed
Going to 2 tenants
[0, 0, 1, 2]
not removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
Going to 4 tenants
Starting at index 10 with window 3
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0300', '1020', '0120', '1100', '2000', '0111', '0210', '0031', '1011', '0201', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
min_conf: 0 0 1 2
min_conf_dec: 10
10
[0, 0, 1, 2]
11
[0, 0, 0, 3]
12
[0, 1, 0, 2]
{'0': [[0, 1, 2], [0, 0, 3], [1, 0, 2]]}
{'0': [[1, 2, 0], [0, 3, 0]], '1': [[0, 2, 0]]}
{'1': [[2, 0, 0]], '0': [[3, 0, 0], [2, 0, 1]]}
{'2': [[0, 0, 1], [0, 1, 0]], '3': [[0, 0, 0]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 2], [0, 0, 3], [1, 0, 2]]}
Elementstr: [[0,0,1,2];[0,0,0,3];[0,1,0,2]]
Min replicacount:0 0 1 2
Max replicacount:0 1 0 2
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 1e-09
[0, 0, 1, 2] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2222222222222222', 'config': '0', 'score': '-0.2222222222222222', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  5 tenants and 0;1;0;2:
Returning adaptive scaler for  5 tenants and 0;1;0;2:
1
255
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0300', '1020', '0120', '1100', '2000', '0111', '0210', '0031', '1011', '0201', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '128', 'Successfull': 'true'}
Starting at: 12
Tenant_nb: 5, maxTenants: 5
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '128', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '128', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '128', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '128', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[[0, 0, 1, 2]]
Moving filtered samples in sorted combinations after the window
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0300', '1020', '0120', '1100', '2000', '0111', '0210', '0031', '1011', '0201', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
Filtering from index 10 with window 10
Starting at index 10 with window 10
[0, 0, 1, 2]
not removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
[0, 3, 0, 0]
removed
[1, 0, 2, 0]
removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[2, 0, 0, 0]
removed
[0, 1, 1, 1]
removed
[0, 2, 1, 0]
removed
Going to 2 tenants
[0, 0, 1, 2]
not removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
Going to 4 tenants
[0, 0, 1, 2]
not removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
Going to 6 tenants
Starting at index 10 with window 3
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0031', '1011', '0201', '0300', '1020', '0120', '1100', '2000', '0111', '0210', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 128
[0, 0, 1, 2] -> 1e-09
There still remains configs to be tested in the current k8-resource-optimizer experiment batch
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
Returning adaptive scaler for  5 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  5 tenants and 0;0;1;2:
Returning adaptive scaler for  5 tenants and 0;0;1;2:
1
255
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0031', '1011', '0201', '0300', '1020', '0120', '1100', '2000', '0111', '0210', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '133', 'Successfull': 'true'}
Starting at: 10
Tenant_nb: 5, maxTenants: 5
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '133', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '133', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '133', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '133', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 128
[0, 0, 1, 2] -> 133
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 128
[0, 0, 1, 2] -> 133
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': '-0.2222222222222222', 'best_score': '-0.2222222222222222', 'SLAName': 'silver', 'CompletionTime': '128', 'Successfull': 'true'}, {'config': '1', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': '-0.20987654320987653', 'best_score': '-0.20987654320987653', 'SLAName': 'silver', 'CompletionTime': '133', 'Successfull': 'true'}]
Filtered results
[{'config': '1', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': '-0.20987654320987653', 'best_score': '-0.20987654320987653', 'SLAName': 'silver', 'CompletionTime': '133', 'Successfull': 'true'}, {'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': '-0.2222222222222222', 'best_score': '-0.2222222222222222', 'SLAName': 'silver', 'CompletionTime': '128', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 133.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  5 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '133', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  5 tenants and 0;0;1;2:
Returning adaptive scaler for  5 tenants and 0;0;1;2:
1
255
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0031', '1011', '0201', '0300', '1020', '0120', '1100', '2000', '0111', '0210', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '134', 'Successfull': 'true'}
Starting at: 10
Tenant_nb: 5, maxTenants: 5
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '134', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '134', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '134', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '134', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 134.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  4 tenants and 0;0;1;2:
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '1100', '2000', '0111', '0210', '0031', '1011', '0201', '0300', '1020', '0120', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}
Starting at: 10
Tenant_nb: 4, maxTenants: 4
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/4_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 120
[0, 0, 1, 2] -> 124
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/4_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 120
[0, 0, 1, 2] -> 124
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': '-0.2222222222222222', 'best_score': '-0.2222222222222222', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}, {'config': '1', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': '-0.20987654320987653', 'best_score': '-0.20987654320987653', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}]
Filtered results
[{'config': '1', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': '-0.20987654320987653', 'best_score': '-0.20987654320987653', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}, {'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': '-0.2222222222222222', 'best_score': '-0.2222222222222222', 'SLAName': 'silver', 'CompletionTime': '120', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 124.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[[{'config': '1', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': '-0.20987654320987653', 'best_score': '-0.20987654320987653', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}, [0, 0, 1, 2], [<src.sla.WorkerConf object at 0x7fb4baf09390>, <src.sla.WorkerConf object at 0x7fb4baf09650>, <src.sla.WorkerConf object at 0x7fb4baf09b50>, <src.sla.WorkerConf object at 0x7fb4baf09e10>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_1_2
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
SCALE DOWN DIFF
Rescaling worker 4
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
6
4
3
3
Moving filtered samples in sorted combinations after the window
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '1100', '0111', '0120', '0210', '0201', '0300', '2000', '0031', '1011', '1020', '0022', '1002', '0013', '0130', '1110', '0121', '1101', '0112', '0103', '0220', '1200', '0211', '0202', '0310', '0301', '1030', '2010', '1021', '2001', '0032', '1012', '0023', '1003', '1120', '2100', '0131', '1111', '0122', '1102', '0113', '0230', '1210', '0221', '1201', '0212', '0203', '0320', '1300', '0311', '0302', '2020', '3000', '1031', '2011', '1022', '2002', '0033', '1013', '1130', '2110', '1121', '2101', '0132', '1112', '0123', '1103', '1220', '2200', '0231', '1211', '0222', '1202', '0213', '0330', '1310', '0321', '1301', '0312', '0303', '2030', '3010', '2021', '3001', '1032', '2012', '1023', '2003', '2120', '3100', '1131', '2111', '1122', '2102', '0133', '1113', '1230', '2210', '1221', '2201', '0232', '1212', '0223', '1203', '1320', '2300', '0331', '1311', '0322', '1302', '0313', '3020', '2031', '3011', '2022', '3002', '1033', '2013', '2130', '3110', '2121', '3101', '1132', '2112', '1123', '2103', '2220', '3200', '1231', '2211', '1222', '2202', '0233', '1213', '1330', '2310', '1321', '2301', '0332', '1312', '0323', '1303', '3030', '3021', '2032', '3012', '2023', '3003', '3120', '2131', '3111', '2122', '3102', '1133', '2113', '2230', '3210', '2221', '3201', '1232', '2212', '1223', '2203', '2320', '3300', '1331', '2311', '1322', '2302', '0333', '1313', '3031', '3022', '2033', '3013', '3130', '3121', '2132', '3112', '2123', '3103', '3220', '2231', '3211', '2222', '3202', '1233', '2213', '2330', '3310', '2321', '3301', '1332', '2312', '1323', '2303', '3032', '3023', '3131', '3122', '2133', '3113', '3230', '3221', '2232', '3212', '2223', '3203', '3320', '2331', '3311', '2322', '3302', '1333', '2313', '3033', '3132', '3123', '3231', '3222', '2233', '3213', '3330', '3321', '2332', '3312', '2323', '3303', '3133', '3232', '3223', '3331', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
Filtering from index 10 with window 10
Starting at index 10 with window 10
[0, 0, 1, 2]
not removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
[1, 1, 0, 0]
SCALING INDEX = 3
removed
[0, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 2, 0]
SCALING INDEX = 3
removed
[0, 2, 1, 0]
SCALING INDEX = 3
removed
[0, 2, 0, 1]
SCALING INDEX = 3
removed
[0, 3, 0, 0]
SCALING INDEX = 3
removed
[2, 0, 0, 0]
SCALING INDEX = 3
removed
Going to 2 tenants
[0, 0, 1, 2]
not removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
Going to 4 tenants
Starting at index 10 with window 3
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0031', '1011', '1020', '1100', '0111', '0120', '0210', '0201', '0300', '2000', '0022', '1002', '0013', '0130', '1110', '0121', '1101', '0112', '0103', '0220', '1200', '0211', '0202', '0310', '0301', '1030', '2010', '1021', '2001', '0032', '1012', '0023', '1003', '1120', '2100', '0131', '1111', '0122', '1102', '0113', '0230', '1210', '0221', '1201', '0212', '0203', '0320', '1300', '0311', '0302', '2020', '3000', '1031', '2011', '1022', '2002', '0033', '1013', '1130', '2110', '1121', '2101', '0132', '1112', '0123', '1103', '1220', '2200', '0231', '1211', '0222', '1202', '0213', '0330', '1310', '0321', '1301', '0312', '0303', '2030', '3010', '2021', '3001', '1032', '2012', '1023', '2003', '2120', '3100', '1131', '2111', '1122', '2102', '0133', '1113', '1230', '2210', '1221', '2201', '0232', '1212', '0223', '1203', '1320', '2300', '0331', '1311', '0322', '1302', '0313', '3020', '2031', '3011', '2022', '3002', '1033', '2013', '2130', '3110', '2121', '3101', '1132', '2112', '1123', '2103', '2220', '3200', '1231', '2211', '1222', '2202', '0233', '1213', '1330', '2310', '1321', '2301', '0332', '1312', '0323', '1303', '3030', '3021', '2032', '3012', '2023', '3003', '3120', '2131', '3111', '2122', '3102', '1133', '2113', '2230', '3210', '2221', '3201', '1232', '2212', '1223', '2203', '2320', '3300', '1331', '2311', '1322', '2302', '0333', '1313', '3031', '3022', '2033', '3013', '3130', '3121', '2132', '3112', '2123', '3103', '3220', '2231', '3211', '2222', '3202', '1233', '2213', '2330', '3310', '2321', '3301', '1332', '2312', '1323', '2303', '3032', '3023', '3131', '3122', '2133', '3113', '3230', '3221', '2232', '3212', '2223', '3203', '3320', '2331', '3311', '2322', '3302', '1333', '2313', '3033', '3132', '3123', '3231', '3222', '2233', '3213', '3330', '3321', '2332', '3312', '2323', '3303', '3133', '3232', '3223', '3331', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': 1000149.0, 'Successfull': 'true'}
RETRYING WITH ANOTHER WORKER CONFIGURATION
Starting at index 10 with window 3
[0, 0, 1, 2]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  3 tenants and 0;0;1;2:
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0201', '0300', '1020', '0120', '1100', '2000', '0111', '0210', '0031', '1011', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}
Starting at: 10
Tenant_nb: 3, maxTenants: 3
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/3_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 140
[0, 0, 1, 2] -> 137
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/3_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 140
[0, 0, 1, 2] -> 137
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': '-0.2222222222222222', 'best_score': '-0.2222222222222222', 'SLAName': 'silver', 'CompletionTime': '140', 'Successfull': 'true'}, {'config': '1', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': '-0.20987654320987653', 'best_score': '-0.20987654320987653', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}]
Filtered results
[{'config': '1', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': '-0.20987654320987653', 'best_score': '-0.20987654320987653', 'SLAName': 'silver', 'CompletionTime': '137', 'Successfull': 'true'}, {'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': '-0.2222222222222222', 'best_score': '-0.2222222222222222', 'SLAName': 'silver', 'CompletionTime': '140', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 137.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  2 tenants and 0;0;0;3:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  2 tenants and 0;0;0;3:
Returning adaptive scaler for  2 tenants and 0;0;0;3:
1
255
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0120', '1100', '0012', '0111', '0210', '0003', '0102', '0201', '0300', '1020', '2000', '0031', '1011', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}
Starting at: 15
Tenant_nb: 2, maxTenants: 2
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 0, 3]
Measured completion time is 124.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943, 8544343532]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
False
True
[[0, 0, 0, 3]]
[0, 0, 0, 3]
[[{}, [], [<src.sla.WorkerConf object at 0x7fb4baf62490>, <src.sla.WorkerConf object at 0x7fb4baf62cd0>, <src.sla.WorkerConf object at 0x7fb4baf62c50>, <src.sla.WorkerConf object at 0x7fb4baf62fd0>]], [{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fb4baf04dd0>, <src.sla.WorkerConf object at 0x7fb4baf04850>, <src.sla.WorkerConf object at 0x7fb4baf04d50>, <src.sla.WorkerConf object at 0x7fb4baf04d10>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
NO COST EFFECTIVE RESULT
Previous scale down undone
Starting with0_0_0_3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
SCALE UP DIFF
difference between resource_cost optimal conf and predicted total cost -1
39
Passing over worker in previously failed scaling
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 2, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{}, [], [<src.sla.WorkerConf object at 0x7fb4baf62490>, <src.sla.WorkerConf object at 0x7fb4baf62cd0>, <src.sla.WorkerConf object at 0x7fb4baf62c50>, <src.sla.WorkerConf object at 0x7fb4baf62fd0>]], [{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fb4baf04dd0>, <src.sla.WorkerConf object at 0x7fb4baf04850>, <src.sla.WorkerConf object at 0x7fb4baf04d50>, <src.sla.WorkerConf object at 0x7fb4baf04d10>]]]
Conf 0:
124
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;0;3 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '124', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[]
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 6 with window 1
[0, 0, 0, 3]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '124', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;0;3:
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '1001', '0030', '0021', '1010', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '114', 'Successfull': 'true'}
Starting at: 6
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '114', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '114', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '114', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '114', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 0, 3]
Measured completion time is 114.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943, 8544343532]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
False
True
[[0, 0, 0, 3]]
[0, 0, 0, 3]
[[{}, [], [<src.sla.WorkerConf object at 0x7fb4baf1c150>, <src.sla.WorkerConf object at 0x7fb4baf1cfd0>, <src.sla.WorkerConf object at 0x7fb4baf1c390>, <src.sla.WorkerConf object at 0x7fb4baf1c5d0>]], [{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '114', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fb4bae76990>, <src.sla.WorkerConf object at 0x7fb4bae76bd0>, <src.sla.WorkerConf object at 0x7fb4bae76f90>, <src.sla.WorkerConf object at 0x7fb4bae760d0>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
NO COST EFFECTIVE RESULT
Previous scale down undone
Starting with0_0_0_3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
SCALE UP DIFF
difference between resource_cost optimal conf and predicted total cost -1
37
Passing over worker in previously failed scaling
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 2, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{}, [], [<src.sla.WorkerConf object at 0x7fb4baf1c150>, <src.sla.WorkerConf object at 0x7fb4baf1cfd0>, <src.sla.WorkerConf object at 0x7fb4baf1c390>, <src.sla.WorkerConf object at 0x7fb4baf1c5d0>]], [{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '114', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fb4bae76990>, <src.sla.WorkerConf object at 0x7fb4bae76bd0>, <src.sla.WorkerConf object at 0x7fb4bae76f90>, <src.sla.WorkerConf object at 0x7fb4bae760d0>]]]
Conf 0:
114
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;0;3 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '114', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[]
6
4
3
3
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 6 with window 1
[0, 0, 0, 3]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '114', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '124', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;0;3:
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '1001', '0021', '0030', '1010', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '115', 'Successfull': 'true'}
Starting at: 6
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '115', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '115', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '115', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '115', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 0, 3]
Measured completion time is 115.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '115', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fb4baf1cd10>, <src.sla.WorkerConf object at 0x7fb4baf1c290>, <src.sla.WorkerConf object at 0x7fb4baf1c110>, <src.sla.WorkerConf object at 0x7fb4baf1ce50>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_0_3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
SCALE DOWN DIFF
Rescaling worker 4
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
6
4
3
2
Moving filtered samples in sorted combinations after the window
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '1001', '0021', '0102', '0030', '1010', '0111', '0120', '1100', '0201', '0210', '0013', '0300', '0022', '1002', '0103', '0031', '1011', '0112', '1020', '2000', '0121', '1101', '0202', '0130', '1110', '0211', '0220', '1200', '0301', '0023', '1003', '0310', '0032', '1012', '0113', '1021', '2001', '0122', '1102', '0203', '1030', '2010', '0131', '1111', '0212', '1120', '2100', '0221', '1201', '0302', '0230', '1210', '0311', '0033', '1013', '0320', '1300', '1022', '2002', '0123', '1103', '1031', '2011', '0132', '1112', '0213', '2020', '3000', '1121', '2101', '0222', '1202', '0303', '1130', '2110', '0231', '1211', '0312', '1220', '2200', '0321', '1301', '1023', '2003', '0330', '1310', '1032', '2012', '0133', '1113', '2021', '3001', '1122', '2102', '0223', '1203', '2030', '3010', '1131', '2111', '0232', '1212', '0313', '2120', '3100', '1221', '2201', '0322', '1302', '1230', '2210', '0331', '1311', '1033', '2013', '1320', '2300', '2022', '3002', '1123', '2103', '2031', '3011', '1132', '2112', '0233', '1213', '3020', '2121', '3101', '1222', '2202', '0323', '1303', '2130', '3110', '1231', '2211', '0332', '1312', '2220', '3200', '1321', '2301', '2023', '3003', '1330', '2310', '2032', '3012', '1133', '2113', '3021', '2122', '3102', '1223', '2203', '3030', '2131', '3111', '1232', '2212', '0333', '1313', '3120', '2221', '3201', '1322', '2302', '2230', '3210', '1331', '2311', '2033', '3013', '2320', '3300', '3022', '2123', '3103', '3031', '2132', '3112', '1233', '2213', '3121', '2222', '3202', '1323', '2303', '3130', '2231', '3211', '1332', '2312', '3220', '2321', '3301', '3023', '2330', '3310', '3032', '2133', '3113', '3122', '2223', '3203', '3131', '2232', '3212', '1333', '2313', '3221', '2322', '3302', '3230', '2331', '3311', '3033', '3320', '3123', '3132', '2233', '3213', '3222', '2323', '3303', '3231', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 6 with window 10
Starting at index 6 with window 10
[0, 0, 0, 3]
not removed
[0, 0, 1, 2]
not removed
[1, 0, 0, 1]
SCALING INDEX = 3
removed
[0, 0, 2, 1]
SCALING INDEX = 3
removed
[0, 1, 0, 2]
not removed
[0, 0, 3, 0]
SCALING INDEX = 3
removed
[1, 0, 1, 0]
SCALING INDEX = 3
removed
[0, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 2, 0]
SCALING INDEX = 3
removed
[1, 1, 0, 0]
SCALING INDEX = 3
removed
Going to 2 tenants
[0, 0, 0, 3]
SCALING INDEX = 3
removed
[0, 0, 1, 2]
SCALING INDEX = 3
removed
[0, 1, 0, 2]
SCALING INDEX = 3
removed
Starting at index 16 with window 10
[0, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 2, 0]
SCALING INDEX = 3
removed
[1, 1, 0, 0]
SCALING INDEX = 3
removed
[0, 3, 0, 0]
SCALING INDEX = 3
removed
[0, 0, 2, 2]
SCALING INDEX = 3
removed
[1, 0, 0, 2]
SCALING INDEX = 3
removed
[0, 1, 0, 3]
SCALING INDEX = 3
removed
[0, 0, 3, 1]
SCALING INDEX = 3
removed
[1, 0, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 1, 2]
SCALING INDEX = 3
removed
Starting at index 26 with window 10
[1, 0, 2, 0]
SCALING INDEX = 3
removed
[2, 0, 0, 0]
SCALING INDEX = 3
removed
[0, 1, 2, 1]
SCALING INDEX = 3
removed
[1, 1, 0, 1]
SCALING INDEX = 3
removed
[0, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 1, 3, 0]
SCALING INDEX = 3
removed
[1, 1, 1, 0]
SCALING INDEX = 3
removed
[0, 2, 1, 1]
SCALING INDEX = 3
removed
[0, 2, 2, 0]
SCALING INDEX = 3
removed
[1, 2, 0, 0]
SCALING INDEX = 3
removed
Starting at index 36 with window 10
[0, 3, 0, 1]
SCALING INDEX = 3
removed
[0, 0, 2, 3]
SCALING INDEX = 3
removed
[1, 0, 0, 3]
SCALING INDEX = 3
removed
[0, 3, 1, 0]
SCALING INDEX = 3
removed
[0, 0, 3, 2]
SCALING INDEX = 3
removed
[1, 0, 1, 2]
SCALING INDEX = 3
removed
[0, 1, 1, 3]
SCALING INDEX = 3
removed
[1, 0, 2, 1]
SCALING INDEX = 3
removed
[2, 0, 0, 1]
SCALING INDEX = 3
removed
[0, 1, 2, 2]
SCALING INDEX = 3
removed
Starting at index 46 with window 10
[1, 1, 0, 2]
SCALING INDEX = 3
removed
[0, 2, 0, 3]
SCALING INDEX = 3
removed
[1, 0, 3, 0]
SCALING INDEX = 3
removed
[2, 0, 1, 0]
SCALING INDEX = 3
removed
[0, 1, 3, 1]
SCALING INDEX = 3
removed
[1, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 2, 1, 2]
SCALING INDEX = 3
removed
[1, 1, 2, 0]
SCALING INDEX = 3
removed
[2, 1, 0, 0]
SCALING INDEX = 3
removed
[0, 2, 2, 1]
SCALING INDEX = 3
removed
Starting at index 56 with window 10
[1, 2, 0, 1]
SCALING INDEX = 3
removed
[0, 3, 0, 2]
SCALING INDEX = 3
removed
[0, 2, 3, 0]
SCALING INDEX = 3
removed
[1, 2, 1, 0]
SCALING INDEX = 3
removed
[0, 3, 1, 1]
SCALING INDEX = 3
removed
[0, 0, 3, 3]
SCALING INDEX = 3
removed
[1, 0, 1, 3]
SCALING INDEX = 3
removed
[0, 3, 2, 0]
SCALING INDEX = 3
removed
[1, 3, 0, 0]
SCALING INDEX = 3
removed
[1, 0, 2, 2]
SCALING INDEX = 3
removed
Starting at index 66 with window 10
[2, 0, 0, 2]
SCALING INDEX = 3
removed
[0, 1, 2, 3]
SCALING INDEX = 3
removed
[1, 1, 0, 3]
SCALING INDEX = 3
removed
[1, 0, 3, 1]
SCALING INDEX = 3
removed
[2, 0, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 3, 2]
SCALING INDEX = 3
removed
[1, 1, 1, 2]
SCALING INDEX = 3
removed
[0, 2, 1, 3]
SCALING INDEX = 3
removed
[2, 0, 2, 0]
SCALING INDEX = 3
removed
[3, 0, 0, 0]
SCALING INDEX = 3
removed
Starting at index 76 with window 10
[1, 1, 2, 1]
SCALING INDEX = 3
removed
[2, 1, 0, 1]
SCALING INDEX = 3
removed
[0, 2, 2, 2]
SCALING INDEX = 3
removed
[1, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 3, 0, 3]
SCALING INDEX = 3
removed
[1, 1, 3, 0]
SCALING INDEX = 3
removed
[2, 1, 1, 0]
SCALING INDEX = 3
removed
[0, 2, 3, 1]
SCALING INDEX = 3
removed
[1, 2, 1, 1]
SCALING INDEX = 3
removed
[0, 3, 1, 2]
SCALING INDEX = 3
removed
Starting at index 86 with window 10
[1, 2, 2, 0]
SCALING INDEX = 3
removed
[2, 2, 0, 0]
SCALING INDEX = 3
removed
[0, 3, 2, 1]
SCALING INDEX = 3
removed
[1, 3, 0, 1]
SCALING INDEX = 3
removed
[1, 0, 2, 3]
SCALING INDEX = 3
removed
[2, 0, 0, 3]
SCALING INDEX = 3
removed
[0, 3, 3, 0]
SCALING INDEX = 3
removed
[1, 3, 1, 0]
SCALING INDEX = 3
removed
[1, 0, 3, 2]
SCALING INDEX = 3
removed
[2, 0, 1, 2]
SCALING INDEX = 3
removed
Starting at index 96 with window 10
[0, 1, 3, 3]
SCALING INDEX = 3
removed
[1, 1, 1, 3]
SCALING INDEX = 3
removed
[2, 0, 2, 1]
SCALING INDEX = 3
removed
[3, 0, 0, 1]
SCALING INDEX = 3
removed
[1, 1, 2, 2]
SCALING INDEX = 3
removed
[2, 1, 0, 2]
SCALING INDEX = 3
removed
[0, 2, 2, 3]
SCALING INDEX = 3
removed
[1, 2, 0, 3]
SCALING INDEX = 3
removed
[2, 0, 3, 0]
SCALING INDEX = 3
removed
[3, 0, 1, 0]
SCALING INDEX = 3
removed
Starting at index 106 with window 10
[1, 1, 3, 1]
SCALING INDEX = 3
removed
[2, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 2, 3, 2]
SCALING INDEX = 3
removed
[1, 2, 1, 2]
SCALING INDEX = 3
removed
[0, 3, 1, 3]
SCALING INDEX = 3
removed
[2, 1, 2, 0]
SCALING INDEX = 3
removed
[3, 1, 0, 0]
SCALING INDEX = 3
removed
[1, 2, 2, 1]
SCALING INDEX = 3
removed
[2, 2, 0, 1]
SCALING INDEX = 3
removed
[0, 3, 2, 2]
SCALING INDEX = 3
removed
Starting at index 116 with window 10
[1, 3, 0, 2]
SCALING INDEX = 3
removed
[1, 2, 3, 0]
SCALING INDEX = 3
removed
[2, 2, 1, 0]
SCALING INDEX = 3
removed
[0, 3, 3, 1]
SCALING INDEX = 3
removed
[1, 3, 1, 1]
SCALING INDEX = 3
removed
[1, 0, 3, 3]
SCALING INDEX = 3
removed
[2, 0, 1, 3]
SCALING INDEX = 3
removed
[1, 3, 2, 0]
SCALING INDEX = 3
removed
[2, 3, 0, 0]
SCALING INDEX = 3
removed
[2, 0, 2, 2]
SCALING INDEX = 3
removed
Starting at index 126 with window 10
[3, 0, 0, 2]
SCALING INDEX = 3
removed
[1, 1, 2, 3]
SCALING INDEX = 3
removed
[2, 1, 0, 3]
SCALING INDEX = 3
removed
[2, 0, 3, 1]
SCALING INDEX = 3
removed
[3, 0, 1, 1]
SCALING INDEX = 3
removed
[1, 1, 3, 2]
SCALING INDEX = 3
removed
[2, 1, 1, 2]
SCALING INDEX = 3
removed
[0, 2, 3, 3]
SCALING INDEX = 3
removed
[1, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 0, 2, 0]
SCALING INDEX = 3
removed
Starting at index 136 with window 10
[2, 1, 2, 1]
SCALING INDEX = 3
removed
[3, 1, 0, 1]
SCALING INDEX = 3
removed
[1, 2, 2, 2]
SCALING INDEX = 3
removed
[2, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 3, 2, 3]
SCALING INDEX = 3
removed
[1, 3, 0, 3]
SCALING INDEX = 3
removed
[2, 1, 3, 0]
SCALING INDEX = 3
removed
[3, 1, 1, 0]
SCALING INDEX = 3
removed
[1, 2, 3, 1]
SCALING INDEX = 3
removed
[2, 2, 1, 1]
SCALING INDEX = 3
removed
Starting at index 146 with window 10
[0, 3, 3, 2]
SCALING INDEX = 3
removed
[1, 3, 1, 2]
SCALING INDEX = 3
removed
[2, 2, 2, 0]
SCALING INDEX = 3
removed
[3, 2, 0, 0]
SCALING INDEX = 3
removed
[1, 3, 2, 1]
SCALING INDEX = 3
removed
[2, 3, 0, 1]
SCALING INDEX = 3
removed
[2, 0, 2, 3]
SCALING INDEX = 3
removed
[3, 0, 0, 3]
SCALING INDEX = 3
removed
[1, 3, 3, 0]
SCALING INDEX = 3
removed
[2, 3, 1, 0]
SCALING INDEX = 3
removed
Starting at index 156 with window 10
[2, 0, 3, 2]
SCALING INDEX = 3
removed
[3, 0, 1, 2]
SCALING INDEX = 3
removed
[1, 1, 3, 3]
SCALING INDEX = 3
removed
[2, 1, 1, 3]
SCALING INDEX = 3
removed
[3, 0, 2, 1]
SCALING INDEX = 3
removed
[2, 1, 2, 2]
SCALING INDEX = 3
removed
[3, 1, 0, 2]
SCALING INDEX = 3
removed
[1, 2, 2, 3]
SCALING INDEX = 3
removed
[2, 2, 0, 3]
SCALING INDEX = 3
removed
[3, 0, 3, 0]
SCALING INDEX = 3
removed
Starting at index 166 with window 10
[2, 1, 3, 1]
SCALING INDEX = 3
removed
[3, 1, 1, 1]
SCALING INDEX = 3
removed
[1, 2, 3, 2]
SCALING INDEX = 3
removed
[2, 2, 1, 2]
SCALING INDEX = 3
removed
[0, 3, 3, 3]
SCALING INDEX = 3
removed
[1, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 0]
SCALING INDEX = 3
removed
[2, 2, 2, 1]
SCALING INDEX = 3
removed
[3, 2, 0, 1]
SCALING INDEX = 3
removed
[1, 3, 2, 2]
SCALING INDEX = 3
removed
Starting at index 176 with window 10
[2, 3, 0, 2]
SCALING INDEX = 3
removed
[2, 2, 3, 0]
SCALING INDEX = 3
removed
[3, 2, 1, 0]
SCALING INDEX = 3
removed
[1, 3, 3, 1]
SCALING INDEX = 3
removed
[2, 3, 1, 1]
SCALING INDEX = 3
removed
[2, 0, 3, 3]
SCALING INDEX = 3
removed
[3, 0, 1, 3]
SCALING INDEX = 3
removed
[2, 3, 2, 0]
SCALING INDEX = 3
removed
[3, 3, 0, 0]
SCALING INDEX = 3
removed
[3, 0, 2, 2]
SCALING INDEX = 3
removed
Starting at index 186 with window 10
[2, 1, 2, 3]
SCALING INDEX = 3
removed
[3, 1, 0, 3]
SCALING INDEX = 3
removed
[3, 0, 3, 1]
SCALING INDEX = 3
removed
[2, 1, 3, 2]
SCALING INDEX = 3
removed
[3, 1, 1, 2]
SCALING INDEX = 3
removed
[1, 2, 3, 3]
SCALING INDEX = 3
removed
[2, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 1]
SCALING INDEX = 3
removed
[2, 2, 2, 2]
SCALING INDEX = 3
removed
[3, 2, 0, 2]
SCALING INDEX = 3
removed
Starting at index 196 with window 10
[1, 3, 2, 3]
SCALING INDEX = 3
removed
[2, 3, 0, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 0]
SCALING INDEX = 3
removed
[2, 2, 3, 1]
SCALING INDEX = 3
removed
[3, 2, 1, 1]
SCALING INDEX = 3
removed
[1, 3, 3, 2]
SCALING INDEX = 3
removed
[2, 3, 1, 2]
SCALING INDEX = 3
removed
[3, 2, 2, 0]
SCALING INDEX = 3
removed
[2, 3, 2, 1]
SCALING INDEX = 3
removed
[3, 3, 0, 1]
SCALING INDEX = 3
removed
Starting at index 206 with window 10
[3, 0, 2, 3]
SCALING INDEX = 3
removed
[2, 3, 3, 0]
SCALING INDEX = 3
removed
[3, 3, 1, 0]
SCALING INDEX = 3
removed
[3, 0, 3, 2]
SCALING INDEX = 3
removed
[2, 1, 3, 3]
SCALING INDEX = 3
removed
[3, 1, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 2]
SCALING INDEX = 3
removed
[2, 2, 2, 3]
SCALING INDEX = 3
removed
[3, 2, 0, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 1]
SCALING INDEX = 3
removed
Starting at index 216 with window 10
[2, 2, 3, 2]
SCALING INDEX = 3
removed
[3, 2, 1, 2]
SCALING INDEX = 3
removed
[1, 3, 3, 3]
SCALING INDEX = 3
removed
[2, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 1]
SCALING INDEX = 3
removed
[2, 3, 2, 2]
SCALING INDEX = 3
removed
[3, 3, 0, 2]
SCALING INDEX = 3
removed
[3, 2, 3, 0]
SCALING INDEX = 3
removed
[2, 3, 3, 1]
SCALING INDEX = 3
removed
[3, 3, 1, 1]
SCALING INDEX = 3
removed
Starting at index 226 with window 10
[3, 0, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 0]
SCALING INDEX = 3
removed
[3, 1, 2, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 2]
SCALING INDEX = 3
removed
[2, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 2]
SCALING INDEX = 3
removed
[2, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 0, 3]
SCALING INDEX = 3
removed
[3, 2, 3, 1]
SCALING INDEX = 3
removed
Starting at index 236 with window 10
[2, 3, 3, 2]
SCALING INDEX = 3
removed
[3, 3, 1, 2]
SCALING INDEX = 3
removed
[3, 3, 2, 1]
SCALING INDEX = 3
removed
[3, 3, 3, 0]
SCALING INDEX = 3
removed
[3, 1, 3, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 3]
SCALING INDEX = 3
removed
[3, 2, 3, 2]
SCALING INDEX = 3
removed
[2, 3, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 2]
SCALING INDEX = 3
removed
Starting at index 246 with window 10
[3, 3, 3, 1]
SCALING INDEX = 3
removed
[3, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 3, 2]
SCALING INDEX = 3
removed
[3, 3, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 3, 1]
SCALING INDEX = 3
removed
[3, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 3, 2]
SCALING INDEX = 3
removed
[3, 3, 3, 3]
SCALING INDEX = 3
removed
Starting at index 256 with window 10
No config exists that meets all filtering constraints
Recursive down scaling disabled
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
Passing over worker in previously failed scaling
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '115', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fb4baf1cd10>, <src.sla.WorkerConf object at 0x7fb4baf1c290>, <src.sla.WorkerConf object at 0x7fb4baf1c110>, <src.sla.WorkerConf object at 0x7fb4baf1ce50>]], [{}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fb4bd5faa10>, <src.sla.WorkerConf object at 0x7fb4bd5fac50>, <src.sla.WorkerConf object at 0x7fb4bd5fa850>, <src.sla.WorkerConf object at 0x7fb4bd5fa790>]]]
Conf 0:
115
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;0;3 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '115', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 6 with window 1
[0, 0, 0, 3]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '115', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '124', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  1 tenants and 0;0;0;3:
Returning adaptive scaler for  1 tenants and 0;0;0;3:
1
255
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '1001', '0021', '0030', '1010', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}
Starting at: 6
Tenant_nb: 1, maxTenants: 1
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 0, 3]
Measured completion time is 116.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fb4bd5f1850>, <src.sla.WorkerConf object at 0x7fb4bd5f1a50>, <src.sla.WorkerConf object at 0x7fb4bd5f1d50>, <src.sla.WorkerConf object at 0x7fb4bd5f1b50>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_0_3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
SCALE DOWN DIFF
Rescaling worker 4
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
6
4
3
2
Moving filtered samples in sorted combinations after the window
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '1001', '0021', '0102', '0030', '1010', '0111', '0120', '1100', '0201', '0210', '0013', '0300', '0022', '1002', '0103', '0031', '1011', '0112', '1020', '2000', '0121', '1101', '0202', '0130', '1110', '0211', '0220', '1200', '0301', '0023', '1003', '0310', '0032', '1012', '0113', '1021', '2001', '0122', '1102', '0203', '1030', '2010', '0131', '1111', '0212', '1120', '2100', '0221', '1201', '0302', '0230', '1210', '0311', '0033', '1013', '0320', '1300', '1022', '2002', '0123', '1103', '1031', '2011', '0132', '1112', '0213', '2020', '3000', '1121', '2101', '0222', '1202', '0303', '1130', '2110', '0231', '1211', '0312', '1220', '2200', '0321', '1301', '1023', '2003', '0330', '1310', '1032', '2012', '0133', '1113', '2021', '3001', '1122', '2102', '0223', '1203', '2030', '3010', '1131', '2111', '0232', '1212', '0313', '2120', '3100', '1221', '2201', '0322', '1302', '1230', '2210', '0331', '1311', '1033', '2013', '1320', '2300', '2022', '3002', '1123', '2103', '2031', '3011', '1132', '2112', '0233', '1213', '3020', '2121', '3101', '1222', '2202', '0323', '1303', '2130', '3110', '1231', '2211', '0332', '1312', '2220', '3200', '1321', '2301', '2023', '3003', '1330', '2310', '2032', '3012', '1133', '2113', '3021', '2122', '3102', '1223', '2203', '3030', '2131', '3111', '1232', '2212', '0333', '1313', '3120', '2221', '3201', '1322', '2302', '2230', '3210', '1331', '2311', '2033', '3013', '2320', '3300', '3022', '2123', '3103', '3031', '2132', '3112', '1233', '2213', '3121', '2222', '3202', '1323', '2303', '3130', '2231', '3211', '1332', '2312', '3220', '2321', '3301', '3023', '2330', '3310', '3032', '2133', '3113', '3122', '2223', '3203', '3131', '2232', '3212', '1333', '2313', '3221', '2322', '3302', '3230', '2331', '3311', '3033', '3320', '3123', '3132', '2233', '3213', '3222', '2323', '3303', '3231', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 6 with window 10
Starting at index 6 with window 10
Going to 2 tenants
[0, 0, 0, 3]
SCALING INDEX = 3
removed
[0, 0, 1, 2]
SCALING INDEX = 3
removed
[1, 0, 0, 1]
SCALING INDEX = 3
removed
[0, 0, 2, 1]
SCALING INDEX = 3
removed
[0, 1, 0, 2]
SCALING INDEX = 3
removed
[0, 0, 3, 0]
SCALING INDEX = 3
removed
[1, 0, 1, 0]
SCALING INDEX = 3
removed
[0, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 2, 0]
SCALING INDEX = 3
removed
[1, 1, 0, 0]
SCALING INDEX = 3
removed
Starting at index 16 with window 10
Going to 2 tenants
[0, 2, 0, 1]
SCALING INDEX = 3
removed
[0, 2, 1, 0]
SCALING INDEX = 3
removed
[0, 0, 1, 3]
SCALING INDEX = 3
removed
[0, 3, 0, 0]
SCALING INDEX = 3
removed
[0, 0, 2, 2]
SCALING INDEX = 3
removed
[1, 0, 0, 2]
SCALING INDEX = 3
removed
[0, 1, 0, 3]
SCALING INDEX = 3
removed
[0, 0, 3, 1]
SCALING INDEX = 3
removed
[1, 0, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 1, 2]
SCALING INDEX = 3
removed
Starting at index 26 with window 10
Going to 2 tenants
[1, 0, 2, 0]
SCALING INDEX = 3
removed
[2, 0, 0, 0]
SCALING INDEX = 3
removed
[0, 1, 2, 1]
SCALING INDEX = 3
removed
[1, 1, 0, 1]
SCALING INDEX = 3
removed
[0, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 1, 3, 0]
SCALING INDEX = 3
removed
[1, 1, 1, 0]
SCALING INDEX = 3
removed
[0, 2, 1, 1]
SCALING INDEX = 3
removed
[0, 2, 2, 0]
SCALING INDEX = 3
removed
[1, 2, 0, 0]
SCALING INDEX = 3
removed
Starting at index 36 with window 10
Going to 2 tenants
[0, 3, 0, 1]
SCALING INDEX = 3
removed
[0, 0, 2, 3]
SCALING INDEX = 3
removed
[1, 0, 0, 3]
SCALING INDEX = 3
removed
[0, 3, 1, 0]
SCALING INDEX = 3
removed
[0, 0, 3, 2]
SCALING INDEX = 3
removed
[1, 0, 1, 2]
SCALING INDEX = 3
removed
[0, 1, 1, 3]
SCALING INDEX = 3
removed
[1, 0, 2, 1]
SCALING INDEX = 3
removed
[2, 0, 0, 1]
SCALING INDEX = 3
removed
[0, 1, 2, 2]
SCALING INDEX = 3
removed
Starting at index 46 with window 10
Going to 2 tenants
[1, 1, 0, 2]
SCALING INDEX = 3
removed
[0, 2, 0, 3]
SCALING INDEX = 3
removed
[1, 0, 3, 0]
SCALING INDEX = 3
removed
[2, 0, 1, 0]
SCALING INDEX = 3
removed
[0, 1, 3, 1]
SCALING INDEX = 3
removed
[1, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 2, 1, 2]
SCALING INDEX = 3
removed
[1, 1, 2, 0]
SCALING INDEX = 3
removed
[2, 1, 0, 0]
SCALING INDEX = 3
removed
[0, 2, 2, 1]
SCALING INDEX = 3
removed
Starting at index 56 with window 10
Going to 2 tenants
[1, 2, 0, 1]
SCALING INDEX = 3
removed
[0, 3, 0, 2]
SCALING INDEX = 3
removed
[0, 2, 3, 0]
SCALING INDEX = 3
removed
[1, 2, 1, 0]
SCALING INDEX = 3
removed
[0, 3, 1, 1]
SCALING INDEX = 3
removed
[0, 0, 3, 3]
SCALING INDEX = 3
removed
[1, 0, 1, 3]
SCALING INDEX = 3
removed
[0, 3, 2, 0]
SCALING INDEX = 3
removed
[1, 3, 0, 0]
SCALING INDEX = 3
removed
[1, 0, 2, 2]
SCALING INDEX = 3
removed
Starting at index 66 with window 10
Going to 2 tenants
[2, 0, 0, 2]
SCALING INDEX = 3
removed
[0, 1, 2, 3]
SCALING INDEX = 3
removed
[1, 1, 0, 3]
SCALING INDEX = 3
removed
[1, 0, 3, 1]
SCALING INDEX = 3
removed
[2, 0, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 3, 2]
SCALING INDEX = 3
removed
[1, 1, 1, 2]
SCALING INDEX = 3
removed
[0, 2, 1, 3]
SCALING INDEX = 3
removed
[2, 0, 2, 0]
SCALING INDEX = 3
removed
[3, 0, 0, 0]
SCALING INDEX = 3
removed
Starting at index 76 with window 10
Going to 2 tenants
[1, 1, 2, 1]
SCALING INDEX = 3
removed
[2, 1, 0, 1]
SCALING INDEX = 3
removed
[0, 2, 2, 2]
SCALING INDEX = 3
removed
[1, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 3, 0, 3]
SCALING INDEX = 3
removed
[1, 1, 3, 0]
SCALING INDEX = 3
removed
[2, 1, 1, 0]
SCALING INDEX = 3
removed
[0, 2, 3, 1]
SCALING INDEX = 3
removed
[1, 2, 1, 1]
SCALING INDEX = 3
removed
[0, 3, 1, 2]
SCALING INDEX = 3
removed
Starting at index 86 with window 10
Going to 2 tenants
[1, 2, 2, 0]
SCALING INDEX = 3
removed
[2, 2, 0, 0]
SCALING INDEX = 3
removed
[0, 3, 2, 1]
SCALING INDEX = 3
removed
[1, 3, 0, 1]
SCALING INDEX = 3
removed
[1, 0, 2, 3]
SCALING INDEX = 3
removed
[2, 0, 0, 3]
SCALING INDEX = 3
removed
[0, 3, 3, 0]
SCALING INDEX = 3
removed
[1, 3, 1, 0]
SCALING INDEX = 3
removed
[1, 0, 3, 2]
SCALING INDEX = 3
removed
[2, 0, 1, 2]
SCALING INDEX = 3
removed
Starting at index 96 with window 10
Going to 2 tenants
[0, 1, 3, 3]
SCALING INDEX = 3
removed
[1, 1, 1, 3]
SCALING INDEX = 3
removed
[2, 0, 2, 1]
SCALING INDEX = 3
removed
[3, 0, 0, 1]
SCALING INDEX = 3
removed
[1, 1, 2, 2]
SCALING INDEX = 3
removed
[2, 1, 0, 2]
SCALING INDEX = 3
removed
[0, 2, 2, 3]
SCALING INDEX = 3
removed
[1, 2, 0, 3]
SCALING INDEX = 3
removed
[2, 0, 3, 0]
SCALING INDEX = 3
removed
[3, 0, 1, 0]
SCALING INDEX = 3
removed
Starting at index 106 with window 10
Going to 2 tenants
[1, 1, 3, 1]
SCALING INDEX = 3
removed
[2, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 2, 3, 2]
SCALING INDEX = 3
removed
[1, 2, 1, 2]
SCALING INDEX = 3
removed
[0, 3, 1, 3]
SCALING INDEX = 3
removed
[2, 1, 2, 0]
SCALING INDEX = 3
removed
[3, 1, 0, 0]
SCALING INDEX = 3
removed
[1, 2, 2, 1]
SCALING INDEX = 3
removed
[2, 2, 0, 1]
SCALING INDEX = 3
removed
[0, 3, 2, 2]
SCALING INDEX = 3
removed
Starting at index 116 with window 10
Going to 2 tenants
[1, 3, 0, 2]
SCALING INDEX = 3
removed
[1, 2, 3, 0]
SCALING INDEX = 3
removed
[2, 2, 1, 0]
SCALING INDEX = 3
removed
[0, 3, 3, 1]
SCALING INDEX = 3
removed
[1, 3, 1, 1]
SCALING INDEX = 3
removed
[1, 0, 3, 3]
SCALING INDEX = 3
removed
[2, 0, 1, 3]
SCALING INDEX = 3
removed
[1, 3, 2, 0]
SCALING INDEX = 3
removed
[2, 3, 0, 0]
SCALING INDEX = 3
removed
[2, 0, 2, 2]
SCALING INDEX = 3
removed
Starting at index 126 with window 10
Going to 2 tenants
[3, 0, 0, 2]
SCALING INDEX = 3
removed
[1, 1, 2, 3]
SCALING INDEX = 3
removed
[2, 1, 0, 3]
SCALING INDEX = 3
removed
[2, 0, 3, 1]
SCALING INDEX = 3
removed
[3, 0, 1, 1]
SCALING INDEX = 3
removed
[1, 1, 3, 2]
SCALING INDEX = 3
removed
[2, 1, 1, 2]
SCALING INDEX = 3
removed
[0, 2, 3, 3]
SCALING INDEX = 3
removed
[1, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 0, 2, 0]
SCALING INDEX = 3
removed
Starting at index 136 with window 10
Going to 2 tenants
[2, 1, 2, 1]
SCALING INDEX = 3
removed
[3, 1, 0, 1]
SCALING INDEX = 3
removed
[1, 2, 2, 2]
SCALING INDEX = 3
removed
[2, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 3, 2, 3]
SCALING INDEX = 3
removed
[1, 3, 0, 3]
SCALING INDEX = 3
removed
[2, 1, 3, 0]
SCALING INDEX = 3
removed
[3, 1, 1, 0]
SCALING INDEX = 3
removed
[1, 2, 3, 1]
SCALING INDEX = 3
removed
[2, 2, 1, 1]
SCALING INDEX = 3
removed
Starting at index 146 with window 10
Going to 2 tenants
[0, 3, 3, 2]
SCALING INDEX = 3
removed
[1, 3, 1, 2]
SCALING INDEX = 3
removed
[2, 2, 2, 0]
SCALING INDEX = 3
removed
[3, 2, 0, 0]
SCALING INDEX = 3
removed
[1, 3, 2, 1]
SCALING INDEX = 3
removed
[2, 3, 0, 1]
SCALING INDEX = 3
removed
[2, 0, 2, 3]
SCALING INDEX = 3
removed
[3, 0, 0, 3]
SCALING INDEX = 3
removed
[1, 3, 3, 0]
SCALING INDEX = 3
removed
[2, 3, 1, 0]
SCALING INDEX = 3
removed
Starting at index 156 with window 10
Going to 2 tenants
[2, 0, 3, 2]
SCALING INDEX = 3
removed
[3, 0, 1, 2]
SCALING INDEX = 3
removed
[1, 1, 3, 3]
SCALING INDEX = 3
removed
[2, 1, 1, 3]
SCALING INDEX = 3
removed
[3, 0, 2, 1]
SCALING INDEX = 3
removed
[2, 1, 2, 2]
SCALING INDEX = 3
removed
[3, 1, 0, 2]
SCALING INDEX = 3
removed
[1, 2, 2, 3]
SCALING INDEX = 3
removed
[2, 2, 0, 3]
SCALING INDEX = 3
removed
[3, 0, 3, 0]
SCALING INDEX = 3
removed
Starting at index 166 with window 10
Going to 2 tenants
[2, 1, 3, 1]
SCALING INDEX = 3
removed
[3, 1, 1, 1]
SCALING INDEX = 3
removed
[1, 2, 3, 2]
SCALING INDEX = 3
removed
[2, 2, 1, 2]
SCALING INDEX = 3
removed
[0, 3, 3, 3]
SCALING INDEX = 3
removed
[1, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 0]
SCALING INDEX = 3
removed
[2, 2, 2, 1]
SCALING INDEX = 3
removed
[3, 2, 0, 1]
SCALING INDEX = 3
removed
[1, 3, 2, 2]
SCALING INDEX = 3
removed
Starting at index 176 with window 10
Going to 2 tenants
[2, 3, 0, 2]
SCALING INDEX = 3
removed
[2, 2, 3, 0]
SCALING INDEX = 3
removed
[3, 2, 1, 0]
SCALING INDEX = 3
removed
[1, 3, 3, 1]
SCALING INDEX = 3
removed
[2, 3, 1, 1]
SCALING INDEX = 3
removed
[2, 0, 3, 3]
SCALING INDEX = 3
removed
[3, 0, 1, 3]
SCALING INDEX = 3
removed
[2, 3, 2, 0]
SCALING INDEX = 3
removed
[3, 3, 0, 0]
SCALING INDEX = 3
removed
[3, 0, 2, 2]
SCALING INDEX = 3
removed
Starting at index 186 with window 10
Going to 2 tenants
[2, 1, 2, 3]
SCALING INDEX = 3
removed
[3, 1, 0, 3]
SCALING INDEX = 3
removed
[3, 0, 3, 1]
SCALING INDEX = 3
removed
[2, 1, 3, 2]
SCALING INDEX = 3
removed
[3, 1, 1, 2]
SCALING INDEX = 3
removed
[1, 2, 3, 3]
SCALING INDEX = 3
removed
[2, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 1]
SCALING INDEX = 3
removed
[2, 2, 2, 2]
SCALING INDEX = 3
removed
[3, 2, 0, 2]
SCALING INDEX = 3
removed
Starting at index 196 with window 10
Going to 2 tenants
[1, 3, 2, 3]
SCALING INDEX = 3
removed
[2, 3, 0, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 0]
SCALING INDEX = 3
removed
[2, 2, 3, 1]
SCALING INDEX = 3
removed
[3, 2, 1, 1]
SCALING INDEX = 3
removed
[1, 3, 3, 2]
SCALING INDEX = 3
removed
[2, 3, 1, 2]
SCALING INDEX = 3
removed
[3, 2, 2, 0]
SCALING INDEX = 3
removed
[2, 3, 2, 1]
SCALING INDEX = 3
removed
[3, 3, 0, 1]
SCALING INDEX = 3
removed
Starting at index 206 with window 10
Going to 2 tenants
[3, 0, 2, 3]
SCALING INDEX = 3
removed
[2, 3, 3, 0]
SCALING INDEX = 3
removed
[3, 3, 1, 0]
SCALING INDEX = 3
removed
[3, 0, 3, 2]
SCALING INDEX = 3
removed
[2, 1, 3, 3]
SCALING INDEX = 3
removed
[3, 1, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 2]
SCALING INDEX = 3
removed
[2, 2, 2, 3]
SCALING INDEX = 3
removed
[3, 2, 0, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 1]
SCALING INDEX = 3
removed
Starting at index 216 with window 10
Going to 2 tenants
[2, 2, 3, 2]
SCALING INDEX = 3
removed
[3, 2, 1, 2]
SCALING INDEX = 3
removed
[1, 3, 3, 3]
SCALING INDEX = 3
removed
[2, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 1]
SCALING INDEX = 3
removed
[2, 3, 2, 2]
SCALING INDEX = 3
removed
[3, 3, 0, 2]
SCALING INDEX = 3
removed
[3, 2, 3, 0]
SCALING INDEX = 3
removed
[2, 3, 3, 1]
SCALING INDEX = 3
removed
[3, 3, 1, 1]
SCALING INDEX = 3
removed
Starting at index 226 with window 10
Going to 2 tenants
[3, 0, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 0]
SCALING INDEX = 3
removed
[3, 1, 2, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 2]
SCALING INDEX = 3
removed
[2, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 2]
SCALING INDEX = 3
removed
[2, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 0, 3]
SCALING INDEX = 3
removed
[3, 2, 3, 1]
SCALING INDEX = 3
removed
Starting at index 236 with window 10
Going to 2 tenants
[2, 3, 3, 2]
SCALING INDEX = 3
removed
[3, 3, 1, 2]
SCALING INDEX = 3
removed
[3, 3, 2, 1]
SCALING INDEX = 3
removed
[3, 3, 3, 0]
SCALING INDEX = 3
removed
[3, 1, 3, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 3]
SCALING INDEX = 3
removed
[3, 2, 3, 2]
SCALING INDEX = 3
removed
[2, 3, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 2]
SCALING INDEX = 3
removed
Starting at index 246 with window 10
Going to 2 tenants
[3, 3, 3, 1]
SCALING INDEX = 3
removed
[3, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 3, 2]
SCALING INDEX = 3
removed
[3, 3, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 3, 1]
SCALING INDEX = 3
removed
[3, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 3, 2]
SCALING INDEX = 3
removed
[3, 3, 3, 3]
SCALING INDEX = 3
removed
Starting at index 256 with window 10
Going to 2 tenants
No config exists that meets all filtering constraints
Recursive down scaling disabled
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
6
Passing over worker in previously failed scaling
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fb4bd5f1850>, <src.sla.WorkerConf object at 0x7fb4bd5f1a50>, <src.sla.WorkerConf object at 0x7fb4bd5f1d50>, <src.sla.WorkerConf object at 0x7fb4bd5f1b50>]], [{}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fb4baf25950>, <src.sla.WorkerConf object at 0x7fb4baf25fd0>, <src.sla.WorkerConf object at 0x7fb4baf25f10>, <src.sla.WorkerConf object at 0x7fb4baf25e50>]]]
Conf 0:
116
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;0;3 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '116', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=False}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 6 with window 1
[0, 0, 0, 3]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  2 tenants and 0;0;0;3:
1
255
Getting next batch of experiments for 2 tenants
Moving filtered samples in sorted combinations after the window
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '0021', '1001', '1010', '0030', '0102', '0111', '0120', '1100', '0201', '0210', '0300', '0013', '0022', '1002', '0031', '1011', '1020', '2000', '0103', '0112', '0121', '1101', '0130', '1110', '0202', '0211', '0220', '1200', '0301', '0310', '0023', '1003', '0032', '1012', '1021', '2001', '1030', '2010', '0113', '0122', '1102', '0131', '1111', '1120', '2100', '0203', '0212', '0221', '1201', '0230', '1210', '0302', '0311', '0320', '1300', '0033', '1013', '1022', '2002', '1031', '2011', '2020', '3000', '0123', '1103', '0132', '1112', '1121', '2101', '1130', '2110', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '0330', '1310', '1023', '2003', '1032', '2012', '2021', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 0 with window 6
Starting at index 0 with window 6
[0, 0, 1, 1]
removed
[0, 0, 2, 0]
removed
[1, 0, 0, 0]
removed
[0, 1, 0, 1]
removed
[0, 1, 1, 0]
removed
[0, 2, 0, 0]
removed
Starting at index 6 with window 6
[0, 0, 0, 3]
not removed
[0, 0, 1, 2]
not removed
[0, 0, 2, 1]
removed
[1, 0, 0, 1]
removed
[1, 0, 1, 0]
removed
[0, 0, 3, 0]
removed
Going to 2 tenants
[0, 0, 0, 3]
removed
[0, 0, 1, 2]
removed
Starting at index 12 with window 6
[1, 0, 1, 0]
removed
[0, 0, 3, 0]
removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 2, 0, 1]
removed
[0, 2, 1, 0]
removed
Starting at index 18 with window 6
[0, 3, 0, 0]
removed
[0, 0, 1, 3]
not removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 0, 3, 1]
removed
[1, 0, 1, 1]
removed
Going to 2 tenants
[0, 0, 1, 3]
removed
[0, 0, 2, 2]
removed
[1, 0, 0, 2]
removed
Starting at index 24 with window 6
[0, 1, 0, 3]
not removed
[0, 0, 3, 1]
removed
[1, 0, 1, 1]
removed
[0, 1, 1, 2]
not removed
[0, 1, 2, 1]
removed
[1, 1, 0, 1]
removed
Going to 2 tenants
[0, 1, 0, 3]
removed
[0, 1, 1, 2]
removed
Starting at index 30 with window 6
[0, 1, 2, 1]
removed
[1, 1, 0, 1]
removed
[0, 2, 0, 2]
not removed
[0, 2, 1, 1]
removed
[0, 2, 2, 0]
removed
[1, 2, 0, 0]
removed
Going to 2 tenants
[0, 2, 0, 2]
removed
Starting at index 36 with window 6
[1, 2, 0, 0]
removed
[0, 3, 1, 0]
removed
[0, 0, 2, 3]
not removed
[1, 0, 0, 3]
not removed
[0, 0, 3, 2]
removed
[1, 0, 1, 2]
not removed
Going to 2 tenants
[0, 0, 2, 3]
removed
[1, 0, 0, 3]
removed
[1, 0, 1, 2]
removed
Starting at index 42 with window 6
[2, 0, 0, 1]
removed
[0, 0, 3, 2]
removed
[1, 0, 3, 0]
removed
[2, 0, 1, 0]
removed
[0, 1, 1, 3]
not removed
[0, 1, 2, 2]
removed
Going to 2 tenants
[0, 1, 1, 3]
removed
Starting at index 48 with window 6
[0, 1, 2, 2]
removed
[0, 1, 3, 1]
removed
[1, 1, 1, 1]
removed
[1, 1, 2, 0]
removed
[2, 1, 0, 0]
removed
[0, 2, 0, 3]
not removed
Going to 2 tenants
[0, 2, 0, 3]
removed
Starting at index 54 with window 6
[0, 2, 1, 2]
removed
[0, 2, 2, 1]
removed
[1, 2, 0, 1]
removed
[0, 2, 3, 0]
removed
[1, 2, 1, 0]
removed
[0, 3, 0, 2]
removed
Starting at index 60 with window 6
[0, 3, 1, 1]
removed
[0, 3, 2, 0]
removed
[1, 3, 0, 0]
removed
[0, 0, 3, 3]
removed
[1, 0, 1, 3]
not removed
[1, 0, 2, 2]
removed
Going to 2 tenants
[1, 0, 1, 3]
removed
Starting at index 66 with window 6
[1, 0, 2, 2]
removed
[1, 0, 3, 1]
removed
[2, 0, 1, 1]
removed
[2, 0, 2, 0]
removed
[3, 0, 0, 0]
removed
[0, 1, 2, 3]
removed
Starting at index 72 with window 6
[1, 1, 0, 3]
not removed
[0, 1, 3, 2]
removed
[1, 1, 1, 2]
removed
[1, 1, 2, 1]
removed
[2, 1, 0, 1]
removed
[1, 1, 3, 0]
removed
Going to 2 tenants
[1, 1, 0, 3]
removed
Starting at index 78 with window 6
[1, 1, 3, 0]
removed
[0, 2, 1, 3]
removed
[0, 2, 2, 2]
removed
[1, 2, 0, 2]
removed
[0, 2, 3, 1]
removed
[1, 2, 1, 1]
removed
Starting at index 84 with window 6
[1, 2, 2, 0]
removed
[2, 2, 0, 0]
removed
[0, 3, 0, 3]
removed
[0, 3, 1, 2]
removed
[0, 3, 2, 1]
removed
[1, 3, 0, 1]
removed
Starting at index 90 with window 6
[0, 3, 3, 0]
removed
[1, 3, 1, 0]
removed
[1, 0, 2, 3]
removed
[2, 0, 0, 3]
not removed
[1, 0, 3, 2]
removed
[2, 0, 1, 2]
removed
Going to 2 tenants
[2, 0, 0, 3]
removed
Starting at index 96 with window 6
[2, 0, 1, 2]
removed
[3, 0, 0, 1]
removed
[2, 0, 3, 0]
removed
[3, 0, 1, 0]
removed
[0, 1, 3, 3]
removed
[1, 1, 1, 3]
removed
Starting at index 102 with window 6
[1, 1, 2, 2]
removed
[2, 1, 0, 2]
removed
[1, 1, 3, 1]
removed
[2, 1, 1, 1]
removed
[2, 1, 2, 0]
removed
[3, 1, 0, 0]
removed
Starting at index 108 with window 6
[0, 2, 2, 3]
removed
[1, 2, 0, 3]
removed
[0, 2, 3, 2]
removed
[1, 2, 1, 2]
removed
[1, 2, 2, 1]
removed
[2, 2, 0, 1]
removed
Starting at index 114 with window 6
[1, 2, 3, 0]
removed
[2, 2, 1, 0]
removed
[0, 3, 1, 3]
removed
[0, 3, 2, 2]
removed
[1, 3, 0, 2]
removed
[0, 3, 3, 1]
removed
Starting at index 120 with window 6
[1, 3, 1, 1]
removed
[1, 3, 2, 0]
removed
[2, 3, 0, 0]
removed
[1, 0, 3, 3]
removed
[2, 0, 1, 3]
removed
[2, 0, 2, 2]
removed
Starting at index 126 with window 6
[3, 0, 0, 2]
removed
[2, 0, 3, 1]
removed
[3, 0, 1, 1]
removed
[3, 0, 2, 0]
removed
[1, 1, 2, 3]
removed
[2, 1, 0, 3]
removed
Starting at index 132 with window 6
[1, 1, 3, 2]
removed
[2, 1, 1, 2]
removed
[2, 1, 2, 1]
removed
[3, 1, 0, 1]
removed
[2, 1, 3, 0]
removed
[3, 1, 1, 0]
removed
Starting at index 138 with window 6
[0, 2, 3, 3]
removed
[1, 2, 1, 3]
removed
[1, 2, 2, 2]
removed
[2, 2, 0, 2]
removed
[1, 2, 3, 1]
removed
[2, 2, 1, 1]
removed
Starting at index 144 with window 6
[2, 2, 2, 0]
removed
[3, 2, 0, 0]
removed
[0, 3, 2, 3]
removed
[1, 3, 0, 3]
removed
[0, 3, 3, 2]
removed
[1, 3, 1, 2]
removed
Starting at index 150 with window 6
[1, 3, 2, 1]
removed
[2, 3, 0, 1]
removed
[1, 3, 3, 0]
removed
[2, 3, 1, 0]
removed
[2, 0, 2, 3]
removed
[3, 0, 0, 3]
removed
Starting at index 156 with window 6
[2, 0, 3, 2]
removed
[3, 0, 1, 2]
removed
[3, 0, 2, 1]
removed
[3, 0, 3, 0]
removed
[1, 1, 3, 3]
removed
[2, 1, 1, 3]
removed
Starting at index 162 with window 6
[2, 1, 2, 2]
removed
[3, 1, 0, 2]
removed
[2, 1, 3, 1]
removed
[3, 1, 1, 1]
removed
[3, 1, 2, 0]
removed
[1, 2, 2, 3]
removed
Starting at index 168 with window 6
[2, 2, 0, 3]
removed
[1, 2, 3, 2]
removed
[2, 2, 1, 2]
removed
[2, 2, 2, 1]
removed
[3, 2, 0, 1]
removed
[2, 2, 3, 0]
removed
Starting at index 174 with window 6
[3, 2, 1, 0]
removed
[0, 3, 3, 3]
removed
[1, 3, 1, 3]
removed
[1, 3, 2, 2]
removed
[2, 3, 0, 2]
removed
[1, 3, 3, 1]
removed
Starting at index 180 with window 6
[2, 3, 1, 1]
removed
[2, 3, 2, 0]
removed
[3, 3, 0, 0]
removed
[2, 0, 3, 3]
removed
[3, 0, 1, 3]
removed
[3, 0, 2, 2]
removed
Starting at index 186 with window 6
[3, 0, 3, 1]
removed
[2, 1, 2, 3]
removed
[3, 1, 0, 3]
removed
[2, 1, 3, 2]
removed
[3, 1, 1, 2]
removed
[3, 1, 2, 1]
removed
Starting at index 192 with window 6
[3, 1, 3, 0]
removed
[1, 2, 3, 3]
removed
[2, 2, 1, 3]
removed
[2, 2, 2, 2]
removed
[3, 2, 0, 2]
removed
[2, 2, 3, 1]
removed
Starting at index 198 with window 6
[3, 2, 1, 1]
removed
[3, 2, 2, 0]
removed
[1, 3, 2, 3]
removed
[2, 3, 0, 3]
removed
[1, 3, 3, 2]
removed
[2, 3, 1, 2]
removed
Starting at index 204 with window 6
[2, 3, 2, 1]
removed
[3, 3, 0, 1]
removed
[2, 3, 3, 0]
removed
[3, 3, 1, 0]
removed
[3, 0, 2, 3]
removed
[3, 0, 3, 2]
removed
Starting at index 210 with window 6
[2, 1, 3, 3]
removed
[3, 1, 1, 3]
removed
[3, 1, 2, 2]
removed
[3, 1, 3, 1]
removed
[2, 2, 2, 3]
removed
[3, 2, 0, 3]
removed
Starting at index 216 with window 6
[2, 2, 3, 2]
removed
[3, 2, 1, 2]
removed
[3, 2, 2, 1]
removed
[3, 2, 3, 0]
removed
[1, 3, 3, 3]
removed
[2, 3, 1, 3]
removed
Starting at index 222 with window 6
[2, 3, 2, 2]
removed
[3, 3, 0, 2]
removed
[2, 3, 3, 1]
removed
[3, 3, 1, 1]
removed
[3, 3, 2, 0]
removed
[3, 0, 3, 3]
removed
Starting at index 228 with window 6
[3, 1, 2, 3]
removed
[3, 1, 3, 2]
removed
[2, 2, 3, 3]
removed
[3, 2, 1, 3]
removed
[3, 2, 2, 2]
removed
[3, 2, 3, 1]
removed
Starting at index 234 with window 6
[2, 3, 2, 3]
removed
[3, 3, 0, 3]
removed
[2, 3, 3, 2]
removed
[3, 3, 1, 2]
removed
[3, 3, 2, 1]
removed
[3, 3, 3, 0]
removed
Starting at index 240 with window 6
[3, 1, 3, 3]
removed
[3, 2, 2, 3]
removed
[3, 2, 3, 2]
removed
[2, 3, 3, 3]
removed
[3, 3, 1, 3]
removed
[3, 3, 2, 2]
removed
Starting at index 246 with window 6
[3, 3, 3, 1]
removed
[3, 2, 3, 3]
removed
[3, 3, 2, 3]
removed
[3, 3, 3, 2]
removed
[3, 3, 3, 3]
removed
[3, 3, 3, 1]
removed
Starting at index 252 with window 6
min_conf: 0 0 0 3
min_conf_dec: 6
6
[0, 0, 0, 3]
{'0': [[0, 0, 3]]}
{'0': [[0, 3, 0]]}
{'0': [[3, 0, 0]]}
{'3': [[0, 0, 0]]}
Next possible experiments for next nb of tenants
{'0': [[0, 0, 3]]}
Elementstr: [[0,0,0,3]]
Min replicacount:0 0 0 3
Max replicacount:0 0 0 3
Generating new experiment. Saving results on Results/exp3/silver/2_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 171
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '116', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '171', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-1', 'config': '0', 'score': '-1.1400000000000001', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '137', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  2 tenants and 0;0;0;3:
Returning adaptive scaler for  2 tenants and 0;0;0;3:
1
255
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '0102', '0111', '0021', '1001', '1010', '0030', '0120', '1100', '0201', '0210', '0013', '0022', '1002', '0300', '1020', '2000', '0103', '0112', '0130', '0031', '1011', '1110', '0202', '0121', '1101', '0301', '0211', '0220', '0023', '1003', '1012', '1200', '0310', '1021', '0113', '2001', '0032', '1030', '2010', '1102', '0203', '0122', '0131', '1111', '1120', '2100', '0212', '0221', '1201', '0230', '1210', '0302', '1013', '0311', '0320', '1300', '0033', '2002', '1022', '1031', '2011', '2020', '3000', '0123', '1103', '2110', '0132', '1112', '1121', '2101', '1130', '0213', '0222', '1202', '0231', '1211', '1220', '2200', '0303', '0312', '0321', '1301', '2003', '0330', '1310', '1023', '2021', '1032', '2012', '3001', '2030', '3010', '0133', '1113', '1122', '2102', '1131', '2111', '2120', '3100', '0223', '1203', '0232', '1212', '1221', '2201', '1230', '2210', '0313', '0322', '1302', '0331', '1311', '1320', '2300', '1033', '2013', '2022', '3002', '2031', '3011', '3020', '1123', '2103', '1132', '2112', '2121', '3101', '2130', '3110', '0233', '1213', '1222', '2202', '1231', '2211', '2220', '3200', '0323', '1303', '0332', '1312', '1321', '2301', '1330', '2310', '2023', '3003', '2032', '3012', '3021', '3030', '1133', '2113', '2122', '3102', '2131', '3111', '3120', '1223', '2203', '1232', '2212', '2221', '3201', '2230', '3210', '0333', '1313', '1322', '2302', '1331', '2311', '2320', '3300', '2033', '3013', '3022', '3031', '2123', '3103', '2132', '3112', '3121', '3130', '1233', '2213', '2222', '3202', '2231', '3211', '3220', '1323', '2303', '1332', '2312', '2321', '3301', '2330', '3310', '3023', '3032', '2133', '3113', '3122', '3131', '2223', '3203', '2232', '3212', '3221', '3230', '1333', '2313', '2322', '3302', '2331', '3311', '3320', '3033', '3123', '3132', '2233', '3213', '3222', '3231', '2323', '3303', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3233', '3323', '3332', '3333', '3331']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}
Starting at: 6
Tenant_nb: 2, maxTenants: 2
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/2_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 119
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/2_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 0, 3] -> 119
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 0, 3]
Measured completion time is 119.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[553583943]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fb4bd5fb2d0>, <src.sla.WorkerConf object at 0x7fb4baf04550>, <src.sla.WorkerConf object at 0x7fb4baec0150>, <src.sla.WorkerConf object at 0x7fb4baec0510>]]]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
NO COST EFFECTIVE RESULT
Starting with0_0_0_3
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
4
SCALE DOWN DIFF
Rescaling worker 4
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 2, 'memory': 2}
6
4
3
2
Moving filtered samples in sorted combinations after the window
['0011', '0020', '1000', '0101', '0110', '0200', '0003', '0012', '0102', '0021', '1001', '0111', '1010', '0030', '0120', '1100', '0201', '0210', '0013', '0022', '1002', '0300', '0103', '0112', '0031', '1011', '1020', '2000', '0202', '0121', '1101', '0130', '1110', '0211', '0301', '0220', '0023', '1003', '1200', '1012', '0310', '0113', '0032', '1021', '2001', '1102', '0203', '0122', '1030', '2010', '0131', '1111', '0212', '1120', '2100', '0221', '1201', '0302', '0230', '1210', '1013', '0311', '0033', '0320', '1300', '2002', '1022', '0123', '1103', '1031', '2011', '0132', '1112', '0213', '2020', '3000', '1121', '2101', '0222', '1202', '0303', '2110', '1130', '0231', '1211', '0312', '1220', '2200', '0321', '1301', '2003', '1023', '0330', '1310', '1032', '2012', '0133', '1113', '2021', '3001', '1122', '2102', '0223', '1203', '2030', '3010', '1131', '2111', '0232', '1212', '0313', '2120', '3100', '1221', '2201', '0322', '1302', '1230', '2210', '0331', '1311', '1033', '2013', '1320', '2300', '2022', '3002', '1123', '2103', '2031', '3011', '1132', '2112', '0233', '1213', '3020', '2121', '3101', '1222', '2202', '0323', '1303', '2130', '3110', '1231', '2211', '0332', '1312', '2220', '3200', '1321', '2301', '2023', '3003', '1330', '2310', '2032', '3012', '1133', '2113', '3021', '2122', '3102', '1223', '2203', '3030', '2131', '3111', '1232', '2212', '0333', '1313', '3120', '2221', '3201', '1322', '2302', '2230', '3210', '1331', '2311', '2033', '3013', '2320', '3300', '3022', '2123', '3103', '3031', '2132', '3112', '1233', '2213', '3121', '2222', '3202', '1323', '2303', '3130', '2231', '3211', '1332', '2312', '3220', '2321', '3301', '3023', '2330', '3310', '3032', '2133', '3113', '3122', '2223', '3203', '3131', '2232', '3212', '1333', '2313', '3221', '2322', '3302', '3230', '2331', '3311', '3033', '3320', '3123', '3132', '2233', '3213', '3222', '2323', '3303', '3231', '2332', '3312', '3321', '3330', '3133', '3223', '3232', '2333', '3313', '3322', '3331', '3233', '3323', '3332', '3333']
Filtering from index 6 with window 10
Starting at index 6 with window 10
[0, 0, 0, 3]
not removed
[0, 0, 1, 2]
not removed
[0, 1, 0, 2]
not removed
[0, 0, 2, 1]
SCALING INDEX = 3
removed
[1, 0, 0, 1]
SCALING INDEX = 3
removed
[0, 1, 1, 1]
SCALING INDEX = 3
removed
[1, 0, 1, 0]
SCALING INDEX = 3
removed
[0, 0, 3, 0]
SCALING INDEX = 3
removed
[0, 1, 2, 0]
SCALING INDEX = 3
removed
[1, 1, 0, 0]
SCALING INDEX = 3
removed
Going to 2 tenants
[0, 0, 0, 3]
SCALING INDEX = 3
removed
[0, 0, 1, 2]
SCALING INDEX = 3
removed
[0, 1, 0, 2]
SCALING INDEX = 3
removed
Starting at index 16 with window 10
[0, 0, 3, 0]
SCALING INDEX = 3
removed
[0, 1, 2, 0]
SCALING INDEX = 3
removed
[1, 1, 0, 0]
SCALING INDEX = 3
removed
[0, 0, 2, 2]
SCALING INDEX = 3
removed
[1, 0, 0, 2]
SCALING INDEX = 3
removed
[0, 3, 0, 0]
SCALING INDEX = 3
removed
[0, 1, 0, 3]
SCALING INDEX = 3
removed
[0, 1, 1, 2]
SCALING INDEX = 3
removed
[0, 0, 3, 1]
SCALING INDEX = 3
removed
[1, 0, 1, 1]
SCALING INDEX = 3
removed
Starting at index 26 with window 10
[1, 0, 2, 0]
SCALING INDEX = 3
removed
[2, 0, 0, 0]
SCALING INDEX = 3
removed
[0, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 1, 2, 1]
SCALING INDEX = 3
removed
[1, 1, 0, 1]
SCALING INDEX = 3
removed
[0, 1, 3, 0]
SCALING INDEX = 3
removed
[1, 1, 1, 0]
SCALING INDEX = 3
removed
[0, 2, 1, 1]
SCALING INDEX = 3
removed
[0, 3, 0, 1]
SCALING INDEX = 3
removed
[0, 2, 2, 0]
SCALING INDEX = 3
removed
Starting at index 36 with window 10
[0, 0, 2, 3]
SCALING INDEX = 3
removed
[1, 0, 0, 3]
SCALING INDEX = 3
removed
[1, 2, 0, 0]
SCALING INDEX = 3
removed
[1, 0, 1, 2]
SCALING INDEX = 3
removed
[0, 3, 1, 0]
SCALING INDEX = 3
removed
[0, 1, 1, 3]
SCALING INDEX = 3
removed
[0, 0, 3, 2]
SCALING INDEX = 3
removed
[1, 0, 2, 1]
SCALING INDEX = 3
removed
[2, 0, 0, 1]
SCALING INDEX = 3
removed
[1, 1, 0, 2]
SCALING INDEX = 3
removed
Starting at index 46 with window 10
[0, 2, 0, 3]
SCALING INDEX = 3
removed
[0, 1, 2, 2]
SCALING INDEX = 3
removed
[1, 0, 3, 0]
SCALING INDEX = 3
removed
[2, 0, 1, 0]
SCALING INDEX = 3
removed
[0, 1, 3, 1]
SCALING INDEX = 3
removed
[1, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 2, 1, 2]
SCALING INDEX = 3
removed
[1, 1, 2, 0]
SCALING INDEX = 3
removed
[2, 1, 0, 0]
SCALING INDEX = 3
removed
[0, 2, 2, 1]
SCALING INDEX = 3
removed
Starting at index 56 with window 10
[1, 2, 0, 1]
SCALING INDEX = 3
removed
[0, 3, 0, 2]
SCALING INDEX = 3
removed
[0, 2, 3, 0]
SCALING INDEX = 3
removed
[1, 2, 1, 0]
SCALING INDEX = 3
removed
[1, 0, 1, 3]
SCALING INDEX = 3
removed
[0, 3, 1, 1]
SCALING INDEX = 3
removed
[0, 0, 3, 3]
SCALING INDEX = 3
removed
[0, 3, 2, 0]
SCALING INDEX = 3
removed
[1, 3, 0, 0]
SCALING INDEX = 3
removed
[2, 0, 0, 2]
SCALING INDEX = 3
removed
Starting at index 66 with window 10
[1, 0, 2, 2]
SCALING INDEX = 3
removed
[0, 1, 2, 3]
SCALING INDEX = 3
removed
[1, 1, 0, 3]
SCALING INDEX = 3
removed
[1, 0, 3, 1]
SCALING INDEX = 3
removed
[2, 0, 1, 1]
SCALING INDEX = 3
removed
[0, 1, 3, 2]
SCALING INDEX = 3
removed
[1, 1, 1, 2]
SCALING INDEX = 3
removed
[0, 2, 1, 3]
SCALING INDEX = 3
removed
[2, 0, 2, 0]
SCALING INDEX = 3
removed
[3, 0, 0, 0]
SCALING INDEX = 3
removed
Starting at index 76 with window 10
[1, 1, 2, 1]
SCALING INDEX = 3
removed
[2, 1, 0, 1]
SCALING INDEX = 3
removed
[0, 2, 2, 2]
SCALING INDEX = 3
removed
[1, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 3, 0, 3]
SCALING INDEX = 3
removed
[2, 1, 1, 0]
SCALING INDEX = 3
removed
[1, 1, 3, 0]
SCALING INDEX = 3
removed
[0, 2, 3, 1]
SCALING INDEX = 3
removed
[1, 2, 1, 1]
SCALING INDEX = 3
removed
[0, 3, 1, 2]
SCALING INDEX = 3
removed
Starting at index 86 with window 10
[1, 2, 2, 0]
SCALING INDEX = 3
removed
[2, 2, 0, 0]
SCALING INDEX = 3
removed
[0, 3, 2, 1]
SCALING INDEX = 3
removed
[1, 3, 0, 1]
SCALING INDEX = 3
removed
[2, 0, 0, 3]
SCALING INDEX = 3
removed
[1, 0, 2, 3]
SCALING INDEX = 3
removed
[0, 3, 3, 0]
SCALING INDEX = 3
removed
[1, 3, 1, 0]
SCALING INDEX = 3
removed
[1, 0, 3, 2]
SCALING INDEX = 3
removed
[2, 0, 1, 2]
SCALING INDEX = 3
removed
Starting at index 96 with window 10
[0, 1, 3, 3]
SCALING INDEX = 3
removed
[1, 1, 1, 3]
SCALING INDEX = 3
removed
[2, 0, 2, 1]
SCALING INDEX = 3
removed
[3, 0, 0, 1]
SCALING INDEX = 3
removed
[1, 1, 2, 2]
SCALING INDEX = 3
removed
[2, 1, 0, 2]
SCALING INDEX = 3
removed
[0, 2, 2, 3]
SCALING INDEX = 3
removed
[1, 2, 0, 3]
SCALING INDEX = 3
removed
[2, 0, 3, 0]
SCALING INDEX = 3
removed
[3, 0, 1, 0]
SCALING INDEX = 3
removed
Starting at index 106 with window 10
[1, 1, 3, 1]
SCALING INDEX = 3
removed
[2, 1, 1, 1]
SCALING INDEX = 3
removed
[0, 2, 3, 2]
SCALING INDEX = 3
removed
[1, 2, 1, 2]
SCALING INDEX = 3
removed
[0, 3, 1, 3]
SCALING INDEX = 3
removed
[2, 1, 2, 0]
SCALING INDEX = 3
removed
[3, 1, 0, 0]
SCALING INDEX = 3
removed
[1, 2, 2, 1]
SCALING INDEX = 3
removed
[2, 2, 0, 1]
SCALING INDEX = 3
removed
[0, 3, 2, 2]
SCALING INDEX = 3
removed
Starting at index 116 with window 10
[1, 3, 0, 2]
SCALING INDEX = 3
removed
[1, 2, 3, 0]
SCALING INDEX = 3
removed
[2, 2, 1, 0]
SCALING INDEX = 3
removed
[0, 3, 3, 1]
SCALING INDEX = 3
removed
[1, 3, 1, 1]
SCALING INDEX = 3
removed
[1, 0, 3, 3]
SCALING INDEX = 3
removed
[2, 0, 1, 3]
SCALING INDEX = 3
removed
[1, 3, 2, 0]
SCALING INDEX = 3
removed
[2, 3, 0, 0]
SCALING INDEX = 3
removed
[2, 0, 2, 2]
SCALING INDEX = 3
removed
Starting at index 126 with window 10
[3, 0, 0, 2]
SCALING INDEX = 3
removed
[1, 1, 2, 3]
SCALING INDEX = 3
removed
[2, 1, 0, 3]
SCALING INDEX = 3
removed
[2, 0, 3, 1]
SCALING INDEX = 3
removed
[3, 0, 1, 1]
SCALING INDEX = 3
removed
[1, 1, 3, 2]
SCALING INDEX = 3
removed
[2, 1, 1, 2]
SCALING INDEX = 3
removed
[0, 2, 3, 3]
SCALING INDEX = 3
removed
[1, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 0, 2, 0]
SCALING INDEX = 3
removed
Starting at index 136 with window 10
[2, 1, 2, 1]
SCALING INDEX = 3
removed
[3, 1, 0, 1]
SCALING INDEX = 3
removed
[1, 2, 2, 2]
SCALING INDEX = 3
removed
[2, 2, 0, 2]
SCALING INDEX = 3
removed
[0, 3, 2, 3]
SCALING INDEX = 3
removed
[1, 3, 0, 3]
SCALING INDEX = 3
removed
[2, 1, 3, 0]
SCALING INDEX = 3
removed
[3, 1, 1, 0]
SCALING INDEX = 3
removed
[1, 2, 3, 1]
SCALING INDEX = 3
removed
[2, 2, 1, 1]
SCALING INDEX = 3
removed
Starting at index 146 with window 10
[0, 3, 3, 2]
SCALING INDEX = 3
removed
[1, 3, 1, 2]
SCALING INDEX = 3
removed
[2, 2, 2, 0]
SCALING INDEX = 3
removed
[3, 2, 0, 0]
SCALING INDEX = 3
removed
[1, 3, 2, 1]
SCALING INDEX = 3
removed
[2, 3, 0, 1]
SCALING INDEX = 3
removed
[2, 0, 2, 3]
SCALING INDEX = 3
removed
[3, 0, 0, 3]
SCALING INDEX = 3
removed
[1, 3, 3, 0]
SCALING INDEX = 3
removed
[2, 3, 1, 0]
SCALING INDEX = 3
removed
Starting at index 156 with window 10
[2, 0, 3, 2]
SCALING INDEX = 3
removed
[3, 0, 1, 2]
SCALING INDEX = 3
removed
[1, 1, 3, 3]
SCALING INDEX = 3
removed
[2, 1, 1, 3]
SCALING INDEX = 3
removed
[3, 0, 2, 1]
SCALING INDEX = 3
removed
[2, 1, 2, 2]
SCALING INDEX = 3
removed
[3, 1, 0, 2]
SCALING INDEX = 3
removed
[1, 2, 2, 3]
SCALING INDEX = 3
removed
[2, 2, 0, 3]
SCALING INDEX = 3
removed
[3, 0, 3, 0]
SCALING INDEX = 3
removed
Starting at index 166 with window 10
[2, 1, 3, 1]
SCALING INDEX = 3
removed
[3, 1, 1, 1]
SCALING INDEX = 3
removed
[1, 2, 3, 2]
SCALING INDEX = 3
removed
[2, 2, 1, 2]
SCALING INDEX = 3
removed
[0, 3, 3, 3]
SCALING INDEX = 3
removed
[1, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 0]
SCALING INDEX = 3
removed
[2, 2, 2, 1]
SCALING INDEX = 3
removed
[3, 2, 0, 1]
SCALING INDEX = 3
removed
[1, 3, 2, 2]
SCALING INDEX = 3
removed
Starting at index 176 with window 10
[2, 3, 0, 2]
SCALING INDEX = 3
removed
[2, 2, 3, 0]
SCALING INDEX = 3
removed
[3, 2, 1, 0]
SCALING INDEX = 3
removed
[1, 3, 3, 1]
SCALING INDEX = 3
removed
[2, 3, 1, 1]
SCALING INDEX = 3
removed
[2, 0, 3, 3]
SCALING INDEX = 3
removed
[3, 0, 1, 3]
SCALING INDEX = 3
removed
[2, 3, 2, 0]
SCALING INDEX = 3
removed
[3, 3, 0, 0]
SCALING INDEX = 3
removed
[3, 0, 2, 2]
SCALING INDEX = 3
removed
Starting at index 186 with window 10
[2, 1, 2, 3]
SCALING INDEX = 3
removed
[3, 1, 0, 3]
SCALING INDEX = 3
removed
[3, 0, 3, 1]
SCALING INDEX = 3
removed
[2, 1, 3, 2]
SCALING INDEX = 3
removed
[3, 1, 1, 2]
SCALING INDEX = 3
removed
[1, 2, 3, 3]
SCALING INDEX = 3
removed
[2, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 1]
SCALING INDEX = 3
removed
[2, 2, 2, 2]
SCALING INDEX = 3
removed
[3, 2, 0, 2]
SCALING INDEX = 3
removed
Starting at index 196 with window 10
[1, 3, 2, 3]
SCALING INDEX = 3
removed
[2, 3, 0, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 0]
SCALING INDEX = 3
removed
[2, 2, 3, 1]
SCALING INDEX = 3
removed
[3, 2, 1, 1]
SCALING INDEX = 3
removed
[1, 3, 3, 2]
SCALING INDEX = 3
removed
[2, 3, 1, 2]
SCALING INDEX = 3
removed
[3, 2, 2, 0]
SCALING INDEX = 3
removed
[2, 3, 2, 1]
SCALING INDEX = 3
removed
[3, 3, 0, 1]
SCALING INDEX = 3
removed
Starting at index 206 with window 10
[3, 0, 2, 3]
SCALING INDEX = 3
removed
[2, 3, 3, 0]
SCALING INDEX = 3
removed
[3, 3, 1, 0]
SCALING INDEX = 3
removed
[3, 0, 3, 2]
SCALING INDEX = 3
removed
[2, 1, 3, 3]
SCALING INDEX = 3
removed
[3, 1, 1, 3]
SCALING INDEX = 3
removed
[3, 1, 2, 2]
SCALING INDEX = 3
removed
[2, 2, 2, 3]
SCALING INDEX = 3
removed
[3, 2, 0, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 1]
SCALING INDEX = 3
removed
Starting at index 216 with window 10
[2, 2, 3, 2]
SCALING INDEX = 3
removed
[3, 2, 1, 2]
SCALING INDEX = 3
removed
[1, 3, 3, 3]
SCALING INDEX = 3
removed
[2, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 1]
SCALING INDEX = 3
removed
[2, 3, 2, 2]
SCALING INDEX = 3
removed
[3, 3, 0, 2]
SCALING INDEX = 3
removed
[3, 2, 3, 0]
SCALING INDEX = 3
removed
[2, 3, 3, 1]
SCALING INDEX = 3
removed
[3, 3, 1, 1]
SCALING INDEX = 3
removed
Starting at index 226 with window 10
[3, 0, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 0]
SCALING INDEX = 3
removed
[3, 1, 2, 3]
SCALING INDEX = 3
removed
[3, 1, 3, 2]
SCALING INDEX = 3
removed
[2, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 2, 1, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 2]
SCALING INDEX = 3
removed
[2, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 0, 3]
SCALING INDEX = 3
removed
[3, 2, 3, 1]
SCALING INDEX = 3
removed
Starting at index 236 with window 10
[2, 3, 3, 2]
SCALING INDEX = 3
removed
[3, 3, 1, 2]
SCALING INDEX = 3
removed
[3, 3, 2, 1]
SCALING INDEX = 3
removed
[3, 3, 3, 0]
SCALING INDEX = 3
removed
[3, 1, 3, 3]
SCALING INDEX = 3
removed
[3, 2, 2, 3]
SCALING INDEX = 3
removed
[3, 2, 3, 2]
SCALING INDEX = 3
removed
[2, 3, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 1, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 2]
SCALING INDEX = 3
removed
Starting at index 246 with window 10
[3, 3, 3, 1]
SCALING INDEX = 3
removed
[3, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 3, 2]
SCALING INDEX = 3
removed
[3, 3, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 3, 1]
SCALING INDEX = 3
removed
[3, 2, 3, 3]
SCALING INDEX = 3
removed
[3, 3, 2, 3]
SCALING INDEX = 3
removed
[3, 3, 3, 2]
SCALING INDEX = 3
removed
[3, 3, 3, 3]
SCALING INDEX = 3
removed
Starting at index 256 with window 10
No config exists that meets all filtering constraints
Recursive down scaling disabled
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
SCALE DOWN DIFF
difference between resource_cost optimal conf and predicted total cost -1
4
Passing over worker in previously failed scaling
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
TIPPED_OVER_CONFS
[]
CURRENT CONFS
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
INITIAL CONFS:
[[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fb4bd5fb2d0>, <src.sla.WorkerConf object at 0x7fb4baf04550>, <src.sla.WorkerConf object at 0x7fb4baec0150>, <src.sla.WorkerConf object at 0x7fb4baec0510>]], [{}, [0, 0, 0, 3], [<src.sla.WorkerConf object at 0x7fb4baf1c650>, <src.sla.WorkerConf object at 0x7fb4baf62cd0>, <src.sla.WorkerConf object at 0x7fb4baf62790>, <src.sla.WorkerConf object at 0x7fb4baf62fd0>]]]
Conf 0:
119
INITIALS WORKER_CONFS:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
cheapest_worker_index: 0
Going back to worker configuration with lowest cost for combination 0;0;0;3 and result
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '119', 'Successfull': 'true'}
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
---------------------------------
Updating scaling function
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking worker configuration:
{workerId=1, resources: {cpu: { size: 6, cost: 1}, memory: { size: 4, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=2, resources: {cpu: { size: 4, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=3, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=0, max_replicas0, flagged=False}
{workerId=4, resources: {cpu: { size: 3, cost: 1}, memory: { size: 2, cost: 1}}, min_replicas=1, max_replicas3, flagged=True}
Double checking scaling function:
[[1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [1, {'cpu': [], 'memory': []}], [2, {'cpu': [1], 'memory': [0]}]]
NO BETTER COST EFFECTIVE ALTERNATIVE IN SIGHT
REDOING_CHEAPEST_SCALED_DOWN
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Starting at index 6 with window 1
[0, 0, 0, 3]
Saving optimal results into matrix for previous results
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
Getting next batch of experiments for 3 tenants
Moving filtered samples in sorted combinations after the window
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0120', '1100', '0111', '0201', '0210', '0300', '1020', '2000', '0031', '1011', '0022', '1002', '0013', '0130', '1110', '0121', '1101', '0112', '0103', '0220', '1200', '0211', '0202', '0310', '0301', '1030', '2010', '1021', '2001', '0032', '1012', '0023', '1003', '1120', '2100', '0131', '1111', '0122', '1102', '0113', '0230', '1210', '0221', '1201', '0212', '0203', '0320', '1300', '0311', '0302', '2020', '3000', '1031', '2011', '1022', '2002', '0033', '1013', '1130', '2110', '1121', '2101', '0132', '1112', '0123', '1103', '1220', '2200', '0231', '1211', '0222', '1202', '0213', '0330', '1310', '0321', '1301', '0312', '0303', '2030', '3010', '2021', '3001', '1032', '2012', '1023', '2003', '2120', '3100', '1131', '2111', '1122', '2102', '0133', '1113', '1230', '2210', '1221', '2201', '0232', '1212', '0223', '1203', '1320', '2300', '0331', '1311', '0322', '1302', '0313', '3020', '2031', '3011', '2022', '3002', '1033', '2013', '2130', '3110', '2121', '3101', '1132', '2112', '1123', '2103', '2220', '3200', '1231', '2211', '1222', '2202', '0233', '1213', '1330', '2310', '1321', '2301', '0332', '1312', '0323', '1303', '3030', '3021', '2032', '3012', '2023', '3003', '3120', '2131', '3111', '2122', '3102', '1133', '2113', '2230', '3210', '2221', '3201', '1232', '2212', '1223', '2203', '2320', '3300', '1331', '2311', '1322', '2302', '0333', '1313', '3031', '3022', '2033', '3013', '3130', '3121', '2132', '3112', '2123', '3103', '3220', '2231', '3211', '2222', '3202', '1233', '2213', '2330', '3310', '2321', '3301', '1332', '2312', '1323', '2303', '3032', '3023', '3131', '3122', '2133', '3113', '3230', '3221', '2232', '3212', '2223', '3203', '3320', '2331', '3311', '2322', '3302', '1333', '2313', '3033', '3132', '3123', '3231', '3222', '2233', '3213', '3330', '3321', '2332', '3312', '2323', '3303', '3133', '3232', '3223', '3331', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
Filtering from index 0 with window 10
Starting at index 0 with window 10
[0, 0, 2, 0]
removed
[1, 0, 0, 0]
removed
[0, 0, 1, 1]
removed
[0, 1, 1, 0]
removed
[0, 1, 0, 1]
removed
[0, 2, 0, 0]
removed
[1, 0, 1, 0]
removed
[0, 0, 3, 0]
removed
[0, 0, 2, 1]
removed
[1, 0, 0, 1]
removed
Starting at index 10 with window 10
[0, 0, 1, 2]
not removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 1, 1, 1]
removed
[0, 2, 0, 1]
removed
[0, 2, 1, 0]
removed
[0, 3, 0, 0]
removed
[1, 0, 2, 0]
removed
Going to 2 tenants
Going to 4 tenants
[0, 0, 1, 2]
removed
[0, 0, 0, 3]
removed
[0, 1, 0, 2]
removed
Starting at index 20 with window 10
[0, 2, 1, 0]
removed
[0, 3, 0, 0]
removed
[1, 0, 2, 0]
removed
[0, 0, 2, 2]
not removed
[1, 0, 0, 2]
not removed
[0, 0, 1, 3]
not removed
[0, 1, 3, 0]
removed
[1, 1, 1, 0]
removed
[0, 1, 2, 1]
removed
[1, 1, 0, 1]
removed
Going to 2 tenants
Going to 4 tenants
[0, 0, 2, 2]
removed
[1, 0, 0, 2]
removed
[0, 0, 1, 3]
removed
Starting at index 30 with window 10
[1, 1, 1, 0]
removed
[0, 1, 2, 1]
removed
[1, 1, 0, 1]
removed
[1, 2, 0, 0]
removed
[0, 2, 1, 1]
removed
[0, 2, 0, 2]
not removed
[0, 3, 1, 0]
removed
[0, 3, 0, 1]
removed
[1, 0, 3, 0]
removed
[2, 0, 1, 0]
removed
Going to 2 tenants
Going to 4 tenants
[0, 2, 0, 2]
removed
Starting at index 40 with window 10
[2, 0, 1, 0]
removed
[2, 0, 0, 1]
removed
[0, 0, 3, 2]
removed
[1, 0, 1, 2]
not removed
[0, 0, 2, 3]
not removed
[1, 0, 0, 3]
not removed
[1, 1, 2, 0]
removed
[2, 1, 0, 0]
removed
[0, 1, 3, 1]
removed
[1, 1, 1, 1]
removed
Going to 2 tenants
Going to 4 tenants
[1, 0, 1, 2]
removed
[0, 0, 2, 3]
removed
[1, 0, 0, 3]
removed
Starting at index 50 with window 10
[2, 1, 0, 0]
removed
[0, 1, 3, 1]
removed
[1, 1, 1, 1]
removed
[0, 2, 3, 0]
removed
[1, 2, 1, 0]
removed
[0, 2, 2, 1]
removed
[1, 2, 0, 1]
removed
[0, 2, 1, 2]
removed
[0, 2, 0, 3]
not removed
[0, 3, 2, 0]
removed
Going to 2 tenants
Going to 4 tenants
[0, 2, 0, 3]
removed
Starting at index 60 with window 10
[0, 3, 2, 0]
removed
[0, 3, 1, 1]
removed
[0, 3, 0, 2]
removed
[2, 0, 2, 0]
removed
[3, 0, 0, 0]
removed
[1, 0, 3, 1]
removed
[2, 0, 1, 1]
removed
[1, 0, 2, 2]
removed
[2, 0, 0, 2]
not removed
[0, 0, 3, 3]
removed
Going to 2 tenants
Going to 4 tenants
[2, 0, 0, 2]
removed
Starting at index 70 with window 10
[0, 0, 3, 3]
removed
[1, 1, 3, 0]
removed
[2, 1, 1, 0]
removed
[1, 1, 2, 1]
removed
[2, 1, 0, 1]
removed
[0, 1, 3, 2]
removed
[1, 1, 1, 2]
removed
[0, 1, 2, 3]
removed
[1, 1, 0, 3]
not removed
[1, 2, 2, 0]
removed
Going to 2 tenants
Going to 4 tenants
[1, 1, 0, 3]
removed
Starting at index 80 with window 10
[1, 2, 2, 0]
removed
[0, 2, 3, 1]
removed
[1, 2, 1, 1]
removed
[0, 2, 2, 2]
removed
[1, 2, 0, 2]
removed
[0, 2, 1, 3]
removed
[0, 3, 3, 0]
removed
[1, 3, 1, 0]
removed
[0, 3, 2, 1]
removed
[1, 3, 0, 1]
removed
Starting at index 90 with window 10
[0, 3, 1, 2]
removed
[0, 3, 0, 3]
removed
[2, 0, 3, 0]
removed
[3, 0, 1, 0]
removed
[2, 0, 2, 1]
removed
[3, 0, 0, 1]
removed
[1, 0, 3, 2]
removed
[2, 0, 1, 2]
removed
[1, 0, 2, 3]
removed
[2, 0, 0, 3]
not removed
Going to 2 tenants
Going to 4 tenants
[2, 0, 0, 3]
removed
Starting at index 100 with window 10
[2, 1, 2, 0]
removed
[3, 1, 0, 0]
removed
[1, 1, 3, 1]
removed
[2, 1, 1, 1]
removed
[1, 1, 2, 2]
removed
[2, 1, 0, 2]
removed
[0, 1, 3, 3]
removed
[1, 1, 1, 3]
removed
[1, 2, 3, 0]
removed
[2, 2, 1, 0]
removed
Starting at index 110 with window 10
[1, 2, 2, 1]
removed
[2, 2, 0, 1]
removed
[0, 2, 3, 2]
removed
[1, 2, 1, 2]
removed
[0, 2, 2, 3]
removed
[1, 2, 0, 3]
removed
[1, 3, 2, 0]
removed
[2, 3, 0, 0]
removed
[0, 3, 3, 1]
removed
[1, 3, 1, 1]
removed
Starting at index 120 with window 10
[0, 3, 2, 2]
removed
[1, 3, 0, 2]
removed
[0, 3, 1, 3]
removed
[3, 0, 2, 0]
removed
[2, 0, 3, 1]
removed
[3, 0, 1, 1]
removed
[2, 0, 2, 2]
removed
[3, 0, 0, 2]
removed
[1, 0, 3, 3]
removed
[2, 0, 1, 3]
removed
Starting at index 130 with window 10
[2, 1, 3, 0]
removed
[3, 1, 1, 0]
removed
[2, 1, 2, 1]
removed
[3, 1, 0, 1]
removed
[1, 1, 3, 2]
removed
[2, 1, 1, 2]
removed
[1, 1, 2, 3]
removed
[2, 1, 0, 3]
removed
[2, 2, 2, 0]
removed
[3, 2, 0, 0]
removed
Starting at index 140 with window 10
[1, 2, 3, 1]
removed
[2, 2, 1, 1]
removed
[1, 2, 2, 2]
removed
[2, 2, 0, 2]
removed
[0, 2, 3, 3]
removed
[1, 2, 1, 3]
removed
[1, 3, 3, 0]
removed
[2, 3, 1, 0]
removed
[1, 3, 2, 1]
removed
[2, 3, 0, 1]
removed
Starting at index 150 with window 10
[0, 3, 3, 2]
removed
[1, 3, 1, 2]
removed
[0, 3, 2, 3]
removed
[1, 3, 0, 3]
removed
[3, 0, 3, 0]
removed
[3, 0, 2, 1]
removed
[2, 0, 3, 2]
removed
[3, 0, 1, 2]
removed
[2, 0, 2, 3]
removed
[3, 0, 0, 3]
removed
Starting at index 160 with window 10
[3, 1, 2, 0]
removed
[2, 1, 3, 1]
removed
[3, 1, 1, 1]
removed
[2, 1, 2, 2]
removed
[3, 1, 0, 2]
removed
[1, 1, 3, 3]
removed
[2, 1, 1, 3]
removed
[2, 2, 3, 0]
removed
[3, 2, 1, 0]
removed
[2, 2, 2, 1]
removed
Starting at index 170 with window 10
[3, 2, 0, 1]
removed
[1, 2, 3, 2]
removed
[2, 2, 1, 2]
removed
[1, 2, 2, 3]
removed
[2, 2, 0, 3]
removed
[2, 3, 2, 0]
removed
[3, 3, 0, 0]
removed
[1, 3, 3, 1]
removed
[2, 3, 1, 1]
removed
[1, 3, 2, 2]
removed
Starting at index 180 with window 10
[2, 3, 0, 2]
removed
[0, 3, 3, 3]
removed
[1, 3, 1, 3]
removed
[3, 0, 3, 1]
removed
[3, 0, 2, 2]
removed
[2, 0, 3, 3]
removed
[3, 0, 1, 3]
removed
[3, 1, 3, 0]
removed
[3, 1, 2, 1]
removed
[2, 1, 3, 2]
removed
Starting at index 190 with window 10
[3, 1, 1, 2]
removed
[2, 1, 2, 3]
removed
[3, 1, 0, 3]
removed
[3, 2, 2, 0]
removed
[2, 2, 3, 1]
removed
[3, 2, 1, 1]
removed
[2, 2, 2, 2]
removed
[3, 2, 0, 2]
removed
[1, 2, 3, 3]
removed
[2, 2, 1, 3]
removed
Starting at index 200 with window 10
[2, 3, 3, 0]
removed
[3, 3, 1, 0]
removed
[2, 3, 2, 1]
removed
[3, 3, 0, 1]
removed
[1, 3, 3, 2]
removed
[2, 3, 1, 2]
removed
[1, 3, 2, 3]
removed
[2, 3, 0, 3]
removed
[3, 0, 3, 2]
removed
[3, 0, 2, 3]
removed
Starting at index 210 with window 10
[3, 1, 3, 1]
removed
[3, 1, 2, 2]
removed
[2, 1, 3, 3]
removed
[3, 1, 1, 3]
removed
[3, 2, 3, 0]
removed
[3, 2, 2, 1]
removed
[2, 2, 3, 2]
removed
[3, 2, 1, 2]
removed
[2, 2, 2, 3]
removed
[3, 2, 0, 3]
removed
Starting at index 220 with window 10
[3, 3, 2, 0]
removed
[2, 3, 3, 1]
removed
[3, 3, 1, 1]
removed
[2, 3, 2, 2]
removed
[3, 3, 0, 2]
removed
[1, 3, 3, 3]
removed
[2, 3, 1, 3]
removed
[3, 0, 3, 3]
removed
[3, 1, 3, 2]
removed
[3, 1, 2, 3]
removed
Starting at index 230 with window 10
[3, 2, 3, 1]
removed
[3, 2, 2, 2]
removed
[2, 2, 3, 3]
removed
[3, 2, 1, 3]
removed
[3, 3, 3, 0]
removed
[3, 3, 2, 1]
removed
[2, 3, 3, 2]
removed
[3, 3, 1, 2]
removed
[2, 3, 2, 3]
removed
[3, 3, 0, 3]
removed
Starting at index 240 with window 10
[3, 1, 3, 3]
removed
[3, 2, 3, 2]
removed
[3, 2, 2, 3]
removed
[3, 3, 3, 1]
removed
[3, 3, 2, 2]
removed
[2, 3, 3, 3]
removed
[3, 3, 1, 3]
removed
[3, 2, 3, 3]
removed
[3, 3, 3, 2]
removed
[3, 3, 2, 3]
removed
Starting at index 250 with window 10
[3, 3, 3, 3]
removed
[3, 3, 3, 3]
removed
[3, 3, 3, 3]
removed
[3, 3, 3, 3]
removed
[3, 3, 3, 3]
removed
[3, 3, 3, 3]
removed
[3, 3, 3, 3]
removed
[3, 3, 3, 3]
removed
[3, 3, 3, 3]
removed
[3, 3, 3, 3]
removed
Starting at index 260 with window 10
min_conf: 0 0 1 2
min_conf_dec: 10
10
[0, 0, 1, 2]
{'0': [[0, 1, 2]]}
{'0': [[1, 2, 0]]}
{'1': [[2, 0, 0]]}
{'2': [[0, 0, 1]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 2]]}
Elementstr: [[0,0,1,2]]
Min replicacount:0 0 1 2
Max replicacount:0 0 1 2
Generating new experiment. Saving results on Results/exp3/silver/3_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 1e-09
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '116', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '119', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '1e-09', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  3 tenants and 0;0;1;2:
Returning adaptive scaler for  3 tenants and 0;0;1;2:
1
255
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '2000', '0031', '1011', '0120', '1100', '0111', '0201', '0022', '1002', '0013', '0210', '0300', '1020', '0112', '0103', '0220', '0130', '0202', '1110', '0121', '1101', '1200', '0211', '1021', '0310', '0301', '1030', '1012', '0023', '1003', '2010', '2001', '0032', '0122', '1102', '0113', '1120', '0203', '2100', '0131', '1111', '0230', '1210', '0221', '1201', '0212', '1300', '2002', '0320', '0311', '0302', '2020', '3000', '1031', '2011', '1022', '1013', '1103', '0033', '1130', '2110', '1121', '2101', '0132', '1112', '0123', '2200', '1220', '0231', '1211', '0222', '1202', '0213', '0330', '1310', '0321', '1301', '2003', '0312', '0303', '2030', '3010', '2021', '3001', '1032', '2012', '1023', '2120', '3100', '1131', '2111', '1122', '2102', '0133', '1113', '1230', '2210', '1221', '2201', '0232', '1212', '0223', '1203', '1320', '2300', '0331', '1311', '0322', '1302', '0313', '3020', '2031', '3011', '2022', '3002', '1033', '2013', '2130', '3110', '2121', '3101', '1132', '2112', '1123', '2103', '2220', '3200', '1231', '2211', '1222', '2202', '0233', '1213', '1330', '2310', '1321', '2301', '0332', '1312', '0323', '1303', '3030', '3021', '2032', '3012', '2023', '3003', '3120', '2131', '3111', '2122', '3102', '1133', '2113', '2230', '3210', '2221', '3201', '1232', '2212', '1223', '2203', '2320', '3300', '1331', '2311', '1322', '2302', '0333', '1313', '3031', '3022', '2033', '3013', '3130', '3121', '2132', '3112', '2123', '3103', '3220', '2231', '3211', '2222', '3202', '1233', '2213', '2330', '3310', '2321', '3301', '1332', '2312', '1323', '2303', '3032', '3023', '3131', '3122', '2133', '3113', '3230', '3221', '2232', '3212', '2223', '3203', '3320', '2331', '3311', '2322', '3302', '1333', '2313', '3033', '3132', '3123', '3231', '3222', '2233', '3213', '3330', '3321', '2332', '3312', '2323', '3303', '3133', '3232', '3223', '3331', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '132', 'Successfull': 'true'}
Starting at: 10
Tenant_nb: 3, maxTenants: 3
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '132', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '132', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '132', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '132', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/3_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 132
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/3_tenants-ex0/op/
SAMPLE_LIST
[0, 0, 1, 2] -> 132
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '132', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': '-0.19230769230769232', 'best_score': '-0.19230769230769232', 'SLAName': 'silver', 'CompletionTime': '132', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 132.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '116', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '119', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '132', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': 1000149.0, 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '134', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  4 tenants and 0;0;1;2:
Returning adaptive scaler for  4 tenants and 0;0;1;2:
1
255
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0031', '1011', '1020', '1100', '0111', '0120', '0210', '0201', '0300', '2000', '0022', '1002', '0013', '0130', '1110', '0121', '1101', '0112', '0103', '0220', '1200', '0211', '0202', '0310', '0301', '1030', '2010', '1021', '2001', '0032', '1012', '0023', '1003', '1120', '2100', '0131', '1111', '0122', '1102', '0113', '0230', '1210', '0221', '1201', '0212', '0203', '0320', '1300', '0311', '0302', '2020', '3000', '1031', '2011', '1022', '2002', '0033', '1013', '1130', '2110', '1121', '2101', '0132', '1112', '0123', '1103', '1220', '2200', '0231', '1211', '0222', '1202', '0213', '0330', '1310', '0321', '1301', '0312', '0303', '2030', '3010', '2021', '3001', '1032', '2012', '1023', '2003', '2120', '3100', '1131', '2111', '1122', '2102', '0133', '1113', '1230', '2210', '1221', '2201', '0232', '1212', '0223', '1203', '1320', '2300', '0331', '1311', '0322', '1302', '0313', '3020', '2031', '3011', '2022', '3002', '1033', '2013', '2130', '3110', '2121', '3101', '1132', '2112', '1123', '2103', '2220', '3200', '1231', '2211', '1222', '2202', '0233', '1213', '1330', '2310', '1321', '2301', '0332', '1312', '0323', '1303', '3030', '3021', '2032', '3012', '2023', '3003', '3120', '2131', '3111', '2122', '3102', '1133', '2113', '2230', '3210', '2221', '3201', '1232', '2212', '1223', '2203', '2320', '3300', '1331', '2311', '1322', '2302', '0333', '1313', '3031', '3022', '2033', '3013', '3130', '3121', '2132', '3112', '2123', '3103', '3220', '2231', '3211', '2222', '3202', '1233', '2213', '2330', '3310', '2321', '3301', '1332', '2312', '1323', '2303', '3032', '3023', '3131', '3122', '2133', '3113', '3230', '3221', '2232', '3212', '2223', '3203', '3320', '2331', '3311', '2322', '3302', '1333', '2313', '3033', '3132', '3123', '3231', '3222', '2233', '3213', '3330', '3321', '2332', '3312', '2323', '3303', '3133', '3232', '3223', '3331', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}
Starting at: 10
Tenant_nb: 4, maxTenants: 4
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '147', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 147.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
COST-EFFECTIVE-RESULT
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 3, 'memory': 2}
Adding stronger incremental result
Saving optimal results into matrix for previous results
Returning adaptive scaler for  5 tenants and 0;0;1;2:
1
255
Getting next batch of experiments for 5 tenants
Moving filtered samples in sorted combinations after the window
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0120', '1100', '0012', '0111', '0210', '0003', '0102', '0201', '0300', '1020', '2000', '0031', '1011', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
Filtering from index 0 with window 10
Starting at index 0 with window 10
[0, 0, 2, 0]
removed
[1, 0, 0, 0]
removed
[0, 0, 1, 1]
removed
[0, 1, 1, 0]
removed
[0, 1, 0, 1]
removed
[0, 2, 0, 0]
removed
[1, 0, 1, 0]
removed
[0, 0, 3, 0]
removed
[0, 0, 2, 1]
removed
[1, 0, 0, 1]
removed
Starting at index 10 with window 10
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[0, 0, 1, 2]
not removed
[0, 1, 1, 1]
removed
[0, 2, 1, 0]
removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
[0, 2, 0, 1]
removed
[0, 3, 0, 0]
removed
[1, 0, 2, 0]
removed
Going to 2 tenants
[0, 0, 1, 2]
not removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
Going to 4 tenants
Starting at index 10 with window 3
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0120', '1100', '2000', '0111', '0210', '0031', '1011', '0201', '0300', '1020', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
min_conf: 0 0 1 2
min_conf_dec: 10
10
[0, 0, 1, 2]
11
[0, 0, 0, 3]
12
[0, 1, 0, 2]
{'0': [[0, 1, 2], [0, 0, 3], [1, 0, 2]]}
{'0': [[1, 2, 0], [0, 3, 0]], '1': [[0, 2, 0]]}
{'1': [[2, 0, 0]], '0': [[3, 0, 0], [2, 0, 1]]}
{'2': [[0, 0, 1], [0, 1, 0]], '3': [[0, 0, 0]]}
Next possible experiments for next nb of tenants
{'0': [[0, 1, 2], [0, 0, 3], [1, 0, 2]]}
Elementstr: [[0,0,1,2];[0,0,0,3];[0,1,0,2]]
Min replicacount:0 0 1 2
Max replicacount:0 1 0 2
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 128
[0, 0, 1, 2] -> 133
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '116', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '119', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '132', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '147', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '128', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.2222222222222222', 'config': '0', 'score': '-0.2222222222222222', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  5 tenants and 0;1;0;2:
Returning adaptive scaler for  5 tenants and 0;1;0;2:
1
255
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0120', '1100', '2000', '0111', '0210', '0031', '1011', '0201', '0300', '1020', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '151', 'Successfull': 'true'}
Starting at: 12
Tenant_nb: 5, maxTenants: 5
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '151', 'Successfull': 'true'}]
Filtered results
Current result is NO RESULT, therefore, we remove all configs with higher resource_cost than current result for higher number of tenants: 6..5
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '151', 'Successfull': 'true'}]
Filtered results
Left over configs in runtime manager: 
[[0, 0, 1, 2]]
Moving filtered samples in sorted combinations after the window
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0120', '1100', '2000', '0111', '0210', '0031', '1011', '0201', '0300', '1020', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
Filtering from index 10 with window 10
Starting at index 10 with window 10
[0, 0, 1, 2]
not removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
[0, 1, 2, 0]
removed
[1, 1, 0, 0]
removed
[2, 0, 0, 0]
removed
[0, 1, 1, 1]
removed
[0, 2, 1, 0]
removed
[0, 0, 3, 1]
removed
[1, 0, 1, 1]
removed
Going to 2 tenants
[0, 0, 1, 2]
not removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
Going to 4 tenants
[0, 0, 1, 2]
not removed
[0, 0, 0, 3]
not removed
[0, 1, 0, 2]
not removed
Going to 6 tenants
Starting at index 10 with window 3
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0201', '0300', '1020', '0120', '1100', '2000', '0111', '0210', '0031', '1011', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 151
[0, 0, 1, 2] -> 133
There still remains configs to be tested in the current k8-resource-optimizer experiment batch
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
Returning adaptive scaler for  5 tenants and 0;0;1;2:
1
255
Saving optimal results into matrix
{'silver': {'1': {'CompletionTime': '116', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '2': {'CompletionTime': '119', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '3', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '3': {'CompletionTime': '132', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.19230769230769232', 'config': '0', 'score': '-0.19230769230769232', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '4': {'CompletionTime': '147', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': 'n/a', 'config': '0', 'score': 'n/a', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '3', 'worker4.resources.requests.memory': '2'}, '5': {'CompletionTime': '133', 'SLAName': 'silver', 'Successfull': 'true', 'best_score': '-0.20987654320987653', 'config': '1', 'score': '-0.20987654320987653', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2'}}}
Returning adaptive scaler for  5 tenants and 0;0;1;2:
Returning adaptive scaler for  5 tenants and 0;0;1;2:
1
255
['0020', '1000', '0011', '0110', '0101', '0200', '1010', '0030', '0021', '1001', '0012', '0003', '0102', '0201', '0300', '1020', '0120', '1100', '2000', '0111', '0210', '0031', '1011', '0130', '1110', '0022', '1002', '0121', '1101', '0220', '1200', '0013', '0112', '0211', '0310', '0103', '0202', '0301', '1030', '2010', '1021', '2001', '1120', '2100', '0032', '1012', '0131', '1111', '0230', '1210', '0023', '1003', '0122', '1102', '0221', '1201', '0320', '1300', '0113', '0212', '0311', '0203', '0302', '2020', '3000', '1031', '2011', '1130', '2110', '1022', '2002', '1121', '2101', '1220', '2200', '0033', '1013', '0132', '1112', '0231', '1211', '0330', '1310', '0123', '1103', '0222', '1202', '0321', '1301', '0213', '0312', '2030', '3010', '0303', '2021', '3001', '2120', '3100', '1032', '2012', '1131', '2111', '1230', '2210', '1023', '2003', '1122', '2102', '1221', '2201', '1320', '2300', '0133', '1113', '0232', '1212', '0331', '1311', '0223', '1203', '0322', '1302', '3020', '0313', '2031', '3011', '2130', '3110', '2022', '3002', '2121', '3101', '2220', '3200', '1033', '2013', '1132', '2112', '1231', '2211', '1330', '2310', '1123', '2103', '1222', '2202', '1321', '2301', '0233', '1213', '0332', '1312', '3030', '0323', '1303', '3021', '3120', '2032', '3012', '2131', '3111', '2230', '3210', '2023', '3003', '2122', '3102', '2221', '3201', '2320', '3300', '1133', '2113', '1232', '2212', '1331', '2311', '1223', '2203', '1322', '2302', '0333', '1313', '3031', '3130', '3022', '3121', '3220', '2033', '3013', '2132', '3112', '2231', '3211', '2330', '3310', '2123', '3103', '2222', '3202', '2321', '3301', '1233', '2213', '1332', '2312', '1323', '2303', '3032', '3131', '3230', '3023', '3122', '3221', '3320', '2133', '3113', '2232', '3212', '2331', '3311', '2223', '3203', '2322', '3302', '1333', '2313', '3033', '3132', '3231', '3330', '3123', '3222', '3321', '2233', '3213', '2332', '3312', '2323', '3303', '3133', '3232', '3331', '3223', '3322', '2333', '3313', '3233', '3332', '3323', '3333']
{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '134', 'Successfull': 'true'}
Starting at: 10
Tenant_nb: 5, maxTenants: 5
SLO is 150.0
Removing all configs that are useless to actually test as a result of the current result
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '134', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '134', 'Successfull': 'true'}]
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '134', 'Successfull': 'true'}]
Filtered results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': 'n/a', 'best_score': 'n/a', 'SLAName': 'silver', 'CompletionTime': '134', 'Successfull': 'true'}]
Left over configs in runtime manager: 
[]
let k8-resource-optimizer process the inputted previous result
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 151
[0, 0, 1, 2] -> 134
All useful experiment samples have been tested. We let k8-resource-optimizer return all the samples and we calculate the most optimal result from the set of samples that meet the slo
Running 1 experiments
Generating new experiment. Saving results on Results/exp3/silver/5_tenants-ex0/op/
SAMPLE_LIST
[0, 1, 0, 2] -> 151
[0, 0, 1, 2] -> 134
Results
[{'config': '0', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '1', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '0', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': '-1.0066666666666666', 'best_score': '-1', 'SLAName': 'silver', 'CompletionTime': '151', 'Successfull': 'true'}, {'config': '1', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': '-0.20987654320987653', 'best_score': '-0.20987654320987653', 'SLAName': 'silver', 'CompletionTime': '134', 'Successfull': 'true'}]
Filtered results
[{'config': '1', 'worker1.replicaCount': '0', 'worker1.resources.requests.cpu': '6', 'worker1.resources.requests.memory': '4', 'worker2.replicaCount': '0', 'worker2.resources.requests.cpu': '4', 'worker2.resources.requests.memory': '2', 'worker3.replicaCount': '1', 'worker3.resources.requests.cpu': '3', 'worker3.resources.requests.memory': '2', 'worker4.replicaCount': '2', 'worker4.resources.requests.cpu': '4', 'worker4.resources.requests.memory': '2', 'score': '-0.20987654320987653', 'best_score': '-0.20987654320987653', 'SLAName': 'silver', 'CompletionTime': '134', 'Successfull': 'true'}]
RESULT FOUND
[0, 0, 1, 2]
Measured completion time is 134.0
New adaptive scaling cycle...Current resources of workers are:
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
[50240434322]
State of adaptive_scaler
ScalingDownPhase, ScalingUpPhase, Tipped_over_confs, Current_tipped_over_conf, initial_confs, StartScalingDown, Worker resources
True
False
[]
None
[]
True
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
COST-EFFECTIVE-RESULT
[0, 0, 2, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[1, 0, 0, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 0, 1, 1]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 1, 1, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 1, 0, 1]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 2, 0, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[1, 0, 1, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 0, 3, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 0, 2, 1]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[1, 0, 0, 1]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 1, 2, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[1, 1, 0, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 0, 1, 2]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 1, 1, 1]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
[0, 2, 1, 0]
Removing config because it has a lower resource cost than the failed result and we assume it will therefore fail for this tenant
Removing failed conf
[0, 1, 0, 2]
Tipped over conf already removed:
[0, 1, 0, 2]
{'cpu': 6, 'memory': 4}
{'cpu': 4, 'memory': 2}
{'cpu': 3, 'memory': 2}
{'cpu': 4, 'memory': 2}
Adding stronger incremental result
